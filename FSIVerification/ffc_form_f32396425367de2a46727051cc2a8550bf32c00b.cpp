// This code conforms with the UFC specification version 2016.1.0
// and was automatically generated by FFC version 2016.1.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False

#include "ffc_form_f32396425367de2a46727051cc2a8550bf32c00b.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0: public ufc::finite_element
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::signature() const
{
    return "FiniteElement('Real', triangle, 0)";
}

ufc::shape ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::space_dimension() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::value_size() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::degree() const
{
    return 0;
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::family() const
{
    return "Real";
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
}

double ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1: public ufc::finite_element
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Real', triangle, 0), dim=2)";
}

ufc::shape ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::space_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::value_size() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::degree() const
{
    return 0;
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::family() const
{
    return "Real";
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 2; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 2; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 2; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[1];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[4] = dof_values[0];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[1];
    vertex_values[3] = dof_values[1];
    vertex_values[5] = dof_values[1];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    dof_coordinates[2] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[3] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2: public ufc::finite_element
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', triangle, 2)";
}

ufc::shape ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::space_dimension() const
{
    return 6;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::value_size() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::degree() const
{
    return 2;
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::family() const
{
    return "Lagrange";
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3: public ufc::finite_element
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
}

ufc::shape ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::space_dimension() const
{
    return 12;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::value_size() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::degree() const
{
    return 2;
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::family() const
{
    return "Lagrange";
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[19] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[20] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[21] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[22] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[23] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_2();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4: public ufc::finite_element
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::signature() const
{
    return "FiniteElement('Lagrange', triangle, 1)";
}

ufc::shape ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::space_dimension() const
{
    return 3;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::value_rank() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::value_size() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::degree() const
{
    return 1;
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::family() const
{
    return "Lagrange";
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5: public ufc::finite_element
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::shape ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::space_dimension() const
{
    return 6;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::value_size() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::degree() const
{
    return 1;
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::family() const
{
    return "Lagrange";
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[0];
    dof_coordinates[7] = coordinate_dofs[1];
    dof_coordinates[8] = coordinate_dofs[2];
    dof_coordinates[9] = coordinate_dofs[3];
    dof_coordinates[10] = coordinate_dofs[4];
    dof_coordinates[11] = coordinate_dofs[5];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6: public ufc::finite_element
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::signature() const
{
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2), FiniteElement('Lagrange', triangle, 1))";
}

ufc::shape ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::space_dimension() const
{
    return 21;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::value_size() const
{
    return 5;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::reference_value_size() const
{
    return 5;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::degree() const
{
    return 2;
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::family() const
{
    return "Mixed";
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 21; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[20];
    for (unsigned int r = 0; r < 20; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 16:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 17:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 18:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 19:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 20:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[16] = vals[3];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[18] = vals[4];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[19] = vals[4];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[4];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[15];
    vertex_values[8] = dof_values[16];
    vertex_values[13] = dof_values[17];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[18];
    vertex_values[9] = dof_values[19];
    vertex_values[14] = dof_values[20];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[19] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[20] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[21] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[22] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[23] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[0];
    dof_coordinates[31] = coordinate_dofs[1];
    dof_coordinates[32] = coordinate_dofs[2];
    dof_coordinates[33] = coordinate_dofs[3];
    dof_coordinates[34] = coordinate_dofs[4];
    dof_coordinates[35] = coordinate_dofs[5];
    dof_coordinates[36] = coordinate_dofs[0];
    dof_coordinates[37] = coordinate_dofs[1];
    dof_coordinates[38] = coordinate_dofs[2];
    dof_coordinates[39] = coordinate_dofs[3];
    dof_coordinates[40] = coordinate_dofs[4];
    dof_coordinates[41] = coordinate_dofs[5];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5();
        break;
      }
    case 2:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_4();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0: public ufc::dofmap
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::num_element_dofs() const
{
    return 1;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::num_facet_dofs() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1: public ufc::dofmap
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Real', triangle, 0), dim=2)";
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::num_element_dofs() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::num_facet_dofs() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset;
    offset += 1;
    dofs[1] = offset;
    offset += 1;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2: public ufc::dofmap
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + num_global_entities[1];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::num_element_dofs() const
{
    return 6;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::num_facet_dofs() const
{
    return 3;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3: public ufc::dofmap
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0] + 2*num_global_entities[1];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::num_element_dofs() const
{
    return 12;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::num_facet_dofs() const
{
    return 6;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_2();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4: public ufc::dofmap
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::num_element_dofs() const
{
    return 3;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::num_facet_dofs() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5: public ufc::dofmap
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::num_element_dofs() const
{
    return 6;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::num_facet_dofs() const
{
    return 4;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6: public ufc::dofmap
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::signature() const
{
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2), FiniteElement('Lagrange', triangle, 1))";
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 5*num_global_entities[0] + 2*num_global_entities[1];
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::num_element_dofs() const
{
    return 21;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::num_facet_dofs() const
{
    return 12;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + entity_indices[0][0];
    dofs[16] = offset + entity_indices[0][1];
    dofs[17] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[18] = offset + entity_indices[0][0];
    dofs[19] = offset + entity_indices[0][1];
    dofs[20] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 16;
      dofs[9] = 17;
      dofs[10] = 19;
      dofs[11] = 20;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 17;
      dofs[10] = 18;
      dofs[11] = 20;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 18;
      dofs[11] = 19;
        break;
      }
    }
    
}

void ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
        dofs[3] = 15;
        dofs[4] = 18;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
        dofs[3] = 16;
        dofs[4] = 19;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
        dofs[3] = 17;
        dofs[4] = 20;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5();
        break;
      }
    case 2:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_4();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6::create() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6();
}


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_1: public ufc::cell_integral
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_1() : ufc::cell_integral()
  {
    
  }

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_1() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, true, true, false, false, false});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    272
    // Number of operations (multiply-add pairs) for tensor contraction: 3303
    // Total number of operations (multiply-add pairs):                  3578
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*K[0]*K[0]*(1.0);
    const double G0_0_1 = det*K[0]*K[2]*(1.0);
    const double G0_1_0 = det*K[2]*K[0]*(1.0);
    const double G0_1_1 = det*K[2]*K[2]*(1.0);
    const double G1_0_0 = det*K[0]*K[0]*(1.0);
    const double G1_0_1 = det*K[0]*K[2]*(1.0);
    const double G1_1_0 = det*K[2]*K[0]*(1.0);
    const double G1_1_1 = det*K[2]*K[2]*(1.0);
    const double G2_0_0 = det*K[1]*K[1]*(1.0);
    const double G2_0_1 = det*K[1]*K[3]*(1.0);
    const double G2_1_0 = det*K[3]*K[1]*(1.0);
    const double G2_1_1 = det*K[3]*K[3]*(1.0);
    const double G3_0_0 = det*K[1]*K[1]*(1.0);
    const double G3_0_1 = det*K[1]*K[3]*(1.0);
    const double G3_1_0 = det*K[3]*K[1]*(1.0);
    const double G3_1_1 = det*K[3]*K[3]*(1.0);
    const double G4_0 = det*K[0]*(1.0);
    const double G4_1 = det*K[2]*(1.0);
    const double G5_0 = det*K[1]*(1.0);
    const double G5_1 = det*K[3]*(1.0);
    const double G6_0_0_0 = det*w[1][0]*w[0][0]*K[0]*(1.0);
    const double G6_0_0_1 = det*w[1][0]*w[0][0]*K[2]*(1.0);
    const double G6_0_1_0 = det*w[1][0]*w[0][1]*K[0]*(1.0);
    const double G6_0_1_1 = det*w[1][0]*w[0][1]*K[2]*(1.0);
    const double G6_0_2_0 = det*w[1][0]*w[0][2]*K[0]*(1.0);
    const double G6_0_2_1 = det*w[1][0]*w[0][2]*K[2]*(1.0);
    const double G6_0_3_0 = det*w[1][0]*w[0][3]*K[0]*(1.0);
    const double G6_0_3_1 = det*w[1][0]*w[0][3]*K[2]*(1.0);
    const double G6_0_4_0 = det*w[1][0]*w[0][4]*K[0]*(1.0);
    const double G6_0_4_1 = det*w[1][0]*w[0][4]*K[2]*(1.0);
    const double G6_0_5_0 = det*w[1][0]*w[0][5]*K[0]*(1.0);
    const double G6_0_5_1 = det*w[1][0]*w[0][5]*K[2]*(1.0);
    const double G7_0_0_0 = det*w[1][0]*w[0][0]*K[0]*(1.0);
    const double G7_0_0_1 = det*w[1][0]*w[0][0]*K[2]*(1.0);
    const double G7_0_1_0 = det*w[1][0]*w[0][1]*K[0]*(1.0);
    const double G7_0_2_1 = det*w[1][0]*w[0][2]*K[2]*(1.0);
    const double G7_0_3_0 = det*w[1][0]*w[0][3]*K[0]*(1.0);
    const double G7_0_3_1 = det*w[1][0]*w[0][3]*K[2]*(1.0);
    const double G7_0_4_0 = det*w[1][0]*w[0][4]*K[0]*(1.0);
    const double G7_0_4_1 = det*w[1][0]*w[0][4]*K[2]*(1.0);
    const double G7_0_5_0 = det*w[1][0]*w[0][5]*K[0]*(1.0);
    const double G7_0_5_1 = det*w[1][0]*w[0][5]*K[2]*(1.0);
    const double G8_0_0_0 = det*w[1][0]*w[0][0]*K[1]*(1.0);
    const double G8_0_0_1 = det*w[1][0]*w[0][0]*K[3]*(1.0);
    const double G8_0_1_0 = det*w[1][0]*w[0][1]*K[1]*(1.0);
    const double G8_0_2_1 = det*w[1][0]*w[0][2]*K[3]*(1.0);
    const double G8_0_3_0 = det*w[1][0]*w[0][3]*K[1]*(1.0);
    const double G8_0_3_1 = det*w[1][0]*w[0][3]*K[3]*(1.0);
    const double G8_0_4_0 = det*w[1][0]*w[0][4]*K[1]*(1.0);
    const double G8_0_4_1 = det*w[1][0]*w[0][4]*K[3]*(1.0);
    const double G8_0_5_0 = det*w[1][0]*w[0][5]*K[1]*(1.0);
    const double G8_0_5_1 = det*w[1][0]*w[0][5]*K[3]*(1.0);
    const double G9_0_0_6 = det*w[1][0]*w[0][6]*K[1]*(1.0);
    const double G9_0_0_7 = det*w[1][0]*w[0][7]*K[1]*(1.0);
    const double G9_0_0_8 = det*w[1][0]*w[0][8]*K[1]*(1.0);
    const double G9_0_0_9 = det*w[1][0]*w[0][9]*K[1]*(1.0);
    const double G9_0_0_10 = det*w[1][0]*w[0][10]*K[1]*(1.0);
    const double G9_0_0_11 = det*w[1][0]*w[0][11]*K[1]*(1.0);
    const double G9_0_1_6 = det*w[1][0]*w[0][6]*K[3]*(1.0);
    const double G9_0_1_7 = det*w[1][0]*w[0][7]*K[3]*(1.0);
    const double G9_0_1_8 = det*w[1][0]*w[0][8]*K[3]*(1.0);
    const double G9_0_1_9 = det*w[1][0]*w[0][9]*K[3]*(1.0);
    const double G9_0_1_10 = det*w[1][0]*w[0][10]*K[3]*(1.0);
    const double G9_0_1_11 = det*w[1][0]*w[0][11]*K[3]*(1.0);
    const double G10_0_0_0 = det*w[1][0]*w[0][0]*K[0]*(1.0);
    const double G10_0_0_1 = det*w[1][0]*w[0][0]*K[2]*(1.0);
    const double G10_0_1_0 = det*w[1][0]*w[0][1]*K[0]*(1.0);
    const double G10_0_1_1 = det*w[1][0]*w[0][1]*K[2]*(1.0);
    const double G10_0_2_0 = det*w[1][0]*w[0][2]*K[0]*(1.0);
    const double G10_0_2_1 = det*w[1][0]*w[0][2]*K[2]*(1.0);
    const double G10_0_3_0 = det*w[1][0]*w[0][3]*K[0]*(1.0);
    const double G10_0_3_1 = det*w[1][0]*w[0][3]*K[2]*(1.0);
    const double G10_0_4_0 = det*w[1][0]*w[0][4]*K[0]*(1.0);
    const double G10_0_4_1 = det*w[1][0]*w[0][4]*K[2]*(1.0);
    const double G10_0_5_0 = det*w[1][0]*w[0][5]*K[0]*(1.0);
    const double G10_0_5_1 = det*w[1][0]*w[0][5]*K[2]*(1.0);
    const double G11_0_6_0 = det*w[1][0]*w[0][6]*K[0]*(1.0);
    const double G11_0_6_1 = det*w[1][0]*w[0][6]*K[2]*(1.0);
    const double G11_0_7_0 = det*w[1][0]*w[0][7]*K[0]*(1.0);
    const double G11_0_8_1 = det*w[1][0]*w[0][8]*K[2]*(1.0);
    const double G11_0_9_0 = det*w[1][0]*w[0][9]*K[0]*(1.0);
    const double G11_0_9_1 = det*w[1][0]*w[0][9]*K[2]*(1.0);
    const double G11_0_10_0 = det*w[1][0]*w[0][10]*K[0]*(1.0);
    const double G11_0_10_1 = det*w[1][0]*w[0][10]*K[2]*(1.0);
    const double G11_0_11_0 = det*w[1][0]*w[0][11]*K[0]*(1.0);
    const double G11_0_11_1 = det*w[1][0]*w[0][11]*K[2]*(1.0);
    const double G12_0_6_0 = det*w[1][0]*w[0][6]*K[1]*(1.0);
    const double G12_0_6_1 = det*w[1][0]*w[0][6]*K[3]*(1.0);
    const double G12_0_7_0 = det*w[1][0]*w[0][7]*K[1]*(1.0);
    const double G12_0_7_1 = det*w[1][0]*w[0][7]*K[3]*(1.0);
    const double G12_0_8_0 = det*w[1][0]*w[0][8]*K[1]*(1.0);
    const double G12_0_8_1 = det*w[1][0]*w[0][8]*K[3]*(1.0);
    const double G12_0_9_0 = det*w[1][0]*w[0][9]*K[1]*(1.0);
    const double G12_0_9_1 = det*w[1][0]*w[0][9]*K[3]*(1.0);
    const double G12_0_10_0 = det*w[1][0]*w[0][10]*K[1]*(1.0);
    const double G12_0_10_1 = det*w[1][0]*w[0][10]*K[3]*(1.0);
    const double G12_0_11_0 = det*w[1][0]*w[0][11]*K[1]*(1.0);
    const double G12_0_11_1 = det*w[1][0]*w[0][11]*K[3]*(1.0);
    const double G13_0_6_0 = det*w[1][0]*w[0][6]*K[1]*(1.0);
    const double G13_0_6_1 = det*w[1][0]*w[0][6]*K[3]*(1.0);
    const double G13_0_7_0 = det*w[1][0]*w[0][7]*K[1]*(1.0);
    const double G13_0_8_1 = det*w[1][0]*w[0][8]*K[3]*(1.0);
    const double G13_0_9_0 = det*w[1][0]*w[0][9]*K[1]*(1.0);
    const double G13_0_9_1 = det*w[1][0]*w[0][9]*K[3]*(1.0);
    const double G13_0_10_0 = det*w[1][0]*w[0][10]*K[1]*(1.0);
    const double G13_0_10_1 = det*w[1][0]*w[0][10]*K[3]*(1.0);
    const double G13_0_11_0 = det*w[1][0]*w[0][11]*K[1]*(1.0);
    const double G13_0_11_1 = det*w[1][0]*w[0][11]*K[3]*(1.0);
    const double G14_0 = det*K[1]*(1.0);
    const double G14_1 = det*K[3]*(1.0);
    const double G15_0_0_0 = det*w[2][0]*K[1]*K[1]*(1.0);
    const double G15_0_0_1 = det*w[2][0]*K[1]*K[3]*(1.0);
    const double G15_1_0_0 = det*w[2][0]*K[3]*K[1]*(1.0);
    const double G15_1_0_1 = det*w[2][0]*K[3]*K[3]*(1.0);
    const double G16_0_0_0 = det*w[2][0]*K[1]*K[1]*(1.0);
    const double G16_0_0_1 = det*w[2][0]*K[1]*K[3]*(1.0);
    const double G16_1_0_0 = det*w[2][0]*K[3]*K[1]*(1.0);
    const double G16_1_0_1 = det*w[2][0]*K[3]*K[3]*(1.0);
    const double G17_0_0_0 = det*w[2][0]*K[1]*K[1]*(1.0);
    const double G17_0_0_1 = det*w[2][0]*K[1]*K[3]*(1.0);
    const double G17_1_0_0 = det*w[2][0]*K[3]*K[1]*(1.0);
    const double G17_1_0_1 = det*w[2][0]*K[3]*K[3]*(1.0);
    const double G18_0_0_0 = det*w[2][0]*K[1]*K[0]*(1.0);
    const double G18_0_0_1 = det*w[2][0]*K[1]*K[2]*(1.0);
    const double G18_1_0_0 = det*w[2][0]*K[3]*K[0]*(1.0);
    const double G18_1_0_1 = det*w[2][0]*K[3]*K[2]*(1.0);
    const double G19_0 = det*K[0]*(1.0);
    const double G19_1 = det*K[2]*(1.0);
    const double G20_0_0_0 = det*w[2][0]*K[0]*K[0]*(1.0);
    const double G20_0_0_1 = det*w[2][0]*K[0]*K[2]*(1.0);
    const double G20_1_0_0 = det*w[2][0]*K[2]*K[0]*(1.0);
    const double G20_1_0_1 = det*w[2][0]*K[2]*K[2]*(1.0);
    const double G21_0_0_0 = det*w[2][0]*K[0]*K[0]*(1.0);
    const double G21_0_0_1 = det*w[2][0]*K[0]*K[2]*(1.0);
    const double G21_1_0_0 = det*w[2][0]*K[2]*K[0]*(1.0);
    const double G21_1_0_1 = det*w[2][0]*K[2]*K[2]*(1.0);
    const double G22_0_0_0 = det*w[2][0]*K[0]*K[1]*(1.0);
    const double G22_0_0_1 = det*w[2][0]*K[0]*K[3]*(1.0);
    const double G22_1_0_0 = det*w[2][0]*K[2]*K[1]*(1.0);
    const double G22_1_0_1 = det*w[2][0]*K[2]*K[3]*(1.0);
    const double G23_0_0_0 = det*w[2][0]*K[0]*K[0]*(1.0);
    const double G23_0_0_1 = det*w[2][0]*K[0]*K[2]*(1.0);
    const double G23_1_0_0 = det*w[2][0]*K[2]*K[0]*(1.0);
    const double G23_1_0_1 = det*w[2][0]*K[2]*K[2]*(1.0);
    
    // Compute element tensor
    A[0] = -0.030952380952381*G6_0_0_0 - 0.030952380952381*G6_0_0_1 + 0.00357142857142857*G6_0_1_0 + 0.00357142857142858*G6_0_1_1 + 0.00357142857142857*G6_0_2_0 + 0.00357142857142858*G6_0_2_1 - 0.00476190476190477*G6_0_3_0 - 0.0047619047619047*G6_0_3_1 - 0.0190476190476191*G6_0_4_0 - 0.0190476190476191*G6_0_4_1 - 0.0190476190476191*G6_0_5_0 - 0.019047619047619*G6_0_5_1 - 0.030952380952381*G7_0_0_0 - 0.030952380952381*G7_0_0_1 - 0.00714285714285719*G7_0_1_0 - 0.00714285714285714*G7_0_2_1 + 0.0095238095238095*G7_0_3_0 + 0.00952380952380934*G7_0_3_1 - 0.0095238095238095*G7_0_4_0 + 0.0380952380952382*G7_0_4_1 + 0.0380952380952381*G7_0_5_0 - 0.00952380952380951*G7_0_5_1 - 0.030952380952381*G9_0_0_6 + 0.00357142857142857*G9_0_0_7 + 0.00357142857142857*G9_0_0_8 - 0.00476190476190477*G9_0_0_9 - 0.0190476190476191*G9_0_0_10 - 0.0190476190476191*G9_0_0_11 - 0.030952380952381*G9_0_1_6 + 0.00357142857142858*G9_0_1_7 + 0.00357142857142859*G9_0_1_8 - 0.0047619047619047*G9_0_1_9 - 0.0190476190476191*G9_0_1_10 - 0.019047619047619*G9_0_1_11 + 0.5*G17_0_0_0 + 0.5*G17_0_0_1 + 0.5*G17_1_0_0 + 0.500000000000002*G17_1_0_1 + 0.5*G20_0_0_0 + 0.5*G20_0_0_1 + 0.5*G20_1_0_0 + 0.500000000000002*G20_1_0_1 + 0.5*G21_0_0_0 + 0.5*G21_0_0_1 + 0.5*G21_1_0_0 + 0.500000000000002*G21_1_0_1;
    A[1] = -0.00714285714285719*G6_0_0_0 - 0.00357142857142856*G6_0_1_0 + 0.00436507936507937*G6_0_2_0 - 0.00793650793650793*G6_0_3_0 - 0.00634920634920637*G6_0_4_0 - 0.0126984126984127*G6_0_5_0 + 0.00357142857142857*G7_0_0_0 + 0.00357142857142858*G7_0_0_1 - 0.00357142857142856*G7_0_1_0 + 0.00436507936507937*G7_0_2_1 + 0.00158730158730159*G7_0_3_0 - 0.00634920634920631*G7_0_3_1 - 0.00158730158730159*G7_0_4_0 - 0.00793650793650796*G7_0_4_1 + 0.00634920634920634*G7_0_5_1 - 0.00714285714285719*G9_0_0_6 - 0.00357142857142856*G9_0_0_7 + 0.00436507936507937*G9_0_0_8 - 0.00793650793650793*G9_0_0_9 - 0.00634920634920637*G9_0_0_10 - 0.0126984126984127*G9_0_0_11 + 0.166666666666668*G17_0_0_0 + 0.166666666666666*G17_1_0_0 + 0.166666666666668*G20_0_0_0 + 0.166666666666666*G20_1_0_0 + 0.166666666666668*G21_0_0_0 + 0.166666666666666*G21_1_0_0;
    A[2] = -0.00714285714285714*G6_0_0_1 + 0.00436507936507937*G6_0_1_1 - 0.00357142857142857*G6_0_2_1 - 0.00793650793650795*G6_0_3_1 - 0.0126984126984127*G6_0_4_1 - 0.00634920634920636*G6_0_5_1 + 0.00357142857142857*G7_0_0_0 + 0.00357142857142858*G7_0_0_1 + 0.00436507936507937*G7_0_1_0 - 0.00357142857142857*G7_0_2_1 - 0.00634920634920634*G7_0_3_0 + 0.00158730158730162*G7_0_3_1 + 0.00634920634920634*G7_0_4_0 - 0.00793650793650794*G7_0_5_0 - 0.00158730158730159*G7_0_5_1 - 0.00714285714285713*G9_0_1_6 + 0.00436507936507937*G9_0_1_7 - 0.00357142857142857*G9_0_1_8 - 0.00793650793650795*G9_0_1_9 - 0.0126984126984127*G9_0_1_10 - 0.00634920634920636*G9_0_1_11 + 0.166666666666667*G17_0_0_1 + 0.166666666666666*G17_1_0_1 + 0.166666666666667*G20_0_0_1 + 0.166666666666666*G20_1_0_1 + 0.166666666666667*G21_0_0_1 + 0.166666666666666*G21_1_0_1;
    A[3] = 0.0095238095238095*G6_0_0_0 + 0.00952380952380934*G6_0_0_1 + 0.00158730158730159*G6_0_1_0 - 0.00634920634920631*G6_0_1_1 - 0.00634920634920634*G6_0_2_0 + 0.00158730158730162*G6_0_2_1 - 0.019047619047619*G6_0_3_0 - 0.0190476190476189*G6_0_3_1 - 0.0126984126984127*G6_0_4_0 - 0.00634920634920631*G6_0_4_1 - 0.00634920634920635*G6_0_5_0 - 0.0126984126984127*G6_0_5_1 - 0.00476190476190477*G7_0_0_0 - 0.0047619047619047*G7_0_0_1 - 0.00793650793650793*G7_0_1_0 - 0.00793650793650795*G7_0_2_1 - 0.019047619047619*G7_0_3_0 - 0.0190476190476189*G7_0_3_1 + 0.019047619047619*G7_0_4_0 + 0.0126984126984126*G7_0_4_1 + 0.0126984126984127*G7_0_5_0 + 0.019047619047619*G7_0_5_1 + 0.0095238095238095*G9_0_0_6 + 0.00158730158730159*G9_0_0_7 - 0.00634920634920634*G9_0_0_8 - 0.019047619047619*G9_0_0_9 - 0.0126984126984127*G9_0_0_10 - 0.00634920634920635*G9_0_0_11 + 0.00952380952380934*G9_0_1_6 - 0.00634920634920631*G9_0_1_7 + 0.00158730158730162*G9_0_1_8 - 0.0190476190476189*G9_0_1_9 - 0.00634920634920631*G9_0_1_10 - 0.0126984126984127*G9_0_1_11;
    A[4] = -0.0095238095238095*G6_0_0_0 + 0.0380952380952382*G6_0_0_1 - 0.00158730158730159*G6_0_1_0 - 0.00793650793650796*G6_0_1_1 + 0.00634920634920634*G6_0_2_0 + 0.019047619047619*G6_0_3_0 + 0.0126984126984126*G6_0_3_1 + 0.0126984126984127*G6_0_4_0 + 0.0317460317460317*G6_0_4_1 + 0.00634920634920635*G6_0_5_0 + 0.0253968253968254*G6_0_5_1 - 0.0190476190476191*G7_0_0_0 - 0.0190476190476191*G7_0_0_1 - 0.00634920634920637*G7_0_1_0 - 0.0126984126984127*G7_0_2_1 - 0.0126984126984127*G7_0_3_0 - 0.00634920634920631*G7_0_3_1 + 0.0126984126984127*G7_0_4_0 + 0.0317460317460317*G7_0_4_1 + 0.0253968253968254*G7_0_5_0 + 0.00634920634920635*G7_0_5_1 - 0.0095238095238095*G9_0_0_6 - 0.00158730158730159*G9_0_0_7 + 0.00634920634920634*G9_0_0_8 + 0.019047619047619*G9_0_0_9 + 0.0126984126984127*G9_0_0_10 + 0.00634920634920635*G9_0_0_11 + 0.0380952380952382*G9_0_1_6 - 0.00793650793650796*G9_0_1_7 + 0.0126984126984126*G9_0_1_9 + 0.0317460317460317*G9_0_1_10 + 0.0253968253968254*G9_0_1_11 - 0.666666666666668*G17_0_0_1 - 0.666666666666668*G17_1_0_1 - 0.666666666666668*G20_0_0_1 - 0.666666666666668*G20_1_0_1 - 0.666666666666668*G21_0_0_1 - 0.666666666666668*G21_1_0_1;
    A[5] = 0.0380952380952381*G6_0_0_0 - 0.00952380952380951*G6_0_0_1 + 0.00634920634920634*G6_0_1_1 - 0.00793650793650794*G6_0_2_0 - 0.00158730158730159*G6_0_2_1 + 0.0126984126984127*G6_0_3_0 + 0.019047619047619*G6_0_3_1 + 0.0253968253968254*G6_0_4_0 + 0.00634920634920635*G6_0_4_1 + 0.0317460317460318*G6_0_5_0 + 0.0126984126984127*G6_0_5_1 - 0.0190476190476191*G7_0_0_0 - 0.019047619047619*G7_0_0_1 - 0.0126984126984127*G7_0_1_0 - 0.00634920634920636*G7_0_2_1 - 0.00634920634920635*G7_0_3_0 - 0.0126984126984127*G7_0_3_1 + 0.00634920634920635*G7_0_4_0 + 0.0253968253968254*G7_0_4_1 + 0.0317460317460318*G7_0_5_0 + 0.0126984126984127*G7_0_5_1 + 0.0380952380952381*G9_0_0_6 - 0.00793650793650794*G9_0_0_8 + 0.0126984126984127*G9_0_0_9 + 0.0253968253968254*G9_0_0_10 + 0.0317460317460318*G9_0_0_11 - 0.00952380952380951*G9_0_1_6 + 0.00634920634920634*G9_0_1_7 - 0.00158730158730159*G9_0_1_8 + 0.019047619047619*G9_0_1_9 + 0.00634920634920635*G9_0_1_10 + 0.0126984126984127*G9_0_1_11 - 0.666666666666668*G17_0_0_0 - 0.666666666666667*G17_1_0_0 - 0.666666666666668*G20_0_0_0 - 0.666666666666667*G20_1_0_0 - 0.666666666666668*G21_0_0_0 - 0.666666666666667*G21_1_0_0;
    A[6] = -0.030952380952381*G8_0_0_0 - 0.030952380952381*G8_0_0_1 - 0.00714285714285719*G8_0_1_0 - 0.00714285714285713*G8_0_2_1 + 0.0095238095238095*G8_0_3_0 + 0.00952380952380934*G8_0_3_1 - 0.0095238095238095*G8_0_4_0 + 0.0380952380952382*G8_0_4_1 + 0.0380952380952381*G8_0_5_0 - 0.00952380952380951*G8_0_5_1 + 0.5*G18_0_0_0 + 0.5*G18_0_0_1 + 0.5*G18_1_0_0 + 0.500000000000002*G18_1_0_1;
    A[7] = 0.00357142857142857*G8_0_0_0 + 0.00357142857142858*G8_0_0_1 - 0.00357142857142856*G8_0_1_0 + 0.00436507936507937*G8_0_2_1 + 0.00158730158730159*G8_0_3_0 - 0.00634920634920631*G8_0_3_1 - 0.00158730158730159*G8_0_4_0 - 0.00793650793650796*G8_0_4_1 + 0.00634920634920634*G8_0_5_1 + 0.166666666666668*G18_0_0_0 + 0.166666666666666*G18_1_0_0;
    A[8] = 0.00357142857142857*G8_0_0_0 + 0.00357142857142859*G8_0_0_1 + 0.00436507936507937*G8_0_1_0 - 0.00357142857142857*G8_0_2_1 - 0.00634920634920634*G8_0_3_0 + 0.00158730158730162*G8_0_3_1 + 0.00634920634920634*G8_0_4_0 - 0.00793650793650794*G8_0_5_0 - 0.00158730158730159*G8_0_5_1 + 0.166666666666667*G18_0_0_1 + 0.166666666666666*G18_1_0_1;
    A[9] = -0.00476190476190477*G8_0_0_0 - 0.0047619047619047*G8_0_0_1 - 0.00793650793650793*G8_0_1_0 - 0.00793650793650795*G8_0_2_1 - 0.019047619047619*G8_0_3_0 - 0.0190476190476189*G8_0_3_1 + 0.019047619047619*G8_0_4_0 + 0.0126984126984126*G8_0_4_1 + 0.0126984126984127*G8_0_5_0 + 0.019047619047619*G8_0_5_1;
    A[10] = -0.0190476190476191*G8_0_0_0 - 0.0190476190476191*G8_0_0_1 - 0.00634920634920637*G8_0_1_0 - 0.0126984126984127*G8_0_2_1 - 0.0126984126984127*G8_0_3_0 - 0.00634920634920631*G8_0_3_1 + 0.0126984126984127*G8_0_4_0 + 0.0317460317460317*G8_0_4_1 + 0.0253968253968254*G8_0_5_0 + 0.00634920634920635*G8_0_5_1 - 0.666666666666668*G18_0_0_1 - 0.666666666666668*G18_1_0_1;
    A[11] = -0.0190476190476191*G8_0_0_0 - 0.019047619047619*G8_0_0_1 - 0.0126984126984127*G8_0_1_0 - 0.00634920634920636*G8_0_2_1 - 0.00634920634920635*G8_0_3_0 - 0.0126984126984127*G8_0_3_1 + 0.00634920634920635*G8_0_4_0 + 0.0253968253968254*G8_0_4_1 + 0.0317460317460318*G8_0_5_0 + 0.0126984126984127*G8_0_5_1 - 0.666666666666668*G18_0_0_0 - 0.666666666666667*G18_1_0_0;
    A[12] = 0.0;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = 0.0;
    A[16] = 0.0;
    A[17] = 0.0;
    A[18] = 0.166666666666667*G19_0 + 0.166666666666668*G19_1;
    A[19] = 0.0;
    A[20] = 0.0;
    A[21] = 0.00357142857142857*G6_0_0_0 + 0.00357142857142858*G6_0_0_1 + 0.00714285714285716*G6_0_1_0 + 0.00714285714285705*G6_0_1_1 - 0.00436507936507936*G6_0_2_0 - 0.00436507936507935*G6_0_2_1 + 0.00634920634920636*G6_0_3_0 + 0.00634920634920635*G6_0_3_1 + 0.00793650793650794*G6_0_4_0 + 0.00793650793650799*G6_0_4_1 + 0.0126984126984127*G6_0_5_0 + 0.0126984126984127*G6_0_5_1 + 0.00357142857142857*G7_0_0_0 + 0.00357142857142858*G7_0_0_1 - 0.00357142857142856*G7_0_1_0 + 0.00436507936507937*G7_0_2_1 + 0.00158730158730159*G7_0_3_0 - 0.00634920634920631*G7_0_3_1 - 0.00158730158730159*G7_0_4_0 - 0.00793650793650796*G7_0_4_1 + 0.00634920634920634*G7_0_5_1 + 0.00357142857142857*G9_0_0_6 + 0.00714285714285716*G9_0_0_7 - 0.00436507936507936*G9_0_0_8 + 0.00634920634920636*G9_0_0_9 + 0.00793650793650794*G9_0_0_10 + 0.0126984126984127*G9_0_0_11 + 0.00357142857142859*G9_0_1_6 + 0.00714285714285705*G9_0_1_7 - 0.00436507936507935*G9_0_1_8 + 0.00634920634920635*G9_0_1_9 + 0.00793650793650799*G9_0_1_10 + 0.0126984126984127*G9_0_1_11 + 0.166666666666668*G17_0_0_0 + 0.166666666666666*G17_0_0_1 + 0.166666666666668*G20_0_0_0 + 0.166666666666666*G20_0_0_1 + 0.166666666666668*G21_0_0_0 + 0.166666666666666*G21_0_0_1;
    A[22] = -0.00357142857142856*G6_0_0_0 + 0.0309523809523809*G6_0_1_0 - 0.00357142857142857*G6_0_2_0 + 0.019047619047619*G6_0_3_0 + 0.00476190476190477*G6_0_4_0 + 0.0190476190476191*G6_0_5_0 + 0.00714285714285716*G7_0_0_0 + 0.00714285714285705*G7_0_0_1 + 0.0309523809523809*G7_0_1_0 - 0.00714285714285713*G7_0_2_1 + 0.0095238095238095*G7_0_3_0 + 0.0476190476190474*G7_0_3_1 - 0.0095238095238095*G7_0_4_0 - 0.0380952380952381*G7_0_5_0 - 0.0476190476190476*G7_0_5_1 - 0.00357142857142856*G9_0_0_6 + 0.0309523809523809*G9_0_0_7 - 0.00357142857142857*G9_0_0_8 + 0.019047619047619*G9_0_0_9 + 0.00476190476190477*G9_0_0_10 + 0.0190476190476191*G9_0_0_11 + 0.5*G17_0_0_0 + 0.5*G20_0_0_0 + 0.5*G21_0_0_0;
    A[23] = 0.00436507936507937*G6_0_0_1 - 0.00714285714285713*G6_0_1_1 - 0.00357142857142857*G6_0_2_1 - 0.0126984126984127*G6_0_3_1 - 0.00793650793650796*G6_0_4_1 - 0.00634920634920637*G6_0_5_1 - 0.00436507936507936*G7_0_0_0 - 0.00436507936507935*G7_0_0_1 - 0.00357142857142857*G7_0_1_0 - 0.00357142857142857*G7_0_2_1 - 0.00634920634920633*G7_0_3_0 - 0.0063492063492063*G7_0_3_1 + 0.00634920634920633*G7_0_4_0 + 0.0079365079365079*G7_0_4_1 + 0.00793650793650793*G7_0_5_0 + 0.00634920634920634*G7_0_5_1 + 0.00436507936507937*G9_0_1_6 - 0.00714285714285713*G9_0_1_7 - 0.00357142857142857*G9_0_1_8 - 0.0126984126984127*G9_0_1_9 - 0.00793650793650796*G9_0_1_10 - 0.00634920634920637*G9_0_1_11 - 0.166666666666667*G17_0_0_1 - 0.166666666666667*G20_0_0_1 - 0.166666666666667*G21_0_0_1;
    A[24] = 0.00158730158730159*G6_0_0_0 - 0.00634920634920631*G6_0_0_1 + 0.0095238095238095*G6_0_1_0 + 0.0476190476190474*G6_0_1_1 - 0.00634920634920633*G6_0_2_0 - 0.0063492063492063*G6_0_2_1 - 0.0126984126984127*G6_0_3_0 + 0.019047619047619*G6_0_3_1 - 0.019047619047619*G6_0_4_0 - 0.00634920634920622*G6_0_4_1 - 0.00634920634920635*G6_0_5_0 + 0.019047619047619*G6_0_5_1 + 0.00634920634920636*G7_0_0_0 + 0.00634920634920635*G7_0_0_1 + 0.019047619047619*G7_0_1_0 - 0.0126984126984127*G7_0_2_1 - 0.0126984126984127*G7_0_3_0 + 0.019047619047619*G7_0_3_1 + 0.0126984126984127*G7_0_4_0 + 0.00634920634920637*G7_0_4_1 - 0.0253968253968254*G7_0_5_0 - 0.0190476190476191*G7_0_5_1 + 0.00158730158730159*G9_0_0_6 + 0.0095238095238095*G9_0_0_7 - 0.00634920634920633*G9_0_0_8 - 0.0126984126984127*G9_0_0_9 - 0.019047619047619*G9_0_0_10 - 0.00634920634920635*G9_0_0_11 - 0.00634920634920631*G9_0_1_6 + 0.0476190476190474*G9_0_1_7 - 0.0063492063492063*G9_0_1_8 + 0.019047619047619*G9_0_1_9 - 0.00634920634920622*G9_0_1_10 + 0.019047619047619*G9_0_1_11 + 0.666666666666664*G17_0_0_1 + 0.666666666666664*G20_0_0_1 + 0.666666666666664*G21_0_0_1;
    A[25] = -0.00158730158730159*G6_0_0_0 - 0.00793650793650796*G6_0_0_1 - 0.0095238095238095*G6_0_1_0 + 0.00634920634920633*G6_0_2_0 + 0.0079365079365079*G6_0_2_1 + 0.0126984126984127*G6_0_3_0 + 0.00634920634920637*G6_0_3_1 + 0.019047619047619*G6_0_4_0 + 0.00634920634920635*G6_0_5_0 - 0.00634920634920631*G6_0_5_1 + 0.00793650793650794*G7_0_0_0 + 0.00793650793650799*G7_0_0_1 + 0.00476190476190477*G7_0_1_0 - 0.00793650793650796*G7_0_2_1 - 0.019047619047619*G7_0_3_0 - 0.00634920634920622*G7_0_3_1 + 0.019047619047619*G7_0_4_0 - 0.0126984126984127*G7_0_5_0 + 0.00634920634920636*G7_0_5_1 - 0.00158730158730159*G9_0_0_6 - 0.0095238095238095*G9_0_0_7 + 0.00634920634920633*G9_0_0_8 + 0.0126984126984127*G9_0_0_9 + 0.019047619047619*G9_0_0_10 + 0.00634920634920635*G9_0_0_11 - 0.00793650793650796*G9_0_1_6 + 0.0079365079365079*G9_0_1_8 + 0.00634920634920637*G9_0_1_9 - 0.00634920634920631*G9_0_1_11;
    A[26] = 0.00634920634920634*G6_0_0_1 - 0.0380952380952381*G6_0_1_0 - 0.0476190476190476*G6_0_1_1 + 0.00793650793650793*G6_0_2_0 + 0.00634920634920634*G6_0_2_1 - 0.0253968253968254*G6_0_3_0 - 0.0190476190476191*G6_0_3_1 - 0.0126984126984127*G6_0_4_0 + 0.00634920634920636*G6_0_4_1 - 0.0317460317460318*G6_0_5_0 - 0.0190476190476191*G6_0_5_1 + 0.0126984126984127*G7_0_0_0 + 0.0126984126984127*G7_0_0_1 + 0.0190476190476191*G7_0_1_0 - 0.00634920634920637*G7_0_2_1 - 0.00634920634920635*G7_0_3_0 + 0.019047619047619*G7_0_3_1 + 0.00634920634920635*G7_0_4_0 - 0.00634920634920631*G7_0_4_1 - 0.0317460317460318*G7_0_5_0 - 0.0190476190476191*G7_0_5_1 - 0.0380952380952381*G9_0_0_7 + 0.00793650793650793*G9_0_0_8 - 0.0253968253968254*G9_0_0_9 - 0.0126984126984127*G9_0_0_10 - 0.0317460317460318*G9_0_0_11 + 0.00634920634920634*G9_0_1_6 - 0.0476190476190476*G9_0_1_7 + 0.00634920634920634*G9_0_1_8 - 0.0190476190476191*G9_0_1_9 + 0.00634920634920636*G9_0_1_10 - 0.0190476190476191*G9_0_1_11 - 0.666666666666668*G17_0_0_0 - 0.666666666666667*G17_0_0_1 - 0.666666666666668*G20_0_0_0 - 0.666666666666667*G20_0_0_1 - 0.666666666666668*G21_0_0_0 - 0.666666666666667*G21_0_0_1;
    A[27] = 0.00357142857142857*G8_0_0_0 + 0.00357142857142859*G8_0_0_1 - 0.00357142857142856*G8_0_1_0 + 0.00436507936507937*G8_0_2_1 + 0.00158730158730159*G8_0_3_0 - 0.00634920634920631*G8_0_3_1 - 0.00158730158730159*G8_0_4_0 - 0.00793650793650796*G8_0_4_1 + 0.00634920634920634*G8_0_5_1 + 0.166666666666668*G18_0_0_0 + 0.166666666666666*G18_0_0_1;
    A[28] = 0.00714285714285716*G8_0_0_0 + 0.00714285714285705*G8_0_0_1 + 0.0309523809523809*G8_0_1_0 - 0.00714285714285713*G8_0_2_1 + 0.0095238095238095*G8_0_3_0 + 0.0476190476190474*G8_0_3_1 - 0.0095238095238095*G8_0_4_0 - 0.0380952380952381*G8_0_5_0 - 0.0476190476190476*G8_0_5_1 + 0.5*G18_0_0_0;
    A[29] = -0.00436507936507936*G8_0_0_0 - 0.00436507936507935*G8_0_0_1 - 0.00357142857142857*G8_0_1_0 - 0.00357142857142857*G8_0_2_1 - 0.00634920634920633*G8_0_3_0 - 0.0063492063492063*G8_0_3_1 + 0.00634920634920633*G8_0_4_0 + 0.0079365079365079*G8_0_4_1 + 0.00793650793650793*G8_0_5_0 + 0.00634920634920634*G8_0_5_1 - 0.166666666666667*G18_0_0_1;
    A[30] = 0.00634920634920636*G8_0_0_0 + 0.00634920634920635*G8_0_0_1 + 0.019047619047619*G8_0_1_0 - 0.0126984126984127*G8_0_2_1 - 0.0126984126984127*G8_0_3_0 + 0.019047619047619*G8_0_3_1 + 0.0126984126984127*G8_0_4_0 + 0.00634920634920637*G8_0_4_1 - 0.0253968253968254*G8_0_5_0 - 0.0190476190476191*G8_0_5_1 + 0.666666666666664*G18_0_0_1;
    A[31] = 0.00793650793650794*G8_0_0_0 + 0.00793650793650799*G8_0_0_1 + 0.00476190476190477*G8_0_1_0 - 0.00793650793650796*G8_0_2_1 - 0.019047619047619*G8_0_3_0 - 0.00634920634920622*G8_0_3_1 + 0.019047619047619*G8_0_4_0 - 0.0126984126984127*G8_0_5_0 + 0.00634920634920636*G8_0_5_1;
    A[32] = 0.0126984126984127*G8_0_0_0 + 0.0126984126984127*G8_0_0_1 + 0.0190476190476191*G8_0_1_0 - 0.00634920634920637*G8_0_2_1 - 0.00634920634920635*G8_0_3_0 + 0.019047619047619*G8_0_3_1 + 0.00634920634920635*G8_0_4_0 - 0.00634920634920631*G8_0_4_1 - 0.0317460317460318*G8_0_5_0 - 0.0190476190476191*G8_0_5_1 - 0.666666666666668*G18_0_0_0 - 0.666666666666667*G18_0_0_1;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.0;
    A[37] = 0.0;
    A[38] = 0.0;
    A[39] = 0.0;
    A[40] = -0.166666666666667*G19_0;
    A[41] = 0.0;
    A[42] = 0.00357142857142857*G6_0_0_0 + 0.00357142857142859*G6_0_0_1 - 0.00436507936507936*G6_0_1_0 - 0.00436507936507935*G6_0_1_1 + 0.00714285714285713*G6_0_2_0 + 0.00714285714285705*G6_0_2_1 + 0.00634920634920634*G6_0_3_0 + 0.00634920634920634*G6_0_3_1 + 0.0126984126984127*G6_0_4_0 + 0.0126984126984127*G6_0_4_1 + 0.00793650793650793*G6_0_5_0 + 0.00793650793650799*G6_0_5_1 + 0.00357142857142857*G7_0_0_0 + 0.00357142857142859*G7_0_0_1 + 0.00436507936507937*G7_0_1_0 - 0.00357142857142857*G7_0_2_1 - 0.00634920634920634*G7_0_3_0 + 0.00158730158730162*G7_0_3_1 + 0.00634920634920634*G7_0_4_0 - 0.00793650793650794*G7_0_5_0 - 0.00158730158730159*G7_0_5_1 + 0.00357142857142857*G9_0_0_6 - 0.00436507936507936*G9_0_0_7 + 0.00714285714285713*G9_0_0_8 + 0.00634920634920633*G9_0_0_9 + 0.0126984126984127*G9_0_0_10 + 0.00793650793650793*G9_0_0_11 + 0.00357142857142859*G9_0_1_6 - 0.00436507936507935*G9_0_1_7 + 0.00714285714285705*G9_0_1_8 + 0.00634920634920634*G9_0_1_9 + 0.0126984126984127*G9_0_1_10 + 0.00793650793650799*G9_0_1_11 + 0.166666666666667*G17_1_0_0 + 0.166666666666666*G17_1_0_1 + 0.166666666666667*G20_1_0_0 + 0.166666666666666*G20_1_0_1 + 0.166666666666667*G21_1_0_0 + 0.166666666666666*G21_1_0_1;
    A[43] = 0.00436507936507937*G6_0_0_0 - 0.00357142857142857*G6_0_1_0 - 0.00714285714285714*G6_0_2_0 - 0.0126984126984127*G6_0_3_0 - 0.00634920634920634*G6_0_4_0 - 0.00793650793650793*G6_0_5_0 - 0.00436507936507936*G7_0_0_0 - 0.00436507936507935*G7_0_0_1 - 0.00357142857142857*G7_0_1_0 - 0.00357142857142857*G7_0_2_1 - 0.00634920634920633*G7_0_3_0 - 0.0063492063492063*G7_0_3_1 + 0.00634920634920633*G7_0_4_0 + 0.0079365079365079*G7_0_4_1 + 0.00793650793650793*G7_0_5_0 + 0.00634920634920634*G7_0_5_1 + 0.00436507936507937*G9_0_0_6 - 0.00357142857142857*G9_0_0_7 - 0.00714285714285714*G9_0_0_8 - 0.0126984126984127*G9_0_0_9 - 0.00634920634920634*G9_0_0_10 - 0.00793650793650793*G9_0_0_11 - 0.166666666666667*G17_1_0_0 - 0.166666666666667*G20_1_0_0 - 0.166666666666667*G21_1_0_0;
    A[44] = -0.00357142857142857*G6_0_0_1 - 0.00357142857142857*G6_0_1_1 + 0.030952380952381*G6_0_2_1 + 0.019047619047619*G6_0_3_1 + 0.019047619047619*G6_0_4_1 + 0.00476190476190476*G6_0_5_1 + 0.00714285714285713*G7_0_0_0 + 0.00714285714285705*G7_0_0_1 - 0.00714285714285714*G7_0_1_0 + 0.030952380952381*G7_0_2_1 + 0.0476190476190475*G7_0_3_0 + 0.00952380952380927*G7_0_3_1 - 0.0476190476190475*G7_0_4_0 - 0.0380952380952379*G7_0_4_1 - 0.00952380952380949*G7_0_5_1 - 0.00357142857142857*G9_0_1_6 - 0.00357142857142857*G9_0_1_7 + 0.030952380952381*G9_0_1_8 + 0.019047619047619*G9_0_1_9 + 0.019047619047619*G9_0_1_10 + 0.00476190476190476*G9_0_1_11 + 0.5*G17_1_0_1 + 0.5*G20_1_0_1 + 0.5*G21_1_0_1;
    A[45] = -0.00634920634920634*G6_0_0_0 + 0.00158730158730162*G6_0_0_1 - 0.00634920634920633*G6_0_1_0 - 0.0063492063492063*G6_0_1_1 + 0.0476190476190475*G6_0_2_0 + 0.00952380952380927*G6_0_2_1 + 0.019047619047619*G6_0_3_0 - 0.0126984126984127*G6_0_3_1 + 0.019047619047619*G6_0_4_0 - 0.00634920634920637*G6_0_4_1 - 0.00634920634920632*G6_0_5_0 - 0.0190476190476189*G6_0_5_1 + 0.00634920634920634*G7_0_0_0 + 0.00634920634920634*G7_0_0_1 - 0.0126984126984127*G7_0_1_0 + 0.019047619047619*G7_0_2_1 + 0.019047619047619*G7_0_3_0 - 0.0126984126984127*G7_0_3_1 - 0.019047619047619*G7_0_4_0 - 0.0253968253968254*G7_0_4_1 + 0.00634920634920636*G7_0_5_0 + 0.0126984126984127*G7_0_5_1 - 0.00634920634920633*G9_0_0_6 - 0.00634920634920633*G9_0_0_7 + 0.0476190476190475*G9_0_0_8 + 0.019047619047619*G9_0_0_9 + 0.019047619047619*G9_0_0_10 - 0.00634920634920632*G9_0_0_11 + 0.00158730158730162*G9_0_1_6 - 0.0063492063492063*G9_0_1_7 + 0.00952380952380927*G9_0_1_8 - 0.0126984126984127*G9_0_1_9 - 0.00634920634920637*G9_0_1_10 - 0.0190476190476189*G9_0_1_11 + 0.666666666666667*G17_1_0_0 + 0.666666666666667*G20_1_0_0 + 0.666666666666667*G21_1_0_0;
    A[46] = 0.00634920634920634*G6_0_0_0 + 0.00634920634920633*G6_0_1_0 + 0.0079365079365079*G6_0_1_1 - 0.0476190476190475*G6_0_2_0 - 0.0380952380952379*G6_0_2_1 - 0.019047619047619*G6_0_3_0 - 0.0253968253968254*G6_0_3_1 - 0.019047619047619*G6_0_4_0 - 0.0317460317460317*G6_0_4_1 + 0.00634920634920632*G6_0_5_0 - 0.0126984126984128*G6_0_5_1 + 0.0126984126984127*G7_0_0_0 + 0.0126984126984127*G7_0_0_1 - 0.00634920634920634*G7_0_1_0 + 0.019047619047619*G7_0_2_1 + 0.019047619047619*G7_0_3_0 - 0.00634920634920637*G7_0_3_1 - 0.019047619047619*G7_0_4_0 - 0.0317460317460317*G7_0_4_1 - 0.00634920634920635*G7_0_5_0 + 0.00634920634920636*G7_0_5_1 + 0.00634920634920633*G9_0_0_6 + 0.00634920634920633*G9_0_0_7 - 0.0476190476190475*G9_0_0_8 - 0.019047619047619*G9_0_0_9 - 0.019047619047619*G9_0_0_10 + 0.00634920634920632*G9_0_0_11 + 0.0079365079365079*G9_0_1_7 - 0.0380952380952379*G9_0_1_8 - 0.0253968253968254*G9_0_1_9 - 0.0317460317460317*G9_0_1_10 - 0.0126984126984128*G9_0_1_11 - 0.666666666666667*G17_1_0_0 - 0.666666666666665*G17_1_0_1 - 0.666666666666667*G20_1_0_0 - 0.666666666666665*G20_1_0_1 - 0.666666666666667*G21_1_0_0 - 0.666666666666665*G21_1_0_1;
    A[47] = -0.00793650793650794*G6_0_0_0 - 0.00158730158730159*G6_0_0_1 + 0.00793650793650793*G6_0_1_0 + 0.00634920634920634*G6_0_1_1 - 0.00952380952380949*G6_0_2_1 + 0.00634920634920636*G6_0_3_0 + 0.0126984126984127*G6_0_3_1 - 0.00634920634920635*G6_0_4_0 + 0.00634920634920636*G6_0_4_1 + 0.0190476190476191*G6_0_5_1 + 0.00793650793650793*G7_0_0_0 + 0.00793650793650799*G7_0_0_1 - 0.00793650793650793*G7_0_1_0 + 0.00476190476190476*G7_0_2_1 - 0.00634920634920632*G7_0_3_0 - 0.0190476190476189*G7_0_3_1 + 0.00634920634920632*G7_0_4_0 - 0.0126984126984128*G7_0_4_1 + 0.0190476190476191*G7_0_5_1 - 0.00793650793650794*G9_0_0_6 + 0.00793650793650793*G9_0_0_7 + 0.00634920634920636*G9_0_0_9 - 0.00634920634920635*G9_0_0_10 - 0.00158730158730159*G9_0_1_6 + 0.00634920634920634*G9_0_1_7 - 0.00952380952380949*G9_0_1_8 + 0.0126984126984127*G9_0_1_9 + 0.00634920634920636*G9_0_1_10 + 0.0190476190476191*G9_0_1_11;
    A[48] = 0.00357142857142857*G8_0_0_0 + 0.00357142857142859*G8_0_0_1 + 0.00436507936507937*G8_0_1_0 - 0.00357142857142857*G8_0_2_1 - 0.00634920634920633*G8_0_3_0 + 0.00158730158730162*G8_0_3_1 + 0.00634920634920633*G8_0_4_0 - 0.00793650793650794*G8_0_5_0 - 0.00158730158730159*G8_0_5_1 + 0.166666666666667*G18_1_0_0 + 0.166666666666666*G18_1_0_1;
    A[49] = -0.00436507936507936*G8_0_0_0 - 0.00436507936507935*G8_0_0_1 - 0.00357142857142857*G8_0_1_0 - 0.00357142857142857*G8_0_2_1 - 0.00634920634920633*G8_0_3_0 - 0.0063492063492063*G8_0_3_1 + 0.00634920634920633*G8_0_4_0 + 0.0079365079365079*G8_0_4_1 + 0.00793650793650793*G8_0_5_0 + 0.00634920634920634*G8_0_5_1 - 0.166666666666667*G18_1_0_0;
    A[50] = 0.00714285714285713*G8_0_0_0 + 0.00714285714285705*G8_0_0_1 - 0.00714285714285714*G8_0_1_0 + 0.030952380952381*G8_0_2_1 + 0.0476190476190475*G8_0_3_0 + 0.00952380952380927*G8_0_3_1 - 0.0476190476190475*G8_0_4_0 - 0.0380952380952379*G8_0_4_1 - 0.00952380952380949*G8_0_5_1 + 0.5*G18_1_0_1;
    A[51] = 0.00634920634920633*G8_0_0_0 + 0.00634920634920634*G8_0_0_1 - 0.0126984126984127*G8_0_1_0 + 0.019047619047619*G8_0_2_1 + 0.019047619047619*G8_0_3_0 - 0.0126984126984127*G8_0_3_1 - 0.019047619047619*G8_0_4_0 - 0.0253968253968254*G8_0_4_1 + 0.00634920634920636*G8_0_5_0 + 0.0126984126984127*G8_0_5_1 + 0.666666666666667*G18_1_0_0;
    A[52] = 0.0126984126984127*G8_0_0_0 + 0.0126984126984127*G8_0_0_1 - 0.00634920634920634*G8_0_1_0 + 0.019047619047619*G8_0_2_1 + 0.019047619047619*G8_0_3_0 - 0.00634920634920637*G8_0_3_1 - 0.019047619047619*G8_0_4_0 - 0.0317460317460317*G8_0_4_1 - 0.00634920634920635*G8_0_5_0 + 0.00634920634920636*G8_0_5_1 - 0.666666666666667*G18_1_0_0 - 0.666666666666665*G18_1_0_1;
    A[53] = 0.00793650793650793*G8_0_0_0 + 0.00793650793650799*G8_0_0_1 - 0.00793650793650793*G8_0_1_0 + 0.00476190476190476*G8_0_2_1 - 0.00634920634920632*G8_0_3_0 - 0.0190476190476189*G8_0_3_1 + 0.00634920634920632*G8_0_4_0 - 0.0126984126984128*G8_0_4_1 + 0.0190476190476191*G8_0_5_1;
    A[54] = 0.0;
    A[55] = 0.0;
    A[56] = 0.0;
    A[57] = 0.0;
    A[58] = 0.0;
    A[59] = 0.0;
    A[60] = 0.0;
    A[61] = 0.0;
    A[62] = -0.166666666666667*G19_1;
    A[63] = -0.00476190476190477*G6_0_0_0 - 0.0047619047619047*G6_0_0_1 + 0.00634920634920636*G6_0_1_0 + 0.00634920634920635*G6_0_1_1 + 0.00634920634920634*G6_0_2_0 + 0.00634920634920634*G6_0_2_1 + 0.0380952380952381*G6_0_3_0 + 0.0380952380952376*G6_0_3_1 - 0.00634920634920633*G6_0_4_0 - 0.00634920634920657*G6_0_4_1 - 0.0063492063492063*G6_0_5_0 - 0.00634920634920656*G6_0_5_1 - 0.00476190476190477*G7_0_0_0 - 0.0047619047619047*G7_0_0_1 - 0.00793650793650793*G7_0_1_0 - 0.00793650793650795*G7_0_2_1 - 0.019047619047619*G7_0_3_0 - 0.0190476190476189*G7_0_3_1 + 0.019047619047619*G7_0_4_0 + 0.0126984126984126*G7_0_4_1 + 0.0126984126984127*G7_0_5_0 + 0.019047619047619*G7_0_5_1 - 0.00476190476190477*G9_0_0_6 + 0.00634920634920636*G9_0_0_7 + 0.00634920634920634*G9_0_0_8 + 0.0380952380952381*G9_0_0_9 - 0.00634920634920633*G9_0_0_10 - 0.0063492063492063*G9_0_0_11 - 0.0047619047619047*G9_0_1_6 + 0.00634920634920635*G9_0_1_7 + 0.00634920634920634*G9_0_1_8 + 0.0380952380952376*G9_0_1_9 - 0.00634920634920657*G9_0_1_10 - 0.00634920634920656*G9_0_1_11;
    A[64] = -0.00793650793650793*G6_0_0_0 + 0.019047619047619*G6_0_1_0 - 0.0126984126984127*G6_0_2_0 + 0.0634920634920635*G6_0_3_0 + 0.00634920634920633*G6_0_4_0 + 0.0317460317460317*G6_0_5_0 + 0.00634920634920636*G7_0_0_0 + 0.00634920634920635*G7_0_0_1 + 0.019047619047619*G7_0_1_0 - 0.0126984126984127*G7_0_2_1 - 0.0126984126984127*G7_0_3_0 + 0.019047619047619*G7_0_3_1 + 0.0126984126984127*G7_0_4_0 + 0.00634920634920637*G7_0_4_1 - 0.0253968253968254*G7_0_5_0 - 0.0190476190476191*G7_0_5_1 - 0.00793650793650793*G9_0_0_6 + 0.019047619047619*G9_0_0_7 - 0.0126984126984127*G9_0_0_8 + 0.0634920634920635*G9_0_0_9 + 0.00634920634920633*G9_0_0_10 + 0.0317460317460317*G9_0_0_11 + 0.666666666666664*G17_1_0_0 + 0.666666666666664*G20_1_0_0 + 0.666666666666664*G21_1_0_0;
    A[65] = -0.00793650793650795*G6_0_0_1 - 0.0126984126984127*G6_0_1_1 + 0.019047619047619*G6_0_2_1 + 0.0634920634920636*G6_0_3_1 + 0.0317460317460318*G6_0_4_1 + 0.00634920634920642*G6_0_5_1 + 0.00634920634920634*G7_0_0_0 + 0.00634920634920634*G7_0_0_1 - 0.0126984126984127*G7_0_1_0 + 0.019047619047619*G7_0_2_1 + 0.019047619047619*G7_0_3_0 - 0.0126984126984127*G7_0_3_1 - 0.019047619047619*G7_0_4_0 - 0.0253968253968254*G7_0_4_1 + 0.00634920634920636*G7_0_5_0 + 0.0126984126984127*G7_0_5_1 - 0.00793650793650795*G9_0_1_6 - 0.0126984126984127*G9_0_1_7 + 0.019047619047619*G9_0_1_8 + 0.0634920634920636*G9_0_1_9 + 0.0317460317460318*G9_0_1_10 + 0.00634920634920642*G9_0_1_11 + 0.666666666666667*G17_0_0_1 + 0.666666666666667*G20_0_0_1 + 0.666666666666667*G21_0_0_1;
    A[66] = -0.019047619047619*G6_0_0_0 - 0.0190476190476189*G6_0_0_1 - 0.0126984126984127*G6_0_1_0 + 0.019047619047619*G6_0_1_1 + 0.019047619047619*G6_0_2_0 - 0.0126984126984127*G6_0_2_1 + 0.152380952380952*G6_0_3_0 + 0.152380952380951*G6_0_3_1 + 0.0761904761904761*G6_0_4_0 + 0.0507936507936502*G6_0_4_1 + 0.0507936507936507*G6_0_5_0 + 0.0761904761904756*G6_0_5_1 + 0.0380952380952381*G7_0_0_0 + 0.0380952380952376*G7_0_0_1 + 0.0634920634920635*G7_0_1_0 + 0.0634920634920636*G7_0_2_1 + 0.152380952380952*G7_0_3_0 + 0.152380952380951*G7_0_3_1 - 0.152380952380952*G7_0_4_0 - 0.101587301587301*G7_0_4_1 - 0.101587301587302*G7_0_5_0 - 0.152380952380952*G7_0_5_1 - 0.019047619047619*G9_0_0_6 - 0.0126984126984127*G9_0_0_7 + 0.019047619047619*G9_0_0_8 + 0.152380952380952*G9_0_0_9 + 0.0761904761904761*G9_0_0_10 + 0.0507936507936507*G9_0_0_11 - 0.0190476190476189*G9_0_1_6 + 0.019047619047619*G9_0_1_7 - 0.0126984126984127*G9_0_1_8 + 0.152380952380951*G9_0_1_9 + 0.0507936507936502*G9_0_1_10 + 0.0761904761904757*G9_0_1_11 + 1.33333333333333*G17_0_0_0 + 0.666666666666656*G17_0_0_1 + 0.666666666666656*G17_1_0_0 + 1.33333333333332*G17_1_0_1 + 1.33333333333333*G20_0_0_0 + 0.666666666666656*G20_0_0_1 + 0.666666666666656*G20_1_0_0 + 1.33333333333332*G20_1_0_1 + 1.33333333333333*G21_0_0_0 + 0.666666666666656*G21_0_0_1 + 0.666666666666656*G21_1_0_0 + 1.33333333333332*G21_1_0_1;
    A[67] = 0.019047619047619*G6_0_0_0 + 0.0126984126984126*G6_0_0_1 + 0.0126984126984127*G6_0_1_0 + 0.00634920634920637*G6_0_1_1 - 0.019047619047619*G6_0_2_0 - 0.0253968253968254*G6_0_2_1 - 0.152380952380952*G6_0_3_0 - 0.101587301587301*G6_0_3_1 - 0.0761904761904761*G6_0_4_0 - 0.025396825396825*G6_0_4_1 - 0.0507936507936507*G6_0_5_0 - 0.00634920634920633*G7_0_0_0 - 0.00634920634920657*G7_0_0_1 + 0.00634920634920633*G7_0_1_0 + 0.0317460317460318*G7_0_2_1 + 0.0761904761904761*G7_0_3_0 + 0.0507936507936502*G7_0_3_1 - 0.0761904761904761*G7_0_4_0 - 0.025396825396825*G7_0_4_1 - 0.0507936507936508*G7_0_5_1 + 0.019047619047619*G9_0_0_6 + 0.0126984126984127*G9_0_0_7 - 0.019047619047619*G9_0_0_8 - 0.152380952380952*G9_0_0_9 - 0.0761904761904761*G9_0_0_10 - 0.0507936507936507*G9_0_0_11 + 0.0126984126984126*G9_0_1_6 + 0.00634920634920637*G9_0_1_7 - 0.0253968253968254*G9_0_1_8 - 0.101587301587301*G9_0_1_9 - 0.025396825396825*G9_0_1_10 - 1.33333333333333*G17_0_0_0 - 0.666666666666659*G17_0_0_1 - 0.666666666666656*G17_1_0_0 - 1.33333333333333*G20_0_0_0 - 0.666666666666659*G20_0_0_1 - 0.666666666666656*G20_1_0_0 - 1.33333333333333*G21_0_0_0 - 0.666666666666659*G21_0_0_1 - 0.666666666666656*G21_1_0_0;
    A[68] = 0.0126984126984127*G6_0_0_0 + 0.019047619047619*G6_0_0_1 - 0.0253968253968254*G6_0_1_0 - 0.0190476190476191*G6_0_1_1 + 0.00634920634920636*G6_0_2_0 + 0.0126984126984127*G6_0_2_1 - 0.101587301587302*G6_0_3_0 - 0.152380952380952*G6_0_3_1 - 0.0507936507936508*G6_0_4_1 - 0.0253968253968254*G6_0_5_0 - 0.0761904761904763*G6_0_5_1 - 0.0063492063492063*G7_0_0_0 - 0.00634920634920656*G7_0_0_1 + 0.0317460317460317*G7_0_1_0 + 0.00634920634920642*G7_0_2_1 + 0.0507936507936507*G7_0_3_0 + 0.0761904761904756*G7_0_3_1 - 0.0507936507936507*G7_0_4_0 - 0.0253968253968254*G7_0_5_0 - 0.0761904761904763*G7_0_5_1 + 0.0126984126984127*G9_0_0_6 - 0.0253968253968254*G9_0_0_7 + 0.00634920634920636*G9_0_0_8 - 0.101587301587302*G9_0_0_9 - 0.0253968253968254*G9_0_0_11 + 0.019047619047619*G9_0_1_6 - 0.0190476190476191*G9_0_1_7 + 0.0126984126984127*G9_0_1_8 - 0.152380952380952*G9_0_1_9 - 0.0507936507936508*G9_0_1_10 - 0.0761904761904763*G9_0_1_11 - 0.666666666666665*G17_0_0_1 - 0.666666666666666*G17_1_0_0 - 1.33333333333333*G17_1_0_1 - 0.666666666666665*G20_0_0_1 - 0.666666666666666*G20_1_0_0 - 1.33333333333333*G20_1_0_1 - 0.666666666666665*G21_0_0_1 - 0.666666666666666*G21_1_0_0 - 1.33333333333333*G21_1_0_1;
    A[69] = -0.00476190476190477*G8_0_0_0 - 0.0047619047619047*G8_0_0_1 - 0.00793650793650793*G8_0_1_0 - 0.00793650793650795*G8_0_2_1 - 0.019047619047619*G8_0_3_0 - 0.0190476190476189*G8_0_3_1 + 0.019047619047619*G8_0_4_0 + 0.0126984126984126*G8_0_4_1 + 0.0126984126984127*G8_0_5_0 + 0.019047619047619*G8_0_5_1;
    A[70] = 0.00634920634920636*G8_0_0_0 + 0.00634920634920635*G8_0_0_1 + 0.019047619047619*G8_0_1_0 - 0.0126984126984127*G8_0_2_1 - 0.0126984126984127*G8_0_3_0 + 0.019047619047619*G8_0_3_1 + 0.0126984126984127*G8_0_4_0 + 0.00634920634920637*G8_0_4_1 - 0.0253968253968254*G8_0_5_0 - 0.0190476190476191*G8_0_5_1 + 0.666666666666664*G18_1_0_0;
    A[71] = 0.00634920634920634*G8_0_0_0 + 0.00634920634920634*G8_0_0_1 - 0.0126984126984127*G8_0_1_0 + 0.019047619047619*G8_0_2_1 + 0.019047619047619*G8_0_3_0 - 0.0126984126984127*G8_0_3_1 - 0.019047619047619*G8_0_4_0 - 0.0253968253968254*G8_0_4_1 + 0.00634920634920636*G8_0_5_0 + 0.0126984126984127*G8_0_5_1 + 0.666666666666667*G18_0_0_1;
    A[72] = 0.0380952380952381*G8_0_0_0 + 0.0380952380952376*G8_0_0_1 + 0.0634920634920635*G8_0_1_0 + 0.0634920634920636*G8_0_2_1 + 0.152380952380952*G8_0_3_0 + 0.152380952380951*G8_0_3_1 - 0.152380952380952*G8_0_4_0 - 0.101587301587301*G8_0_4_1 - 0.101587301587302*G8_0_5_0 - 0.152380952380952*G8_0_5_1 + 1.33333333333333*G18_0_0_0 + 0.666666666666656*G18_0_0_1 + 0.666666666666656*G18_1_0_0 + 1.33333333333332*G18_1_0_1;
    A[73] = -0.00634920634920633*G8_0_0_0 - 0.00634920634920657*G8_0_0_1 + 0.00634920634920633*G8_0_1_0 + 0.0317460317460318*G8_0_2_1 + 0.0761904761904761*G8_0_3_0 + 0.0507936507936502*G8_0_3_1 - 0.0761904761904761*G8_0_4_0 - 0.025396825396825*G8_0_4_1 - 0.0507936507936508*G8_0_5_1 - 1.33333333333333*G18_0_0_0 - 0.666666666666659*G18_0_0_1 - 0.666666666666656*G18_1_0_0;
    A[74] = -0.0063492063492063*G8_0_0_0 - 0.00634920634920656*G8_0_0_1 + 0.0317460317460317*G8_0_1_0 + 0.00634920634920642*G8_0_2_1 + 0.0507936507936507*G8_0_3_0 + 0.0761904761904757*G8_0_3_1 - 0.0507936507936507*G8_0_4_0 - 0.0253968253968254*G8_0_5_0 - 0.0761904761904763*G8_0_5_1 - 0.666666666666665*G18_0_0_1 - 0.666666666666666*G18_1_0_0 - 1.33333333333333*G18_1_0_1;
    A[75] = 0.0;
    A[76] = 0.0;
    A[77] = 0.0;
    A[78] = 0.0;
    A[79] = 0.0;
    A[80] = 0.0;
    A[81] = -0.166666666666666*G19_0 - 0.166666666666665*G19_1;
    A[82] = -0.166666666666666*G19_0 - 0.333333333333331*G19_1;
    A[83] = -0.333333333333333*G19_0 - 0.166666666666664*G19_1;
    A[84] = -0.0190476190476191*G6_0_0_0 - 0.0190476190476191*G6_0_0_1 + 0.00793650793650794*G6_0_1_0 + 0.00793650793650799*G6_0_1_1 + 0.0126984126984127*G6_0_2_0 + 0.0126984126984127*G6_0_2_1 - 0.00634920634920633*G6_0_3_0 - 0.00634920634920657*G6_0_3_1 - 0.0634920634920635*G6_0_4_0 - 0.0634920634920639*G6_0_4_1 - 0.0317460317460317*G6_0_5_0 - 0.031746031746032*G6_0_5_1 - 0.0190476190476191*G7_0_0_0 - 0.0190476190476191*G7_0_0_1 - 0.00634920634920637*G7_0_1_0 - 0.0126984126984127*G7_0_2_1 - 0.0126984126984127*G7_0_3_0 - 0.00634920634920631*G7_0_3_1 + 0.0126984126984127*G7_0_4_0 + 0.0317460317460317*G7_0_4_1 + 0.0253968253968254*G7_0_5_0 + 0.00634920634920635*G7_0_5_1 - 0.0190476190476191*G9_0_0_6 + 0.00793650793650794*G9_0_0_7 + 0.0126984126984127*G9_0_0_8 - 0.00634920634920633*G9_0_0_9 - 0.0634920634920635*G9_0_0_10 - 0.0317460317460317*G9_0_0_11 - 0.0190476190476191*G9_0_1_6 + 0.00793650793650799*G9_0_1_7 + 0.0126984126984127*G9_0_1_8 - 0.00634920634920657*G9_0_1_9 - 0.0634920634920639*G9_0_1_10 - 0.031746031746032*G9_0_1_11 - 0.666666666666668*G17_1_0_0 - 0.666666666666668*G17_1_0_1 - 0.666666666666668*G20_1_0_0 - 0.666666666666668*G20_1_0_1 - 0.666666666666668*G21_1_0_0 - 0.666666666666668*G21_1_0_1;
    A[85] = -0.00634920634920637*G6_0_0_0 + 0.00476190476190477*G6_0_1_0 - 0.00634920634920634*G6_0_2_0 + 0.00634920634920633*G6_0_3_0 - 0.0380952380952382*G6_0_4_0 + 0.0063492063492063*G6_0_5_0 + 0.00793650793650794*G7_0_0_0 + 0.00793650793650799*G7_0_0_1 + 0.00476190476190477*G7_0_1_0 - 0.00793650793650796*G7_0_2_1 - 0.019047619047619*G7_0_3_0 - 0.00634920634920622*G7_0_3_1 + 0.019047619047619*G7_0_4_0 - 0.0126984126984127*G7_0_5_0 + 0.00634920634920636*G7_0_5_1 - 0.00634920634920637*G9_0_0_6 + 0.00476190476190477*G9_0_0_7 - 0.00634920634920634*G9_0_0_8 + 0.00634920634920633*G9_0_0_9 - 0.0380952380952382*G9_0_0_10 + 0.0063492063492063*G9_0_0_11;
    A[86] = -0.0126984126984127*G6_0_0_1 - 0.00793650793650796*G6_0_1_1 + 0.019047619047619*G6_0_2_1 + 0.0317460317460318*G6_0_3_1 + 0.0634920634920636*G6_0_4_1 + 0.00634920634920642*G6_0_5_1 + 0.0126984126984127*G7_0_0_0 + 0.0126984126984127*G7_0_0_1 - 0.00634920634920634*G7_0_1_0 + 0.019047619047619*G7_0_2_1 + 0.019047619047619*G7_0_3_0 - 0.00634920634920637*G7_0_3_1 - 0.019047619047619*G7_0_4_0 - 0.0317460317460317*G7_0_4_1 - 0.00634920634920635*G7_0_5_0 + 0.00634920634920636*G7_0_5_1 - 0.0126984126984127*G9_0_1_6 - 0.00793650793650796*G9_0_1_7 + 0.019047619047619*G9_0_1_8 + 0.0317460317460318*G9_0_1_9 + 0.0634920634920636*G9_0_1_10 + 0.00634920634920642*G9_0_1_11 - 0.666666666666667*G17_0_0_1 - 0.666666666666665*G17_1_0_1 - 0.666666666666667*G20_0_0_1 - 0.666666666666665*G20_1_0_1 - 0.666666666666667*G21_0_0_1 - 0.666666666666665*G21_1_0_1;
    A[87] = -0.0126984126984127*G6_0_0_0 - 0.00634920634920631*G6_0_0_1 - 0.019047619047619*G6_0_1_0 - 0.00634920634920622*G6_0_1_1 + 0.019047619047619*G6_0_2_0 - 0.00634920634920637*G6_0_2_1 + 0.0761904761904761*G6_0_3_0 + 0.0507936507936502*G6_0_3_1 + 0.152380952380952*G6_0_4_0 + 0.0507936507936497*G6_0_4_1 + 0.0507936507936507*G6_0_5_0 + 0.0507936507936502*G6_0_5_1 - 0.00634920634920633*G7_0_0_0 - 0.00634920634920657*G7_0_0_1 + 0.00634920634920633*G7_0_1_0 + 0.0317460317460318*G7_0_2_1 + 0.0761904761904761*G7_0_3_0 + 0.0507936507936502*G7_0_3_1 - 0.0761904761904761*G7_0_4_0 - 0.025396825396825*G7_0_4_1 - 0.0507936507936508*G7_0_5_1 - 0.0126984126984127*G9_0_0_6 - 0.019047619047619*G9_0_0_7 + 0.019047619047619*G9_0_0_8 + 0.0761904761904761*G9_0_0_9 + 0.152380952380952*G9_0_0_10 + 0.0507936507936507*G9_0_0_11 - 0.00634920634920631*G9_0_1_6 - 0.00634920634920622*G9_0_1_7 - 0.00634920634920637*G9_0_1_8 + 0.0507936507936502*G9_0_1_9 + 0.0507936507936497*G9_0_1_10 + 0.0507936507936502*G9_0_1_11 - 1.33333333333333*G17_0_0_0 - 0.666666666666656*G17_0_0_1 - 0.666666666666659*G17_1_0_0 - 1.33333333333333*G20_0_0_0 - 0.666666666666656*G20_0_0_1 - 0.666666666666659*G20_1_0_0 - 1.33333333333333*G21_0_0_0 - 0.666666666666656*G21_0_0_1 - 0.666666666666659*G21_1_0_0;
    A[88] = 0.0126984126984127*G6_0_0_0 + 0.0317460317460317*G6_0_0_1 + 0.019047619047619*G6_0_1_0 - 0.019047619047619*G6_0_2_0 - 0.0317460317460317*G6_0_2_1 - 0.0761904761904761*G6_0_3_0 - 0.025396825396825*G6_0_3_1 - 0.152380952380952*G6_0_4_0 - 0.0507936507936507*G6_0_5_0 + 0.0253968253968258*G6_0_5_1 - 0.0634920634920635*G7_0_0_0 - 0.0634920634920639*G7_0_0_1 - 0.0380952380952382*G7_0_1_0 + 0.0634920634920636*G7_0_2_1 + 0.152380952380952*G7_0_3_0 + 0.0507936507936497*G7_0_3_1 - 0.152380952380952*G7_0_4_0 + 0.101587301587302*G7_0_5_0 - 0.0507936507936507*G7_0_5_1 + 0.0126984126984127*G9_0_0_6 + 0.019047619047619*G9_0_0_7 - 0.019047619047619*G9_0_0_8 - 0.0761904761904761*G9_0_0_9 - 0.152380952380952*G9_0_0_10 - 0.0507936507936507*G9_0_0_11 + 0.0317460317460317*G9_0_1_6 - 0.0317460317460317*G9_0_1_8 - 0.025396825396825*G9_0_1_9 + 0.0253968253968258*G9_0_1_11 + 1.33333333333333*G17_0_0_0 + 0.666666666666659*G17_0_0_1 + 0.666666666666659*G17_1_0_0 + 1.33333333333333*G17_1_0_1 + 1.33333333333333*G20_0_0_0 + 0.666666666666659*G20_0_0_1 + 0.666666666666659*G20_1_0_0 + 1.33333333333333*G20_1_0_1 + 1.33333333333333*G21_0_0_0 + 0.666666666666659*G21_0_0_1 + 0.666666666666659*G21_1_0_0 + 1.33333333333333*G21_1_0_1;
    A[89] = 0.0253968253968254*G6_0_0_0 + 0.00634920634920635*G6_0_0_1 - 0.0126984126984127*G6_0_1_0 + 0.00634920634920636*G6_0_1_1 - 0.00634920634920635*G6_0_2_0 + 0.00634920634920636*G6_0_2_1 - 0.0507936507936508*G6_0_3_1 + 0.101587301587302*G6_0_4_0 - 0.0507936507936507*G6_0_4_1 + 0.0253968253968254*G6_0_5_0 - 0.0507936507936508*G6_0_5_1 - 0.0317460317460317*G7_0_0_0 - 0.031746031746032*G7_0_0_1 + 0.0063492063492063*G7_0_1_0 + 0.00634920634920642*G7_0_2_1 + 0.0507936507936507*G7_0_3_0 + 0.0507936507936502*G7_0_3_1 - 0.0507936507936507*G7_0_4_0 + 0.0253968253968258*G7_0_4_1 + 0.0253968253968254*G7_0_5_0 - 0.0507936507936508*G7_0_5_1 + 0.0253968253968254*G9_0_0_6 - 0.0126984126984127*G9_0_0_7 - 0.00634920634920635*G9_0_0_8 + 0.101587301587302*G9_0_0_10 + 0.0253968253968254*G9_0_0_11 + 0.00634920634920635*G9_0_1_6 + 0.00634920634920636*G9_0_1_7 + 0.00634920634920636*G9_0_1_8 - 0.0507936507936508*G9_0_1_9 - 0.0507936507936508*G9_0_1_10 - 0.0507936507936508*G9_0_1_11 + 0.666666666666665*G17_0_0_1 + 0.666666666666666*G17_1_0_0 + 0.666666666666665*G20_0_0_1 + 0.666666666666666*G20_1_0_0 + 0.666666666666665*G21_0_0_1 + 0.666666666666666*G21_1_0_0;
    A[90] = -0.0190476190476191*G8_0_0_0 - 0.0190476190476191*G8_0_0_1 - 0.00634920634920637*G8_0_1_0 - 0.0126984126984127*G8_0_2_1 - 0.0126984126984127*G8_0_3_0 - 0.00634920634920631*G8_0_3_1 + 0.0126984126984127*G8_0_4_0 + 0.0317460317460317*G8_0_4_1 + 0.0253968253968254*G8_0_5_0 + 0.00634920634920635*G8_0_5_1 - 0.666666666666668*G18_1_0_0 - 0.666666666666668*G18_1_0_1;
    A[91] = 0.00793650793650794*G8_0_0_0 + 0.00793650793650799*G8_0_0_1 + 0.00476190476190477*G8_0_1_0 - 0.00793650793650796*G8_0_2_1 - 0.019047619047619*G8_0_3_0 - 0.00634920634920622*G8_0_3_1 + 0.019047619047619*G8_0_4_0 - 0.0126984126984127*G8_0_5_0 + 0.00634920634920636*G8_0_5_1;
    A[92] = 0.0126984126984127*G8_0_0_0 + 0.0126984126984127*G8_0_0_1 - 0.00634920634920634*G8_0_1_0 + 0.019047619047619*G8_0_2_1 + 0.019047619047619*G8_0_3_0 - 0.00634920634920637*G8_0_3_1 - 0.019047619047619*G8_0_4_0 - 0.0317460317460317*G8_0_4_1 - 0.00634920634920635*G8_0_5_0 + 0.00634920634920636*G8_0_5_1 - 0.666666666666667*G18_0_0_1 - 0.666666666666665*G18_1_0_1;
    A[93] = -0.00634920634920633*G8_0_0_0 - 0.00634920634920657*G8_0_0_1 + 0.00634920634920633*G8_0_1_0 + 0.0317460317460318*G8_0_2_1 + 0.0761904761904761*G8_0_3_0 + 0.0507936507936502*G8_0_3_1 - 0.0761904761904761*G8_0_4_0 - 0.025396825396825*G8_0_4_1 - 0.0507936507936508*G8_0_5_1 - 1.33333333333333*G18_0_0_0 - 0.666666666666656*G18_0_0_1 - 0.666666666666659*G18_1_0_0;
    A[94] = -0.0634920634920635*G8_0_0_0 - 0.0634920634920639*G8_0_0_1 - 0.0380952380952382*G8_0_1_0 + 0.0634920634920636*G8_0_2_1 + 0.152380952380952*G8_0_3_0 + 0.0507936507936497*G8_0_3_1 - 0.152380952380952*G8_0_4_0 + 0.101587301587302*G8_0_5_0 - 0.0507936507936508*G8_0_5_1 + 1.33333333333333*G18_0_0_0 + 0.666666666666659*G18_0_0_1 + 0.666666666666659*G18_1_0_0 + 1.33333333333333*G18_1_0_1;
    A[95] = -0.0317460317460317*G8_0_0_0 - 0.031746031746032*G8_0_0_1 + 0.0063492063492063*G8_0_1_0 + 0.00634920634920642*G8_0_2_1 + 0.0507936507936507*G8_0_3_0 + 0.0507936507936502*G8_0_3_1 - 0.0507936507936507*G8_0_4_0 + 0.0253968253968258*G8_0_4_1 + 0.0253968253968254*G8_0_5_0 - 0.0507936507936508*G8_0_5_1 + 0.666666666666665*G18_0_0_1 + 0.666666666666666*G18_1_0_0;
    A[96] = 0.0;
    A[97] = 0.0;
    A[98] = 0.0;
    A[99] = 0.0;
    A[100] = 0.0;
    A[101] = 0.0;
    A[102] = 0.166666666666666*G19_0 - 0.166666666666668*G19_1;
    A[103] = 0.166666666666666*G19_0;
    A[104] = 0.333333333333333*G19_0 + 0.166666666666665*G19_1;
    A[105] = -0.0190476190476191*G6_0_0_0 - 0.019047619047619*G6_0_0_1 + 0.0126984126984127*G6_0_1_0 + 0.0126984126984127*G6_0_1_1 + 0.00793650793650793*G6_0_2_0 + 0.00793650793650799*G6_0_2_1 - 0.0063492063492063*G6_0_3_0 - 0.00634920634920656*G6_0_3_1 - 0.0317460317460317*G6_0_4_0 - 0.031746031746032*G6_0_4_1 - 0.0634920634920634*G6_0_5_0 - 0.0634920634920639*G6_0_5_1 - 0.0190476190476191*G7_0_0_0 - 0.019047619047619*G7_0_0_1 - 0.0126984126984127*G7_0_1_0 - 0.00634920634920636*G7_0_2_1 - 0.00634920634920634*G7_0_3_0 - 0.0126984126984127*G7_0_3_1 + 0.00634920634920634*G7_0_4_0 + 0.0253968253968254*G7_0_4_1 + 0.0317460317460318*G7_0_5_0 + 0.0126984126984127*G7_0_5_1 - 0.0190476190476191*G9_0_0_6 + 0.0126984126984127*G9_0_0_7 + 0.00793650793650793*G9_0_0_8 - 0.0063492063492063*G9_0_0_9 - 0.0317460317460317*G9_0_0_10 - 0.0634920634920634*G9_0_0_11 - 0.019047619047619*G9_0_1_6 + 0.0126984126984127*G9_0_1_7 + 0.00793650793650799*G9_0_1_8 - 0.00634920634920656*G9_0_1_9 - 0.031746031746032*G9_0_1_10 - 0.0634920634920639*G9_0_1_11 - 0.666666666666668*G17_0_0_0 - 0.666666666666667*G17_0_0_1 - 0.666666666666668*G20_0_0_0 - 0.666666666666667*G20_0_0_1 - 0.666666666666668*G21_0_0_0 - 0.666666666666667*G21_0_0_1;
    A[106] = -0.0126984126984127*G6_0_0_0 + 0.0190476190476191*G6_0_1_0 - 0.00793650793650793*G6_0_2_0 + 0.0317460317460317*G6_0_3_0 + 0.0063492063492063*G6_0_4_0 + 0.0634920634920634*G6_0_5_0 + 0.0126984126984127*G7_0_0_0 + 0.0126984126984127*G7_0_0_1 + 0.0190476190476191*G7_0_1_0 - 0.00634920634920637*G7_0_2_1 - 0.00634920634920635*G7_0_3_0 + 0.019047619047619*G7_0_3_1 + 0.00634920634920635*G7_0_4_0 - 0.00634920634920631*G7_0_4_1 - 0.0317460317460318*G7_0_5_0 - 0.0190476190476191*G7_0_5_1 - 0.0126984126984127*G9_0_0_6 + 0.0190476190476191*G9_0_0_7 - 0.00793650793650793*G9_0_0_8 + 0.0317460317460317*G9_0_0_9 + 0.0063492063492063*G9_0_0_10 + 0.0634920634920634*G9_0_0_11 - 0.666666666666668*G17_0_0_0 - 0.666666666666667*G17_1_0_0 - 0.666666666666668*G20_0_0_0 - 0.666666666666667*G20_1_0_0 - 0.666666666666668*G21_0_0_0 - 0.666666666666667*G21_1_0_0;
    A[107] = -0.00634920634920636*G6_0_0_1 - 0.00634920634920637*G6_0_1_1 + 0.00476190476190476*G6_0_2_1 + 0.00634920634920642*G6_0_3_1 + 0.00634920634920642*G6_0_4_1 - 0.0380952380952381*G6_0_5_1 + 0.00793650793650793*G7_0_0_0 + 0.00793650793650799*G7_0_0_1 - 0.00793650793650793*G7_0_1_0 + 0.00476190476190476*G7_0_2_1 - 0.00634920634920632*G7_0_3_0 - 0.0190476190476189*G7_0_3_1 + 0.00634920634920632*G7_0_4_0 - 0.0126984126984128*G7_0_4_1 + 0.0190476190476191*G7_0_5_1 - 0.00634920634920636*G9_0_1_6 - 0.00634920634920637*G9_0_1_7 + 0.00476190476190476*G9_0_1_8 + 0.00634920634920642*G9_0_1_9 + 0.00634920634920642*G9_0_1_10 - 0.0380952380952381*G9_0_1_11;
    A[108] = -0.00634920634920634*G6_0_0_0 - 0.0126984126984127*G6_0_0_1 - 0.00634920634920635*G6_0_1_0 + 0.019047619047619*G6_0_1_1 - 0.00634920634920632*G6_0_2_0 - 0.0190476190476189*G6_0_2_1 + 0.0507936507936507*G6_0_3_0 + 0.0761904761904757*G6_0_3_1 + 0.0507936507936507*G6_0_4_0 + 0.0507936507936502*G6_0_4_1 + 0.0507936507936507*G6_0_5_0 + 0.152380952380951*G6_0_5_1 - 0.0063492063492063*G7_0_0_0 - 0.00634920634920656*G7_0_0_1 + 0.0317460317460317*G7_0_1_0 + 0.00634920634920642*G7_0_2_1 + 0.0507936507936507*G7_0_3_0 + 0.0761904761904757*G7_0_3_1 - 0.0507936507936507*G7_0_4_0 - 0.0253968253968254*G7_0_5_0 - 0.0761904761904763*G7_0_5_1 - 0.00634920634920634*G9_0_0_6 - 0.00634920634920635*G9_0_0_7 - 0.00634920634920632*G9_0_0_8 + 0.0507936507936507*G9_0_0_9 + 0.0507936507936507*G9_0_0_10 + 0.0507936507936507*G9_0_0_11 - 0.0126984126984127*G9_0_1_6 + 0.0190476190476191*G9_0_1_7 - 0.0190476190476189*G9_0_1_8 + 0.0761904761904756*G9_0_1_9 + 0.0507936507936502*G9_0_1_10 + 0.152380952380951*G9_0_1_11 - 0.666666666666666*G17_0_0_1 - 0.666666666666665*G17_1_0_0 - 1.33333333333333*G17_1_0_1 - 0.666666666666666*G20_0_0_1 - 0.666666666666665*G20_1_0_0 - 1.33333333333333*G20_1_0_1 - 0.666666666666666*G21_0_0_1 - 0.666666666666665*G21_1_0_0 - 1.33333333333333*G21_1_0_1;
    A[109] = 0.00634920634920634*G6_0_0_0 + 0.0253968253968254*G6_0_0_1 + 0.00634920634920635*G6_0_1_0 - 0.00634920634920631*G6_0_1_1 + 0.00634920634920632*G6_0_2_0 - 0.0126984126984128*G6_0_2_1 - 0.0507936507936507*G6_0_3_0 - 0.0507936507936507*G6_0_4_0 + 0.0253968253968258*G6_0_4_1 - 0.0507936507936507*G6_0_5_0 + 0.101587301587302*G6_0_5_1 - 0.0317460317460317*G7_0_0_0 - 0.031746031746032*G7_0_0_1 + 0.0063492063492063*G7_0_1_0 + 0.00634920634920642*G7_0_2_1 + 0.0507936507936507*G7_0_3_0 + 0.0507936507936502*G7_0_3_1 - 0.0507936507936507*G7_0_4_0 + 0.0253968253968258*G7_0_4_1 + 0.0253968253968254*G7_0_5_0 - 0.0507936507936508*G7_0_5_1 + 0.00634920634920634*G9_0_0_6 + 0.00634920634920635*G9_0_0_7 + 0.00634920634920632*G9_0_0_8 - 0.0507936507936507*G9_0_0_9 - 0.0507936507936507*G9_0_0_10 - 0.0507936507936507*G9_0_0_11 + 0.0253968253968254*G9_0_1_6 - 0.00634920634920631*G9_0_1_7 - 0.0126984126984128*G9_0_1_8 + 0.0253968253968258*G9_0_1_10 + 0.101587301587302*G9_0_1_11 + 0.666666666666666*G17_0_0_1 + 0.666666666666665*G17_1_0_0 + 0.666666666666666*G20_0_0_1 + 0.666666666666665*G20_1_0_0 + 0.666666666666666*G21_0_0_1 + 0.666666666666665*G21_1_0_0;
    A[110] = 0.0317460317460318*G6_0_0_0 + 0.0126984126984127*G6_0_0_1 - 0.0317460317460318*G6_0_1_0 - 0.0190476190476191*G6_0_1_1 + 0.0190476190476191*G6_0_2_1 - 0.0253968253968254*G6_0_3_0 - 0.0761904761904763*G6_0_3_1 + 0.0253968253968254*G6_0_4_0 - 0.0507936507936508*G6_0_4_1 - 0.152380952380952*G6_0_5_1 - 0.0634920634920634*G7_0_0_0 - 0.0634920634920639*G7_0_0_1 + 0.0634920634920634*G7_0_1_0 - 0.0380952380952381*G7_0_2_1 + 0.0507936507936507*G7_0_3_0 + 0.152380952380951*G7_0_3_1 - 0.0507936507936507*G7_0_4_0 + 0.101587301587302*G7_0_4_1 - 0.152380952380952*G7_0_5_1 + 0.0317460317460318*G9_0_0_6 - 0.0317460317460318*G9_0_0_7 - 0.0253968253968254*G9_0_0_9 + 0.0253968253968254*G9_0_0_10 + 0.0126984126984127*G9_0_1_6 - 0.0190476190476191*G9_0_1_7 + 0.0190476190476191*G9_0_1_8 - 0.0761904761904763*G9_0_1_9 - 0.0507936507936508*G9_0_1_10 - 0.152380952380952*G9_0_1_11 + 1.33333333333334*G17_0_0_0 + 0.666666666666667*G17_0_0_1 + 0.666666666666667*G17_1_0_0 + 1.33333333333333*G17_1_0_1 + 1.33333333333334*G20_0_0_0 + 0.666666666666667*G20_0_0_1 + 0.666666666666667*G20_1_0_0 + 1.33333333333333*G20_1_0_1 + 1.33333333333334*G21_0_0_0 + 0.666666666666667*G21_0_0_1 + 0.666666666666667*G21_1_0_0 + 1.33333333333333*G21_1_0_1;
    A[111] = -0.0190476190476191*G8_0_0_0 - 0.019047619047619*G8_0_0_1 - 0.0126984126984127*G8_0_1_0 - 0.00634920634920636*G8_0_2_1 - 0.00634920634920634*G8_0_3_0 - 0.0126984126984127*G8_0_3_1 + 0.00634920634920634*G8_0_4_0 + 0.0253968253968254*G8_0_4_1 + 0.0317460317460318*G8_0_5_0 + 0.0126984126984127*G8_0_5_1 - 0.666666666666668*G18_0_0_0 - 0.666666666666667*G18_0_0_1;
    A[112] = 0.0126984126984127*G8_0_0_0 + 0.0126984126984127*G8_0_0_1 + 0.0190476190476191*G8_0_1_0 - 0.00634920634920637*G8_0_2_1 - 0.00634920634920635*G8_0_3_0 + 0.0190476190476191*G8_0_3_1 + 0.00634920634920635*G8_0_4_0 - 0.00634920634920631*G8_0_4_1 - 0.0317460317460318*G8_0_5_0 - 0.0190476190476191*G8_0_5_1 - 0.666666666666668*G18_0_0_0 - 0.666666666666667*G18_1_0_0;
    A[113] = 0.00793650793650793*G8_0_0_0 + 0.00793650793650799*G8_0_0_1 - 0.00793650793650793*G8_0_1_0 + 0.00476190476190476*G8_0_2_1 - 0.00634920634920632*G8_0_3_0 - 0.0190476190476189*G8_0_3_1 + 0.00634920634920632*G8_0_4_0 - 0.0126984126984128*G8_0_4_1 + 0.0190476190476191*G8_0_5_1;
    A[114] = -0.0063492063492063*G8_0_0_0 - 0.00634920634920656*G8_0_0_1 + 0.0317460317460317*G8_0_1_0 + 0.00634920634920642*G8_0_2_1 + 0.0507936507936507*G8_0_3_0 + 0.0761904761904756*G8_0_3_1 - 0.0507936507936507*G8_0_4_0 - 0.0253968253968254*G8_0_5_0 - 0.0761904761904763*G8_0_5_1 - 0.666666666666666*G18_0_0_1 - 0.666666666666665*G18_1_0_0 - 1.33333333333333*G18_1_0_1;
    A[115] = -0.0317460317460317*G8_0_0_0 - 0.031746031746032*G8_0_0_1 + 0.0063492063492063*G8_0_1_0 + 0.00634920634920642*G8_0_2_1 + 0.0507936507936507*G8_0_3_0 + 0.0507936507936502*G8_0_3_1 - 0.0507936507936507*G8_0_4_0 + 0.0253968253968258*G8_0_4_1 + 0.0253968253968254*G8_0_5_0 - 0.0507936507936508*G8_0_5_1 + 0.666666666666666*G18_0_0_1 + 0.666666666666665*G18_1_0_0;
    A[116] = -0.0634920634920634*G8_0_0_0 - 0.0634920634920639*G8_0_0_1 + 0.0634920634920634*G8_0_1_0 - 0.0380952380952381*G8_0_2_1 + 0.0507936507936507*G8_0_3_0 + 0.152380952380951*G8_0_3_1 - 0.0507936507936507*G8_0_4_0 + 0.101587301587302*G8_0_4_1 - 0.152380952380952*G8_0_5_1 + 1.33333333333334*G18_0_0_0 + 0.666666666666667*G18_0_0_1 + 0.666666666666667*G18_1_0_0 + 1.33333333333333*G18_1_0_1;
    A[117] = 0.0;
    A[118] = 0.0;
    A[119] = 0.0;
    A[120] = 0.0;
    A[121] = 0.0;
    A[122] = 0.0;
    A[123] = -0.166666666666667*G19_0 + 0.166666666666667*G19_1;
    A[124] = 0.166666666666667*G19_0 + 0.333333333333333*G19_1;
    A[125] = 0.166666666666667*G19_1;
    A[126] = -0.030952380952381*G11_0_6_0 - 0.030952380952381*G11_0_6_1 - 0.00714285714285719*G11_0_7_0 - 0.00714285714285714*G11_0_8_1 + 0.0095238095238095*G11_0_9_0 + 0.00952380952380934*G11_0_9_1 - 0.0095238095238095*G11_0_10_0 + 0.0380952380952382*G11_0_10_1 + 0.0380952380952381*G11_0_11_0 - 0.00952380952380951*G11_0_11_1 + 0.5*G22_0_0_0 + 0.5*G22_0_0_1 + 0.5*G22_1_0_0 + 0.500000000000002*G22_1_0_1;
    A[127] = 0.00357142857142857*G11_0_6_0 + 0.00357142857142858*G11_0_6_1 - 0.00357142857142856*G11_0_7_0 + 0.00436507936507937*G11_0_8_1 + 0.00158730158730159*G11_0_9_0 - 0.00634920634920631*G11_0_9_1 - 0.00158730158730159*G11_0_10_0 - 0.00793650793650796*G11_0_10_1 + 0.00634920634920634*G11_0_11_1 + 0.166666666666668*G22_0_0_0 + 0.166666666666666*G22_1_0_0;
    A[128] = 0.00357142857142857*G11_0_6_0 + 0.00357142857142858*G11_0_6_1 + 0.00436507936507937*G11_0_7_0 - 0.00357142857142857*G11_0_8_1 - 0.00634920634920634*G11_0_9_0 + 0.00158730158730162*G11_0_9_1 + 0.00634920634920634*G11_0_10_0 - 0.00793650793650794*G11_0_11_0 - 0.00158730158730159*G11_0_11_1 + 0.166666666666667*G22_0_0_1 + 0.166666666666666*G22_1_0_1;
    A[129] = -0.00476190476190477*G11_0_6_0 - 0.0047619047619047*G11_0_6_1 - 0.00793650793650793*G11_0_7_0 - 0.00793650793650795*G11_0_8_1 - 0.019047619047619*G11_0_9_0 - 0.0190476190476189*G11_0_9_1 + 0.019047619047619*G11_0_10_0 + 0.0126984126984126*G11_0_10_1 + 0.0126984126984127*G11_0_11_0 + 0.019047619047619*G11_0_11_1;
    A[130] = -0.0190476190476191*G11_0_6_0 - 0.0190476190476191*G11_0_6_1 - 0.00634920634920637*G11_0_7_0 - 0.0126984126984127*G11_0_8_1 - 0.0126984126984127*G11_0_9_0 - 0.00634920634920631*G11_0_9_1 + 0.0126984126984127*G11_0_10_0 + 0.0317460317460317*G11_0_10_1 + 0.0253968253968254*G11_0_11_0 + 0.00634920634920635*G11_0_11_1 - 0.666666666666668*G22_0_0_1 - 0.666666666666668*G22_1_0_1;
    A[131] = -0.0190476190476191*G11_0_6_0 - 0.019047619047619*G11_0_6_1 - 0.0126984126984127*G11_0_7_0 - 0.00634920634920636*G11_0_8_1 - 0.00634920634920635*G11_0_9_0 - 0.0126984126984127*G11_0_9_1 + 0.00634920634920635*G11_0_10_0 + 0.0253968253968254*G11_0_10_1 + 0.0317460317460318*G11_0_11_0 + 0.0126984126984127*G11_0_11_1 - 0.666666666666668*G22_0_0_0 - 0.666666666666667*G22_1_0_0;
    A[132] = -0.030952380952381*G10_0_0_0 - 0.030952380952381*G10_0_0_1 + 0.00357142857142857*G10_0_1_0 + 0.00357142857142858*G10_0_1_1 + 0.00357142857142857*G10_0_2_0 + 0.00357142857142858*G10_0_2_1 - 0.00476190476190477*G10_0_3_0 - 0.0047619047619047*G10_0_3_1 - 0.0190476190476191*G10_0_4_0 - 0.0190476190476191*G10_0_4_1 - 0.0190476190476191*G10_0_5_0 - 0.019047619047619*G10_0_5_1 - 0.030952380952381*G12_0_6_0 - 0.030952380952381*G12_0_6_1 + 0.00357142857142857*G12_0_7_0 + 0.00357142857142858*G12_0_7_1 + 0.00357142857142857*G12_0_8_0 + 0.00357142857142858*G12_0_8_1 - 0.00476190476190477*G12_0_9_0 - 0.0047619047619047*G12_0_9_1 - 0.0190476190476191*G12_0_10_0 - 0.0190476190476191*G12_0_10_1 - 0.0190476190476191*G12_0_11_0 - 0.019047619047619*G12_0_11_1 - 0.030952380952381*G13_0_6_0 - 0.030952380952381*G13_0_6_1 - 0.00714285714285719*G13_0_7_0 - 0.00714285714285714*G13_0_8_1 + 0.0095238095238095*G13_0_9_0 + 0.00952380952380934*G13_0_9_1 - 0.0095238095238095*G13_0_10_0 + 0.0380952380952382*G13_0_10_1 + 0.0380952380952381*G13_0_11_0 - 0.00952380952380951*G13_0_11_1 + 0.5*G15_0_0_0 + 0.5*G15_0_0_1 + 0.5*G15_1_0_0 + 0.500000000000002*G15_1_0_1 + 0.5*G16_0_0_0 + 0.5*G16_0_0_1 + 0.5*G16_1_0_0 + 0.500000000000002*G16_1_0_1 + 0.5*G23_0_0_0 + 0.5*G23_0_0_1 + 0.5*G23_1_0_0 + 0.500000000000002*G23_1_0_1;
    A[133] = -0.00714285714285719*G10_0_0_0 - 0.00357142857142856*G10_0_1_0 + 0.00436507936507937*G10_0_2_0 - 0.00793650793650793*G10_0_3_0 - 0.00634920634920637*G10_0_4_0 - 0.0126984126984127*G10_0_5_0 - 0.00714285714285719*G12_0_6_0 - 0.00357142857142856*G12_0_7_0 + 0.00436507936507937*G12_0_8_0 - 0.00793650793650793*G12_0_9_0 - 0.00634920634920637*G12_0_10_0 - 0.0126984126984127*G12_0_11_0 + 0.00357142857142857*G13_0_6_0 + 0.00357142857142858*G13_0_6_1 - 0.00357142857142856*G13_0_7_0 + 0.00436507936507937*G13_0_8_1 + 0.00158730158730159*G13_0_9_0 - 0.00634920634920631*G13_0_9_1 - 0.00158730158730159*G13_0_10_0 - 0.00793650793650796*G13_0_10_1 + 0.00634920634920634*G13_0_11_1 + 0.166666666666668*G15_0_0_0 + 0.166666666666666*G15_1_0_0 + 0.166666666666668*G16_0_0_0 + 0.166666666666666*G16_1_0_0 + 0.166666666666668*G23_0_0_0 + 0.166666666666666*G23_1_0_0;
    A[134] = -0.00714285714285714*G10_0_0_1 + 0.00436507936507937*G10_0_1_1 - 0.00357142857142857*G10_0_2_1 - 0.00793650793650795*G10_0_3_1 - 0.0126984126984127*G10_0_4_1 - 0.00634920634920636*G10_0_5_1 - 0.00714285714285714*G12_0_6_1 + 0.00436507936507937*G12_0_7_1 - 0.00357142857142857*G12_0_8_1 - 0.00793650793650795*G12_0_9_1 - 0.0126984126984127*G12_0_10_1 - 0.00634920634920636*G12_0_11_1 + 0.00357142857142857*G13_0_6_0 + 0.00357142857142858*G13_0_6_1 + 0.00436507936507937*G13_0_7_0 - 0.00357142857142857*G13_0_8_1 - 0.00634920634920634*G13_0_9_0 + 0.00158730158730162*G13_0_9_1 + 0.00634920634920634*G13_0_10_0 - 0.00793650793650794*G13_0_11_0 - 0.00158730158730159*G13_0_11_1 + 0.166666666666667*G15_0_0_1 + 0.166666666666666*G15_1_0_1 + 0.166666666666667*G16_0_0_1 + 0.166666666666666*G16_1_0_1 + 0.166666666666667*G23_0_0_1 + 0.166666666666666*G23_1_0_1;
    A[135] = 0.0095238095238095*G10_0_0_0 + 0.00952380952380934*G10_0_0_1 + 0.00158730158730159*G10_0_1_0 - 0.00634920634920631*G10_0_1_1 - 0.00634920634920634*G10_0_2_0 + 0.00158730158730162*G10_0_2_1 - 0.019047619047619*G10_0_3_0 - 0.0190476190476189*G10_0_3_1 - 0.0126984126984127*G10_0_4_0 - 0.00634920634920631*G10_0_4_1 - 0.00634920634920635*G10_0_5_0 - 0.0126984126984127*G10_0_5_1 + 0.0095238095238095*G12_0_6_0 + 0.00952380952380934*G12_0_6_1 + 0.00158730158730159*G12_0_7_0 - 0.00634920634920631*G12_0_7_1 - 0.00634920634920634*G12_0_8_0 + 0.00158730158730162*G12_0_8_1 - 0.019047619047619*G12_0_9_0 - 0.0190476190476189*G12_0_9_1 - 0.0126984126984127*G12_0_10_0 - 0.00634920634920631*G12_0_10_1 - 0.00634920634920635*G12_0_11_0 - 0.0126984126984127*G12_0_11_1 - 0.00476190476190477*G13_0_6_0 - 0.0047619047619047*G13_0_6_1 - 0.00793650793650793*G13_0_7_0 - 0.00793650793650795*G13_0_8_1 - 0.019047619047619*G13_0_9_0 - 0.0190476190476189*G13_0_9_1 + 0.019047619047619*G13_0_10_0 + 0.0126984126984126*G13_0_10_1 + 0.0126984126984127*G13_0_11_0 + 0.019047619047619*G13_0_11_1;
    A[136] = -0.0095238095238095*G10_0_0_0 + 0.0380952380952382*G10_0_0_1 - 0.00158730158730159*G10_0_1_0 - 0.00793650793650796*G10_0_1_1 + 0.00634920634920634*G10_0_2_0 + 0.019047619047619*G10_0_3_0 + 0.0126984126984126*G10_0_3_1 + 0.0126984126984127*G10_0_4_0 + 0.0317460317460317*G10_0_4_1 + 0.00634920634920635*G10_0_5_0 + 0.0253968253968254*G10_0_5_1 - 0.0095238095238095*G12_0_6_0 + 0.0380952380952382*G12_0_6_1 - 0.00158730158730159*G12_0_7_0 - 0.00793650793650796*G12_0_7_1 + 0.00634920634920634*G12_0_8_0 + 0.019047619047619*G12_0_9_0 + 0.0126984126984126*G12_0_9_1 + 0.0126984126984127*G12_0_10_0 + 0.0317460317460317*G12_0_10_1 + 0.00634920634920635*G12_0_11_0 + 0.0253968253968254*G12_0_11_1 - 0.0190476190476191*G13_0_6_0 - 0.0190476190476191*G13_0_6_1 - 0.00634920634920637*G13_0_7_0 - 0.0126984126984127*G13_0_8_1 - 0.0126984126984127*G13_0_9_0 - 0.00634920634920631*G13_0_9_1 + 0.0126984126984127*G13_0_10_0 + 0.0317460317460317*G13_0_10_1 + 0.0253968253968254*G13_0_11_0 + 0.00634920634920635*G13_0_11_1 - 0.666666666666668*G15_0_0_1 - 0.666666666666668*G15_1_0_1 - 0.666666666666668*G16_0_0_1 - 0.666666666666668*G16_1_0_1 - 0.666666666666668*G23_0_0_1 - 0.666666666666668*G23_1_0_1;
    A[137] = 0.0380952380952381*G10_0_0_0 - 0.00952380952380951*G10_0_0_1 + 0.00634920634920634*G10_0_1_1 - 0.00793650793650794*G10_0_2_0 - 0.00158730158730159*G10_0_2_1 + 0.0126984126984127*G10_0_3_0 + 0.019047619047619*G10_0_3_1 + 0.0253968253968254*G10_0_4_0 + 0.00634920634920635*G10_0_4_1 + 0.0317460317460318*G10_0_5_0 + 0.0126984126984127*G10_0_5_1 + 0.0380952380952381*G12_0_6_0 - 0.00952380952380951*G12_0_6_1 + 0.00634920634920634*G12_0_7_1 - 0.00793650793650794*G12_0_8_0 - 0.00158730158730159*G12_0_8_1 + 0.0126984126984127*G12_0_9_0 + 0.019047619047619*G12_0_9_1 + 0.0253968253968254*G12_0_10_0 + 0.00634920634920635*G12_0_10_1 + 0.0317460317460318*G12_0_11_0 + 0.0126984126984127*G12_0_11_1 - 0.0190476190476191*G13_0_6_0 - 0.019047619047619*G13_0_6_1 - 0.0126984126984127*G13_0_7_0 - 0.00634920634920636*G13_0_8_1 - 0.00634920634920635*G13_0_9_0 - 0.0126984126984127*G13_0_9_1 + 0.00634920634920635*G13_0_10_0 + 0.0253968253968254*G13_0_10_1 + 0.0317460317460318*G13_0_11_0 + 0.0126984126984127*G13_0_11_1 - 0.666666666666668*G15_0_0_0 - 0.666666666666667*G15_1_0_0 - 0.666666666666668*G16_0_0_0 - 0.666666666666667*G16_1_0_0 - 0.666666666666668*G23_0_0_0 - 0.666666666666667*G23_1_0_0;
    A[138] = 0.0;
    A[139] = 0.0;
    A[140] = 0.0;
    A[141] = 0.0;
    A[142] = 0.0;
    A[143] = 0.0;
    A[144] = 0.166666666666667*G14_0 + 0.166666666666668*G14_1;
    A[145] = 0.0;
    A[146] = 0.0;
    A[147] = 0.00357142857142857*G11_0_6_0 + 0.00357142857142858*G11_0_6_1 - 0.00357142857142856*G11_0_7_0 + 0.00436507936507937*G11_0_8_1 + 0.00158730158730159*G11_0_9_0 - 0.00634920634920631*G11_0_9_1 - 0.00158730158730159*G11_0_10_0 - 0.00793650793650796*G11_0_10_1 + 0.00634920634920634*G11_0_11_1 + 0.166666666666668*G22_0_0_0 + 0.166666666666666*G22_0_0_1;
    A[148] = 0.00714285714285716*G11_0_6_0 + 0.00714285714285705*G11_0_6_1 + 0.0309523809523809*G11_0_7_0 - 0.00714285714285713*G11_0_8_1 + 0.0095238095238095*G11_0_9_0 + 0.0476190476190474*G11_0_9_1 - 0.0095238095238095*G11_0_10_0 - 0.0380952380952381*G11_0_11_0 - 0.0476190476190476*G11_0_11_1 + 0.5*G22_0_0_0;
    A[149] = -0.00436507936507936*G11_0_6_0 - 0.00436507936507935*G11_0_6_1 - 0.00357142857142857*G11_0_7_0 - 0.00357142857142857*G11_0_8_1 - 0.00634920634920633*G11_0_9_0 - 0.0063492063492063*G11_0_9_1 + 0.00634920634920633*G11_0_10_0 + 0.0079365079365079*G11_0_10_1 + 0.00793650793650793*G11_0_11_0 + 0.00634920634920634*G11_0_11_1 - 0.166666666666667*G22_0_0_1;
    A[150] = 0.00634920634920636*G11_0_6_0 + 0.00634920634920635*G11_0_6_1 + 0.019047619047619*G11_0_7_0 - 0.0126984126984127*G11_0_8_1 - 0.0126984126984127*G11_0_9_0 + 0.019047619047619*G11_0_9_1 + 0.0126984126984127*G11_0_10_0 + 0.00634920634920637*G11_0_10_1 - 0.0253968253968254*G11_0_11_0 - 0.0190476190476191*G11_0_11_1 + 0.666666666666664*G22_0_0_1;
    A[151] = 0.00793650793650794*G11_0_6_0 + 0.00793650793650799*G11_0_6_1 + 0.00476190476190477*G11_0_7_0 - 0.00793650793650796*G11_0_8_1 - 0.019047619047619*G11_0_9_0 - 0.00634920634920622*G11_0_9_1 + 0.019047619047619*G11_0_10_0 - 0.0126984126984127*G11_0_11_0 + 0.00634920634920636*G11_0_11_1;
    A[152] = 0.0126984126984127*G11_0_6_0 + 0.0126984126984127*G11_0_6_1 + 0.0190476190476191*G11_0_7_0 - 0.00634920634920637*G11_0_8_1 - 0.00634920634920635*G11_0_9_0 + 0.019047619047619*G11_0_9_1 + 0.00634920634920635*G11_0_10_0 - 0.00634920634920631*G11_0_10_1 - 0.0317460317460318*G11_0_11_0 - 0.0190476190476191*G11_0_11_1 - 0.666666666666668*G22_0_0_0 - 0.666666666666667*G22_0_0_1;
    A[153] = 0.00357142857142857*G10_0_0_0 + 0.00357142857142858*G10_0_0_1 + 0.00714285714285716*G10_0_1_0 + 0.00714285714285705*G10_0_1_1 - 0.00436507936507936*G10_0_2_0 - 0.00436507936507935*G10_0_2_1 + 0.00634920634920636*G10_0_3_0 + 0.00634920634920635*G10_0_3_1 + 0.00793650793650794*G10_0_4_0 + 0.00793650793650799*G10_0_4_1 + 0.0126984126984127*G10_0_5_0 + 0.0126984126984127*G10_0_5_1 + 0.00357142857142857*G12_0_6_0 + 0.00357142857142858*G12_0_6_1 + 0.00714285714285716*G12_0_7_0 + 0.00714285714285705*G12_0_7_1 - 0.00436507936507936*G12_0_8_0 - 0.00436507936507935*G12_0_8_1 + 0.00634920634920636*G12_0_9_0 + 0.00634920634920635*G12_0_9_1 + 0.00793650793650794*G12_0_10_0 + 0.00793650793650799*G12_0_10_1 + 0.0126984126984127*G12_0_11_0 + 0.0126984126984127*G12_0_11_1 + 0.00357142857142857*G13_0_6_0 + 0.00357142857142858*G13_0_6_1 - 0.00357142857142856*G13_0_7_0 + 0.00436507936507937*G13_0_8_1 + 0.00158730158730159*G13_0_9_0 - 0.00634920634920631*G13_0_9_1 - 0.00158730158730159*G13_0_10_0 - 0.00793650793650796*G13_0_10_1 + 0.00634920634920634*G13_0_11_1 + 0.166666666666668*G15_0_0_0 + 0.166666666666666*G15_0_0_1 + 0.166666666666668*G16_0_0_0 + 0.166666666666666*G16_0_0_1 + 0.166666666666668*G23_0_0_0 + 0.166666666666666*G23_0_0_1;
    A[154] = -0.00357142857142856*G10_0_0_0 + 0.0309523809523809*G10_0_1_0 - 0.00357142857142857*G10_0_2_0 + 0.019047619047619*G10_0_3_0 + 0.00476190476190477*G10_0_4_0 + 0.0190476190476191*G10_0_5_0 - 0.00357142857142856*G12_0_6_0 + 0.0309523809523809*G12_0_7_0 - 0.00357142857142857*G12_0_8_0 + 0.019047619047619*G12_0_9_0 + 0.00476190476190477*G12_0_10_0 + 0.0190476190476191*G12_0_11_0 + 0.00714285714285716*G13_0_6_0 + 0.00714285714285705*G13_0_6_1 + 0.0309523809523809*G13_0_7_0 - 0.00714285714285713*G13_0_8_1 + 0.0095238095238095*G13_0_9_0 + 0.0476190476190474*G13_0_9_1 - 0.0095238095238095*G13_0_10_0 - 0.0380952380952381*G13_0_11_0 - 0.0476190476190476*G13_0_11_1 + 0.5*G15_0_0_0 + 0.5*G16_0_0_0 + 0.5*G23_0_0_0;
    A[155] = 0.00436507936507937*G10_0_0_1 - 0.00714285714285713*G10_0_1_1 - 0.00357142857142857*G10_0_2_1 - 0.0126984126984127*G10_0_3_1 - 0.00793650793650796*G10_0_4_1 - 0.00634920634920637*G10_0_5_1 + 0.00436507936507937*G12_0_6_1 - 0.00714285714285713*G12_0_7_1 - 0.00357142857142857*G12_0_8_1 - 0.0126984126984127*G12_0_9_1 - 0.00793650793650796*G12_0_10_1 - 0.00634920634920637*G12_0_11_1 - 0.00436507936507936*G13_0_6_0 - 0.00436507936507935*G13_0_6_1 - 0.00357142857142857*G13_0_7_0 - 0.00357142857142857*G13_0_8_1 - 0.00634920634920633*G13_0_9_0 - 0.0063492063492063*G13_0_9_1 + 0.00634920634920633*G13_0_10_0 + 0.0079365079365079*G13_0_10_1 + 0.00793650793650793*G13_0_11_0 + 0.00634920634920634*G13_0_11_1 - 0.166666666666667*G15_0_0_1 - 0.166666666666667*G16_0_0_1 - 0.166666666666667*G23_0_0_1;
    A[156] = 0.00158730158730159*G10_0_0_0 - 0.00634920634920631*G10_0_0_1 + 0.0095238095238095*G10_0_1_0 + 0.0476190476190474*G10_0_1_1 - 0.00634920634920633*G10_0_2_0 - 0.0063492063492063*G10_0_2_1 - 0.0126984126984127*G10_0_3_0 + 0.019047619047619*G10_0_3_1 - 0.019047619047619*G10_0_4_0 - 0.00634920634920622*G10_0_4_1 - 0.00634920634920635*G10_0_5_0 + 0.019047619047619*G10_0_5_1 + 0.00158730158730159*G12_0_6_0 - 0.00634920634920631*G12_0_6_1 + 0.0095238095238095*G12_0_7_0 + 0.0476190476190474*G12_0_7_1 - 0.00634920634920633*G12_0_8_0 - 0.0063492063492063*G12_0_8_1 - 0.0126984126984127*G12_0_9_0 + 0.019047619047619*G12_0_9_1 - 0.019047619047619*G12_0_10_0 - 0.00634920634920622*G12_0_10_1 - 0.00634920634920635*G12_0_11_0 + 0.019047619047619*G12_0_11_1 + 0.00634920634920636*G13_0_6_0 + 0.00634920634920635*G13_0_6_1 + 0.019047619047619*G13_0_7_0 - 0.0126984126984127*G13_0_8_1 - 0.0126984126984127*G13_0_9_0 + 0.019047619047619*G13_0_9_1 + 0.0126984126984127*G13_0_10_0 + 0.00634920634920637*G13_0_10_1 - 0.0253968253968254*G13_0_11_0 - 0.0190476190476191*G13_0_11_1 + 0.666666666666664*G15_0_0_1 + 0.666666666666664*G16_0_0_1 + 0.666666666666664*G23_0_0_1;
    A[157] = -0.00158730158730159*G10_0_0_0 - 0.00793650793650796*G10_0_0_1 - 0.0095238095238095*G10_0_1_0 + 0.00634920634920633*G10_0_2_0 + 0.0079365079365079*G10_0_2_1 + 0.0126984126984127*G10_0_3_0 + 0.00634920634920637*G10_0_3_1 + 0.019047619047619*G10_0_4_0 + 0.00634920634920635*G10_0_5_0 - 0.00634920634920631*G10_0_5_1 - 0.00158730158730159*G12_0_6_0 - 0.00793650793650796*G12_0_6_1 - 0.0095238095238095*G12_0_7_0 + 0.00634920634920633*G12_0_8_0 + 0.0079365079365079*G12_0_8_1 + 0.0126984126984127*G12_0_9_0 + 0.00634920634920637*G12_0_9_1 + 0.019047619047619*G12_0_10_0 + 0.00634920634920635*G12_0_11_0 - 0.00634920634920631*G12_0_11_1 + 0.00793650793650794*G13_0_6_0 + 0.00793650793650799*G13_0_6_1 + 0.00476190476190477*G13_0_7_0 - 0.00793650793650796*G13_0_8_1 - 0.019047619047619*G13_0_9_0 - 0.00634920634920622*G13_0_9_1 + 0.019047619047619*G13_0_10_0 - 0.0126984126984127*G13_0_11_0 + 0.00634920634920636*G13_0_11_1;
    A[158] = 0.00634920634920634*G10_0_0_1 - 0.0380952380952381*G10_0_1_0 - 0.0476190476190476*G10_0_1_1 + 0.00793650793650793*G10_0_2_0 + 0.00634920634920634*G10_0_2_1 - 0.0253968253968254*G10_0_3_0 - 0.0190476190476191*G10_0_3_1 - 0.0126984126984127*G10_0_4_0 + 0.00634920634920636*G10_0_4_1 - 0.0317460317460318*G10_0_5_0 - 0.0190476190476191*G10_0_5_1 + 0.00634920634920634*G12_0_6_1 - 0.0380952380952381*G12_0_7_0 - 0.0476190476190476*G12_0_7_1 + 0.00793650793650793*G12_0_8_0 + 0.00634920634920634*G12_0_8_1 - 0.0253968253968254*G12_0_9_0 - 0.0190476190476191*G12_0_9_1 - 0.0126984126984127*G12_0_10_0 + 0.00634920634920636*G12_0_10_1 - 0.0317460317460318*G12_0_11_0 - 0.0190476190476191*G12_0_11_1 + 0.0126984126984127*G13_0_6_0 + 0.0126984126984127*G13_0_6_1 + 0.0190476190476191*G13_0_7_0 - 0.00634920634920637*G13_0_8_1 - 0.00634920634920635*G13_0_9_0 + 0.019047619047619*G13_0_9_1 + 0.00634920634920635*G13_0_10_0 - 0.00634920634920631*G13_0_10_1 - 0.0317460317460318*G13_0_11_0 - 0.0190476190476191*G13_0_11_1 - 0.666666666666668*G15_0_0_0 - 0.666666666666667*G15_0_0_1 - 0.666666666666668*G16_0_0_0 - 0.666666666666667*G16_0_0_1 - 0.666666666666668*G23_0_0_0 - 0.666666666666667*G23_0_0_1;
    A[159] = 0.0;
    A[160] = 0.0;
    A[161] = 0.0;
    A[162] = 0.0;
    A[163] = 0.0;
    A[164] = 0.0;
    A[165] = 0.0;
    A[166] = -0.166666666666667*G14_0;
    A[167] = 0.0;
    A[168] = 0.00357142857142857*G11_0_6_0 + 0.00357142857142859*G11_0_6_1 + 0.00436507936507937*G11_0_7_0 - 0.00357142857142857*G11_0_8_1 - 0.00634920634920634*G11_0_9_0 + 0.00158730158730162*G11_0_9_1 + 0.00634920634920634*G11_0_10_0 - 0.00793650793650794*G11_0_11_0 - 0.00158730158730159*G11_0_11_1 + 0.166666666666667*G22_1_0_0 + 0.166666666666666*G22_1_0_1;
    A[169] = -0.00436507936507936*G11_0_6_0 - 0.00436507936507935*G11_0_6_1 - 0.00357142857142857*G11_0_7_0 - 0.00357142857142857*G11_0_8_1 - 0.00634920634920633*G11_0_9_0 - 0.0063492063492063*G11_0_9_1 + 0.00634920634920633*G11_0_10_0 + 0.0079365079365079*G11_0_10_1 + 0.00793650793650793*G11_0_11_0 + 0.00634920634920634*G11_0_11_1 - 0.166666666666667*G22_1_0_0;
    A[170] = 0.00714285714285713*G11_0_6_0 + 0.00714285714285705*G11_0_6_1 - 0.00714285714285714*G11_0_7_0 + 0.030952380952381*G11_0_8_1 + 0.0476190476190475*G11_0_9_0 + 0.00952380952380927*G11_0_9_1 - 0.0476190476190475*G11_0_10_0 - 0.0380952380952379*G11_0_10_1 - 0.00952380952380949*G11_0_11_1 + 0.5*G22_1_0_1;
    A[171] = 0.00634920634920634*G11_0_6_0 + 0.00634920634920634*G11_0_6_1 - 0.0126984126984127*G11_0_7_0 + 0.019047619047619*G11_0_8_1 + 0.019047619047619*G11_0_9_0 - 0.0126984126984127*G11_0_9_1 - 0.019047619047619*G11_0_10_0 - 0.0253968253968254*G11_0_10_1 + 0.00634920634920636*G11_0_11_0 + 0.0126984126984127*G11_0_11_1 + 0.666666666666667*G22_1_0_0;
    A[172] = 0.0126984126984127*G11_0_6_0 + 0.0126984126984127*G11_0_6_1 - 0.00634920634920634*G11_0_7_0 + 0.019047619047619*G11_0_8_1 + 0.019047619047619*G11_0_9_0 - 0.00634920634920637*G11_0_9_1 - 0.019047619047619*G11_0_10_0 - 0.0317460317460317*G11_0_10_1 - 0.00634920634920635*G11_0_11_0 + 0.00634920634920636*G11_0_11_1 - 0.666666666666667*G22_1_0_0 - 0.666666666666665*G22_1_0_1;
    A[173] = 0.00793650793650793*G11_0_6_0 + 0.00793650793650799*G11_0_6_1 - 0.00793650793650793*G11_0_7_0 + 0.00476190476190476*G11_0_8_1 - 0.00634920634920632*G11_0_9_0 - 0.0190476190476189*G11_0_9_1 + 0.00634920634920632*G11_0_10_0 - 0.0126984126984128*G11_0_10_1 + 0.0190476190476191*G11_0_11_1;
    A[174] = 0.00357142857142857*G10_0_0_0 + 0.00357142857142859*G10_0_0_1 - 0.00436507936507936*G10_0_1_0 - 0.00436507936507935*G10_0_1_1 + 0.00714285714285713*G10_0_2_0 + 0.00714285714285705*G10_0_2_1 + 0.00634920634920634*G10_0_3_0 + 0.00634920634920634*G10_0_3_1 + 0.0126984126984127*G10_0_4_0 + 0.0126984126984127*G10_0_4_1 + 0.00793650793650793*G10_0_5_0 + 0.00793650793650799*G10_0_5_1 + 0.00357142857142857*G12_0_6_0 + 0.00357142857142859*G12_0_6_1 - 0.00436507936507936*G12_0_7_0 - 0.00436507936507935*G12_0_7_1 + 0.00714285714285713*G12_0_8_0 + 0.00714285714285705*G12_0_8_1 + 0.00634920634920634*G12_0_9_0 + 0.00634920634920634*G12_0_9_1 + 0.0126984126984127*G12_0_10_0 + 0.0126984126984127*G12_0_10_1 + 0.00793650793650793*G12_0_11_0 + 0.00793650793650799*G12_0_11_1 + 0.00357142857142857*G13_0_6_0 + 0.00357142857142859*G13_0_6_1 + 0.00436507936507937*G13_0_7_0 - 0.00357142857142857*G13_0_8_1 - 0.00634920634920634*G13_0_9_0 + 0.00158730158730162*G13_0_9_1 + 0.00634920634920634*G13_0_10_0 - 0.00793650793650794*G13_0_11_0 - 0.00158730158730159*G13_0_11_1 + 0.166666666666667*G15_1_0_0 + 0.166666666666666*G15_1_0_1 + 0.166666666666667*G16_1_0_0 + 0.166666666666666*G16_1_0_1 + 0.166666666666667*G23_1_0_0 + 0.166666666666666*G23_1_0_1;
    A[175] = 0.00436507936507937*G10_0_0_0 - 0.00357142857142857*G10_0_1_0 - 0.00714285714285714*G10_0_2_0 - 0.0126984126984127*G10_0_3_0 - 0.00634920634920634*G10_0_4_0 - 0.00793650793650793*G10_0_5_0 + 0.00436507936507937*G12_0_6_0 - 0.00357142857142857*G12_0_7_0 - 0.00714285714285714*G12_0_8_0 - 0.0126984126984127*G12_0_9_0 - 0.00634920634920634*G12_0_10_0 - 0.00793650793650793*G12_0_11_0 - 0.00436507936507936*G13_0_6_0 - 0.00436507936507935*G13_0_6_1 - 0.00357142857142857*G13_0_7_0 - 0.00357142857142857*G13_0_8_1 - 0.00634920634920633*G13_0_9_0 - 0.0063492063492063*G13_0_9_1 + 0.00634920634920633*G13_0_10_0 + 0.0079365079365079*G13_0_10_1 + 0.00793650793650793*G13_0_11_0 + 0.00634920634920634*G13_0_11_1 - 0.166666666666667*G15_1_0_0 - 0.166666666666667*G16_1_0_0 - 0.166666666666667*G23_1_0_0;
    A[176] = -0.00357142857142857*G10_0_0_1 - 0.00357142857142857*G10_0_1_1 + 0.030952380952381*G10_0_2_1 + 0.019047619047619*G10_0_3_1 + 0.019047619047619*G10_0_4_1 + 0.00476190476190476*G10_0_5_1 - 0.00357142857142857*G12_0_6_1 - 0.00357142857142857*G12_0_7_1 + 0.030952380952381*G12_0_8_1 + 0.019047619047619*G12_0_9_1 + 0.019047619047619*G12_0_10_1 + 0.00476190476190476*G12_0_11_1 + 0.00714285714285713*G13_0_6_0 + 0.00714285714285705*G13_0_6_1 - 0.00714285714285714*G13_0_7_0 + 0.030952380952381*G13_0_8_1 + 0.0476190476190475*G13_0_9_0 + 0.00952380952380927*G13_0_9_1 - 0.0476190476190475*G13_0_10_0 - 0.0380952380952379*G13_0_10_1 - 0.00952380952380949*G13_0_11_1 + 0.5*G15_1_0_1 + 0.5*G16_1_0_1 + 0.5*G23_1_0_1;
    A[177] = -0.00634920634920634*G10_0_0_0 + 0.00158730158730162*G10_0_0_1 - 0.00634920634920633*G10_0_1_0 - 0.0063492063492063*G10_0_1_1 + 0.0476190476190475*G10_0_2_0 + 0.00952380952380927*G10_0_2_1 + 0.019047619047619*G10_0_3_0 - 0.0126984126984127*G10_0_3_1 + 0.019047619047619*G10_0_4_0 - 0.00634920634920637*G10_0_4_1 - 0.00634920634920632*G10_0_5_0 - 0.0190476190476189*G10_0_5_1 - 0.00634920634920634*G12_0_6_0 + 0.00158730158730162*G12_0_6_1 - 0.00634920634920633*G12_0_7_0 - 0.0063492063492063*G12_0_7_1 + 0.0476190476190475*G12_0_8_0 + 0.00952380952380927*G12_0_8_1 + 0.019047619047619*G12_0_9_0 - 0.0126984126984127*G12_0_9_1 + 0.019047619047619*G12_0_10_0 - 0.00634920634920637*G12_0_10_1 - 0.00634920634920632*G12_0_11_0 - 0.0190476190476189*G12_0_11_1 + 0.00634920634920634*G13_0_6_0 + 0.00634920634920634*G13_0_6_1 - 0.0126984126984127*G13_0_7_0 + 0.019047619047619*G13_0_8_1 + 0.019047619047619*G13_0_9_0 - 0.0126984126984127*G13_0_9_1 - 0.019047619047619*G13_0_10_0 - 0.0253968253968254*G13_0_10_1 + 0.00634920634920636*G13_0_11_0 + 0.0126984126984127*G13_0_11_1 + 0.666666666666667*G15_1_0_0 + 0.666666666666667*G16_1_0_0 + 0.666666666666667*G23_1_0_0;
    A[178] = 0.00634920634920634*G10_0_0_0 + 0.00634920634920633*G10_0_1_0 + 0.0079365079365079*G10_0_1_1 - 0.0476190476190475*G10_0_2_0 - 0.0380952380952379*G10_0_2_1 - 0.019047619047619*G10_0_3_0 - 0.0253968253968254*G10_0_3_1 - 0.019047619047619*G10_0_4_0 - 0.0317460317460317*G10_0_4_1 + 0.00634920634920632*G10_0_5_0 - 0.0126984126984128*G10_0_5_1 + 0.00634920634920634*G12_0_6_0 + 0.00634920634920633*G12_0_7_0 + 0.0079365079365079*G12_0_7_1 - 0.0476190476190475*G12_0_8_0 - 0.0380952380952379*G12_0_8_1 - 0.019047619047619*G12_0_9_0 - 0.0253968253968254*G12_0_9_1 - 0.019047619047619*G12_0_10_0 - 0.0317460317460317*G12_0_10_1 + 0.00634920634920632*G12_0_11_0 - 0.0126984126984128*G12_0_11_1 + 0.0126984126984127*G13_0_6_0 + 0.0126984126984127*G13_0_6_1 - 0.00634920634920634*G13_0_7_0 + 0.019047619047619*G13_0_8_1 + 0.019047619047619*G13_0_9_0 - 0.00634920634920637*G13_0_9_1 - 0.019047619047619*G13_0_10_0 - 0.0317460317460317*G13_0_10_1 - 0.00634920634920635*G13_0_11_0 + 0.00634920634920636*G13_0_11_1 - 0.666666666666667*G15_1_0_0 - 0.666666666666665*G15_1_0_1 - 0.666666666666667*G16_1_0_0 - 0.666666666666665*G16_1_0_1 - 0.666666666666667*G23_1_0_0 - 0.666666666666665*G23_1_0_1;
    A[179] = -0.00793650793650794*G10_0_0_0 - 0.00158730158730159*G10_0_0_1 + 0.00793650793650793*G10_0_1_0 + 0.00634920634920634*G10_0_1_1 - 0.00952380952380949*G10_0_2_1 + 0.00634920634920636*G10_0_3_0 + 0.0126984126984127*G10_0_3_1 - 0.00634920634920635*G10_0_4_0 + 0.00634920634920636*G10_0_4_1 + 0.0190476190476191*G10_0_5_1 - 0.00793650793650794*G12_0_6_0 - 0.00158730158730159*G12_0_6_1 + 0.00793650793650793*G12_0_7_0 + 0.00634920634920634*G12_0_7_1 - 0.00952380952380949*G12_0_8_1 + 0.00634920634920636*G12_0_9_0 + 0.0126984126984127*G12_0_9_1 - 0.00634920634920635*G12_0_10_0 + 0.00634920634920636*G12_0_10_1 + 0.0190476190476191*G12_0_11_1 + 0.00793650793650793*G13_0_6_0 + 0.00793650793650799*G13_0_6_1 - 0.00793650793650793*G13_0_7_0 + 0.00476190476190476*G13_0_8_1 - 0.00634920634920632*G13_0_9_0 - 0.0190476190476189*G13_0_9_1 + 0.00634920634920632*G13_0_10_0 - 0.0126984126984128*G13_0_10_1 + 0.0190476190476191*G13_0_11_1;
    A[180] = 0.0;
    A[181] = 0.0;
    A[182] = 0.0;
    A[183] = 0.0;
    A[184] = 0.0;
    A[185] = 0.0;
    A[186] = 0.0;
    A[187] = 0.0;
    A[188] = -0.166666666666667*G14_1;
    A[189] = -0.00476190476190477*G11_0_6_0 - 0.0047619047619047*G11_0_6_1 - 0.00793650793650793*G11_0_7_0 - 0.00793650793650795*G11_0_8_1 - 0.019047619047619*G11_0_9_0 - 0.0190476190476189*G11_0_9_1 + 0.019047619047619*G11_0_10_0 + 0.0126984126984126*G11_0_10_1 + 0.0126984126984127*G11_0_11_0 + 0.019047619047619*G11_0_11_1;
    A[190] = 0.00634920634920636*G11_0_6_0 + 0.00634920634920635*G11_0_6_1 + 0.019047619047619*G11_0_7_0 - 0.0126984126984127*G11_0_8_1 - 0.0126984126984127*G11_0_9_0 + 0.019047619047619*G11_0_9_1 + 0.0126984126984127*G11_0_10_0 + 0.00634920634920637*G11_0_10_1 - 0.0253968253968254*G11_0_11_0 - 0.0190476190476191*G11_0_11_1 + 0.666666666666664*G22_1_0_0;
    A[191] = 0.00634920634920634*G11_0_6_0 + 0.00634920634920634*G11_0_6_1 - 0.0126984126984127*G11_0_7_0 + 0.019047619047619*G11_0_8_1 + 0.019047619047619*G11_0_9_0 - 0.0126984126984127*G11_0_9_1 - 0.019047619047619*G11_0_10_0 - 0.0253968253968254*G11_0_10_1 + 0.00634920634920636*G11_0_11_0 + 0.0126984126984127*G11_0_11_1 + 0.666666666666667*G22_0_0_1;
    A[192] = 0.0380952380952381*G11_0_6_0 + 0.0380952380952376*G11_0_6_1 + 0.0634920634920635*G11_0_7_0 + 0.0634920634920636*G11_0_8_1 + 0.152380952380952*G11_0_9_0 + 0.152380952380951*G11_0_9_1 - 0.152380952380952*G11_0_10_0 - 0.101587301587301*G11_0_10_1 - 0.101587301587302*G11_0_11_0 - 0.152380952380952*G11_0_11_1 + 1.33333333333333*G22_0_0_0 + 0.666666666666656*G22_0_0_1 + 0.666666666666656*G22_1_0_0 + 1.33333333333332*G22_1_0_1;
    A[193] = -0.00634920634920633*G11_0_6_0 - 0.00634920634920657*G11_0_6_1 + 0.00634920634920633*G11_0_7_0 + 0.0317460317460318*G11_0_8_1 + 0.0761904761904761*G11_0_9_0 + 0.0507936507936502*G11_0_9_1 - 0.0761904761904761*G11_0_10_0 - 0.025396825396825*G11_0_10_1 - 0.0507936507936508*G11_0_11_1 - 1.33333333333333*G22_0_0_0 - 0.666666666666659*G22_0_0_1 - 0.666666666666656*G22_1_0_0;
    A[194] = -0.0063492063492063*G11_0_6_0 - 0.00634920634920656*G11_0_6_1 + 0.0317460317460317*G11_0_7_0 + 0.00634920634920642*G11_0_8_1 + 0.0507936507936507*G11_0_9_0 + 0.0761904761904756*G11_0_9_1 - 0.0507936507936507*G11_0_10_0 - 0.0253968253968254*G11_0_11_0 - 0.0761904761904763*G11_0_11_1 - 0.666666666666665*G22_0_0_1 - 0.666666666666666*G22_1_0_0 - 1.33333333333333*G22_1_0_1;
    A[195] = -0.00476190476190477*G10_0_0_0 - 0.0047619047619047*G10_0_0_1 + 0.00634920634920636*G10_0_1_0 + 0.00634920634920635*G10_0_1_1 + 0.00634920634920634*G10_0_2_0 + 0.00634920634920634*G10_0_2_1 + 0.0380952380952381*G10_0_3_0 + 0.0380952380952376*G10_0_3_1 - 0.00634920634920633*G10_0_4_0 - 0.00634920634920657*G10_0_4_1 - 0.0063492063492063*G10_0_5_0 - 0.00634920634920656*G10_0_5_1 - 0.00476190476190477*G12_0_6_0 - 0.0047619047619047*G12_0_6_1 + 0.00634920634920636*G12_0_7_0 + 0.00634920634920635*G12_0_7_1 + 0.00634920634920634*G12_0_8_0 + 0.00634920634920634*G12_0_8_1 + 0.0380952380952381*G12_0_9_0 + 0.0380952380952376*G12_0_9_1 - 0.00634920634920633*G12_0_10_0 - 0.00634920634920657*G12_0_10_1 - 0.0063492063492063*G12_0_11_0 - 0.00634920634920656*G12_0_11_1 - 0.00476190476190477*G13_0_6_0 - 0.0047619047619047*G13_0_6_1 - 0.00793650793650793*G13_0_7_0 - 0.00793650793650795*G13_0_8_1 - 0.019047619047619*G13_0_9_0 - 0.0190476190476189*G13_0_9_1 + 0.019047619047619*G13_0_10_0 + 0.0126984126984126*G13_0_10_1 + 0.0126984126984127*G13_0_11_0 + 0.019047619047619*G13_0_11_1;
    A[196] = -0.00793650793650793*G10_0_0_0 + 0.019047619047619*G10_0_1_0 - 0.0126984126984127*G10_0_2_0 + 0.0634920634920635*G10_0_3_0 + 0.00634920634920633*G10_0_4_0 + 0.0317460317460317*G10_0_5_0 - 0.00793650793650793*G12_0_6_0 + 0.019047619047619*G12_0_7_0 - 0.0126984126984127*G12_0_8_0 + 0.0634920634920635*G12_0_9_0 + 0.00634920634920633*G12_0_10_0 + 0.0317460317460317*G12_0_11_0 + 0.00634920634920636*G13_0_6_0 + 0.00634920634920635*G13_0_6_1 + 0.019047619047619*G13_0_7_0 - 0.0126984126984127*G13_0_8_1 - 0.0126984126984127*G13_0_9_0 + 0.019047619047619*G13_0_9_1 + 0.0126984126984127*G13_0_10_0 + 0.00634920634920637*G13_0_10_1 - 0.0253968253968254*G13_0_11_0 - 0.0190476190476191*G13_0_11_1 + 0.666666666666664*G15_1_0_0 + 0.666666666666664*G16_1_0_0 + 0.666666666666664*G23_1_0_0;
    A[197] = -0.00793650793650795*G10_0_0_1 - 0.0126984126984127*G10_0_1_1 + 0.019047619047619*G10_0_2_1 + 0.0634920634920636*G10_0_3_1 + 0.0317460317460318*G10_0_4_1 + 0.00634920634920642*G10_0_5_1 - 0.00793650793650795*G12_0_6_1 - 0.0126984126984127*G12_0_7_1 + 0.019047619047619*G12_0_8_1 + 0.0634920634920636*G12_0_9_1 + 0.0317460317460318*G12_0_10_1 + 0.00634920634920642*G12_0_11_1 + 0.00634920634920634*G13_0_6_0 + 0.00634920634920634*G13_0_6_1 - 0.0126984126984127*G13_0_7_0 + 0.019047619047619*G13_0_8_1 + 0.019047619047619*G13_0_9_0 - 0.0126984126984127*G13_0_9_1 - 0.019047619047619*G13_0_10_0 - 0.0253968253968254*G13_0_10_1 + 0.00634920634920636*G13_0_11_0 + 0.0126984126984127*G13_0_11_1 + 0.666666666666667*G15_0_0_1 + 0.666666666666667*G16_0_0_1 + 0.666666666666667*G23_0_0_1;
    A[198] = -0.019047619047619*G10_0_0_0 - 0.0190476190476189*G10_0_0_1 - 0.0126984126984127*G10_0_1_0 + 0.019047619047619*G10_0_1_1 + 0.019047619047619*G10_0_2_0 - 0.0126984126984127*G10_0_2_1 + 0.152380952380952*G10_0_3_0 + 0.152380952380951*G10_0_3_1 + 0.0761904761904761*G10_0_4_0 + 0.0507936507936502*G10_0_4_1 + 0.0507936507936507*G10_0_5_0 + 0.0761904761904756*G10_0_5_1 - 0.019047619047619*G12_0_6_0 - 0.0190476190476189*G12_0_6_1 - 0.0126984126984127*G12_0_7_0 + 0.019047619047619*G12_0_7_1 + 0.019047619047619*G12_0_8_0 - 0.0126984126984127*G12_0_8_1 + 0.152380952380952*G12_0_9_0 + 0.152380952380951*G12_0_9_1 + 0.0761904761904761*G12_0_10_0 + 0.0507936507936502*G12_0_10_1 + 0.0507936507936507*G12_0_11_0 + 0.0761904761904756*G12_0_11_1 + 0.0380952380952381*G13_0_6_0 + 0.0380952380952376*G13_0_6_1 + 0.0634920634920635*G13_0_7_0 + 0.0634920634920636*G13_0_8_1 + 0.152380952380952*G13_0_9_0 + 0.152380952380951*G13_0_9_1 - 0.152380952380952*G13_0_10_0 - 0.101587301587301*G13_0_10_1 - 0.101587301587302*G13_0_11_0 - 0.152380952380952*G13_0_11_1 + 1.33333333333333*G15_0_0_0 + 0.666666666666656*G15_0_0_1 + 0.666666666666656*G15_1_0_0 + 1.33333333333332*G15_1_0_1 + 1.33333333333333*G16_0_0_0 + 0.666666666666656*G16_0_0_1 + 0.666666666666656*G16_1_0_0 + 1.33333333333332*G16_1_0_1 + 1.33333333333333*G23_0_0_0 + 0.666666666666656*G23_0_0_1 + 0.666666666666656*G23_1_0_0 + 1.33333333333332*G23_1_0_1;
    A[199] = 0.019047619047619*G10_0_0_0 + 0.0126984126984126*G10_0_0_1 + 0.0126984126984127*G10_0_1_0 + 0.00634920634920637*G10_0_1_1 - 0.019047619047619*G10_0_2_0 - 0.0253968253968254*G10_0_2_1 - 0.152380952380952*G10_0_3_0 - 0.101587301587301*G10_0_3_1 - 0.0761904761904761*G10_0_4_0 - 0.025396825396825*G10_0_4_1 - 0.0507936507936507*G10_0_5_0 + 0.019047619047619*G12_0_6_0 + 0.0126984126984126*G12_0_6_1 + 0.0126984126984127*G12_0_7_0 + 0.00634920634920637*G12_0_7_1 - 0.019047619047619*G12_0_8_0 - 0.0253968253968254*G12_0_8_1 - 0.152380952380952*G12_0_9_0 - 0.101587301587301*G12_0_9_1 - 0.0761904761904761*G12_0_10_0 - 0.025396825396825*G12_0_10_1 - 0.0507936507936507*G12_0_11_0 - 0.00634920634920633*G13_0_6_0 - 0.00634920634920657*G13_0_6_1 + 0.00634920634920633*G13_0_7_0 + 0.0317460317460318*G13_0_8_1 + 0.0761904761904761*G13_0_9_0 + 0.0507936507936502*G13_0_9_1 - 0.0761904761904761*G13_0_10_0 - 0.025396825396825*G13_0_10_1 - 0.0507936507936508*G13_0_11_1 - 1.33333333333333*G15_0_0_0 - 0.666666666666659*G15_0_0_1 - 0.666666666666656*G15_1_0_0 - 1.33333333333333*G16_0_0_0 - 0.666666666666659*G16_0_0_1 - 0.666666666666656*G16_1_0_0 - 1.33333333333333*G23_0_0_0 - 0.666666666666659*G23_0_0_1 - 0.666666666666656*G23_1_0_0;
    A[200] = 0.0126984126984127*G10_0_0_0 + 0.019047619047619*G10_0_0_1 - 0.0253968253968254*G10_0_1_0 - 0.0190476190476191*G10_0_1_1 + 0.00634920634920636*G10_0_2_0 + 0.0126984126984127*G10_0_2_1 - 0.101587301587302*G10_0_3_0 - 0.152380952380952*G10_0_3_1 - 0.0507936507936508*G10_0_4_1 - 0.0253968253968254*G10_0_5_0 - 0.0761904761904763*G10_0_5_1 + 0.0126984126984127*G12_0_6_0 + 0.019047619047619*G12_0_6_1 - 0.0253968253968254*G12_0_7_0 - 0.0190476190476191*G12_0_7_1 + 0.00634920634920636*G12_0_8_0 + 0.0126984126984127*G12_0_8_1 - 0.101587301587302*G12_0_9_0 - 0.152380952380952*G12_0_9_1 - 0.0507936507936508*G12_0_10_1 - 0.0253968253968254*G12_0_11_0 - 0.0761904761904763*G12_0_11_1 - 0.0063492063492063*G13_0_6_0 - 0.00634920634920656*G13_0_6_1 + 0.0317460317460317*G13_0_7_0 + 0.00634920634920642*G13_0_8_1 + 0.0507936507936507*G13_0_9_0 + 0.0761904761904756*G13_0_9_1 - 0.0507936507936507*G13_0_10_0 - 0.0253968253968254*G13_0_11_0 - 0.0761904761904763*G13_0_11_1 - 0.666666666666665*G15_0_0_1 - 0.666666666666666*G15_1_0_0 - 1.33333333333333*G15_1_0_1 - 0.666666666666665*G16_0_0_1 - 0.666666666666666*G16_1_0_0 - 1.33333333333333*G16_1_0_1 - 0.666666666666665*G23_0_0_1 - 0.666666666666666*G23_1_0_0 - 1.33333333333333*G23_1_0_1;
    A[201] = 0.0;
    A[202] = 0.0;
    A[203] = 0.0;
    A[204] = 0.0;
    A[205] = 0.0;
    A[206] = 0.0;
    A[207] = -0.166666666666666*G14_0 - 0.166666666666665*G14_1;
    A[208] = -0.166666666666666*G14_0 - 0.333333333333331*G14_1;
    A[209] = -0.333333333333333*G14_0 - 0.166666666666664*G14_1;
    A[210] = -0.0190476190476191*G11_0_6_0 - 0.0190476190476191*G11_0_6_1 - 0.00634920634920637*G11_0_7_0 - 0.0126984126984127*G11_0_8_1 - 0.0126984126984127*G11_0_9_0 - 0.00634920634920631*G11_0_9_1 + 0.0126984126984127*G11_0_10_0 + 0.0317460317460317*G11_0_10_1 + 0.0253968253968254*G11_0_11_0 + 0.00634920634920635*G11_0_11_1 - 0.666666666666668*G22_1_0_0 - 0.666666666666668*G22_1_0_1;
    A[211] = 0.00793650793650794*G11_0_6_0 + 0.00793650793650799*G11_0_6_1 + 0.00476190476190477*G11_0_7_0 - 0.00793650793650796*G11_0_8_1 - 0.019047619047619*G11_0_9_0 - 0.00634920634920622*G11_0_9_1 + 0.019047619047619*G11_0_10_0 - 0.0126984126984127*G11_0_11_0 + 0.00634920634920636*G11_0_11_1;
    A[212] = 0.0126984126984127*G11_0_6_0 + 0.0126984126984127*G11_0_6_1 - 0.00634920634920634*G11_0_7_0 + 0.019047619047619*G11_0_8_1 + 0.019047619047619*G11_0_9_0 - 0.00634920634920637*G11_0_9_1 - 0.019047619047619*G11_0_10_0 - 0.0317460317460317*G11_0_10_1 - 0.00634920634920635*G11_0_11_0 + 0.00634920634920636*G11_0_11_1 - 0.666666666666667*G22_0_0_1 - 0.666666666666665*G22_1_0_1;
    A[213] = -0.00634920634920633*G11_0_6_0 - 0.00634920634920657*G11_0_6_1 + 0.00634920634920633*G11_0_7_0 + 0.0317460317460318*G11_0_8_1 + 0.0761904761904761*G11_0_9_0 + 0.0507936507936502*G11_0_9_1 - 0.0761904761904761*G11_0_10_0 - 0.025396825396825*G11_0_10_1 - 0.0507936507936508*G11_0_11_1 - 1.33333333333333*G22_0_0_0 - 0.666666666666656*G22_0_0_1 - 0.666666666666659*G22_1_0_0;
    A[214] = -0.0634920634920635*G11_0_6_0 - 0.0634920634920639*G11_0_6_1 - 0.0380952380952382*G11_0_7_0 + 0.0634920634920636*G11_0_8_1 + 0.152380952380952*G11_0_9_0 + 0.0507936507936497*G11_0_9_1 - 0.152380952380952*G11_0_10_0 + 0.101587301587302*G11_0_11_0 - 0.0507936507936507*G11_0_11_1 + 1.33333333333333*G22_0_0_0 + 0.666666666666659*G22_0_0_1 + 0.666666666666659*G22_1_0_0 + 1.33333333333333*G22_1_0_1;
    A[215] = -0.0317460317460317*G11_0_6_0 - 0.031746031746032*G11_0_6_1 + 0.0063492063492063*G11_0_7_0 + 0.00634920634920642*G11_0_8_1 + 0.0507936507936507*G11_0_9_0 + 0.0507936507936502*G11_0_9_1 - 0.0507936507936507*G11_0_10_0 + 0.0253968253968258*G11_0_10_1 + 0.0253968253968254*G11_0_11_0 - 0.0507936507936508*G11_0_11_1 + 0.666666666666665*G22_0_0_1 + 0.666666666666666*G22_1_0_0;
    A[216] = -0.0190476190476191*G10_0_0_0 - 0.0190476190476191*G10_0_0_1 + 0.00793650793650794*G10_0_1_0 + 0.00793650793650799*G10_0_1_1 + 0.0126984126984127*G10_0_2_0 + 0.0126984126984127*G10_0_2_1 - 0.00634920634920633*G10_0_3_0 - 0.00634920634920657*G10_0_3_1 - 0.0634920634920635*G10_0_4_0 - 0.0634920634920639*G10_0_4_1 - 0.0317460317460317*G10_0_5_0 - 0.031746031746032*G10_0_5_1 - 0.0190476190476191*G12_0_6_0 - 0.0190476190476191*G12_0_6_1 + 0.00793650793650794*G12_0_7_0 + 0.00793650793650799*G12_0_7_1 + 0.0126984126984127*G12_0_8_0 + 0.0126984126984127*G12_0_8_1 - 0.00634920634920633*G12_0_9_0 - 0.00634920634920657*G12_0_9_1 - 0.0634920634920635*G12_0_10_0 - 0.0634920634920639*G12_0_10_1 - 0.0317460317460317*G12_0_11_0 - 0.031746031746032*G12_0_11_1 - 0.0190476190476191*G13_0_6_0 - 0.0190476190476191*G13_0_6_1 - 0.00634920634920637*G13_0_7_0 - 0.0126984126984127*G13_0_8_1 - 0.0126984126984127*G13_0_9_0 - 0.00634920634920631*G13_0_9_1 + 0.0126984126984127*G13_0_10_0 + 0.0317460317460317*G13_0_10_1 + 0.0253968253968254*G13_0_11_0 + 0.00634920634920635*G13_0_11_1 - 0.666666666666668*G15_1_0_0 - 0.666666666666668*G15_1_0_1 - 0.666666666666668*G16_1_0_0 - 0.666666666666668*G16_1_0_1 - 0.666666666666668*G23_1_0_0 - 0.666666666666668*G23_1_0_1;
    A[217] = -0.00634920634920637*G10_0_0_0 + 0.00476190476190477*G10_0_1_0 - 0.00634920634920634*G10_0_2_0 + 0.00634920634920633*G10_0_3_0 - 0.0380952380952382*G10_0_4_0 + 0.0063492063492063*G10_0_5_0 - 0.00634920634920637*G12_0_6_0 + 0.00476190476190477*G12_0_7_0 - 0.00634920634920634*G12_0_8_0 + 0.00634920634920633*G12_0_9_0 - 0.0380952380952382*G12_0_10_0 + 0.0063492063492063*G12_0_11_0 + 0.00793650793650794*G13_0_6_0 + 0.00793650793650799*G13_0_6_1 + 0.00476190476190477*G13_0_7_0 - 0.00793650793650796*G13_0_8_1 - 0.019047619047619*G13_0_9_0 - 0.00634920634920622*G13_0_9_1 + 0.019047619047619*G13_0_10_0 - 0.0126984126984127*G13_0_11_0 + 0.00634920634920636*G13_0_11_1;
    A[218] = -0.0126984126984127*G10_0_0_1 - 0.00793650793650796*G10_0_1_1 + 0.019047619047619*G10_0_2_1 + 0.0317460317460318*G10_0_3_1 + 0.0634920634920636*G10_0_4_1 + 0.00634920634920642*G10_0_5_1 - 0.0126984126984127*G12_0_6_1 - 0.00793650793650796*G12_0_7_1 + 0.019047619047619*G12_0_8_1 + 0.0317460317460318*G12_0_9_1 + 0.0634920634920636*G12_0_10_1 + 0.00634920634920642*G12_0_11_1 + 0.0126984126984127*G13_0_6_0 + 0.0126984126984127*G13_0_6_1 - 0.00634920634920634*G13_0_7_0 + 0.019047619047619*G13_0_8_1 + 0.019047619047619*G13_0_9_0 - 0.00634920634920637*G13_0_9_1 - 0.019047619047619*G13_0_10_0 - 0.0317460317460317*G13_0_10_1 - 0.00634920634920635*G13_0_11_0 + 0.00634920634920636*G13_0_11_1 - 0.666666666666667*G15_0_0_1 - 0.666666666666665*G15_1_0_1 - 0.666666666666667*G16_0_0_1 - 0.666666666666665*G16_1_0_1 - 0.666666666666667*G23_0_0_1 - 0.666666666666665*G23_1_0_1;
    A[219] = -0.0126984126984127*G10_0_0_0 - 0.00634920634920631*G10_0_0_1 - 0.019047619047619*G10_0_1_0 - 0.00634920634920622*G10_0_1_1 + 0.019047619047619*G10_0_2_0 - 0.00634920634920637*G10_0_2_1 + 0.0761904761904761*G10_0_3_0 + 0.0507936507936502*G10_0_3_1 + 0.152380952380952*G10_0_4_0 + 0.0507936507936497*G10_0_4_1 + 0.0507936507936507*G10_0_5_0 + 0.0507936507936502*G10_0_5_1 - 0.0126984126984127*G12_0_6_0 - 0.00634920634920631*G12_0_6_1 - 0.019047619047619*G12_0_7_0 - 0.00634920634920622*G12_0_7_1 + 0.019047619047619*G12_0_8_0 - 0.00634920634920637*G12_0_8_1 + 0.0761904761904761*G12_0_9_0 + 0.0507936507936502*G12_0_9_1 + 0.152380952380952*G12_0_10_0 + 0.0507936507936497*G12_0_10_1 + 0.0507936507936507*G12_0_11_0 + 0.0507936507936502*G12_0_11_1 - 0.00634920634920633*G13_0_6_0 - 0.00634920634920657*G13_0_6_1 + 0.00634920634920633*G13_0_7_0 + 0.0317460317460318*G13_0_8_1 + 0.0761904761904761*G13_0_9_0 + 0.0507936507936502*G13_0_9_1 - 0.0761904761904761*G13_0_10_0 - 0.025396825396825*G13_0_10_1 - 0.0507936507936508*G13_0_11_1 - 1.33333333333333*G15_0_0_0 - 0.666666666666656*G15_0_0_1 - 0.666666666666659*G15_1_0_0 - 1.33333333333333*G16_0_0_0 - 0.666666666666656*G16_0_0_1 - 0.666666666666659*G16_1_0_0 - 1.33333333333333*G23_0_0_0 - 0.666666666666656*G23_0_0_1 - 0.666666666666659*G23_1_0_0;
    A[220] = 0.0126984126984127*G10_0_0_0 + 0.0317460317460317*G10_0_0_1 + 0.019047619047619*G10_0_1_0 - 0.019047619047619*G10_0_2_0 - 0.0317460317460317*G10_0_2_1 - 0.0761904761904761*G10_0_3_0 - 0.025396825396825*G10_0_3_1 - 0.152380952380952*G10_0_4_0 - 0.0507936507936507*G10_0_5_0 + 0.0253968253968258*G10_0_5_1 + 0.0126984126984127*G12_0_6_0 + 0.0317460317460317*G12_0_6_1 + 0.019047619047619*G12_0_7_0 - 0.019047619047619*G12_0_8_0 - 0.0317460317460317*G12_0_8_1 - 0.0761904761904761*G12_0_9_0 - 0.025396825396825*G12_0_9_1 - 0.152380952380952*G12_0_10_0 - 0.0507936507936507*G12_0_11_0 + 0.0253968253968258*G12_0_11_1 - 0.0634920634920635*G13_0_6_0 - 0.0634920634920639*G13_0_6_1 - 0.0380952380952382*G13_0_7_0 + 0.0634920634920636*G13_0_8_1 + 0.152380952380952*G13_0_9_0 + 0.0507936507936497*G13_0_9_1 - 0.152380952380952*G13_0_10_0 + 0.101587301587302*G13_0_11_0 - 0.0507936507936507*G13_0_11_1 + 1.33333333333333*G15_0_0_0 + 0.666666666666659*G15_0_0_1 + 0.666666666666659*G15_1_0_0 + 1.33333333333333*G15_1_0_1 + 1.33333333333333*G16_0_0_0 + 0.666666666666659*G16_0_0_1 + 0.666666666666659*G16_1_0_0 + 1.33333333333333*G16_1_0_1 + 1.33333333333333*G23_0_0_0 + 0.666666666666659*G23_0_0_1 + 0.666666666666659*G23_1_0_0 + 1.33333333333333*G23_1_0_1;
    A[221] = 0.0253968253968254*G10_0_0_0 + 0.00634920634920635*G10_0_0_1 - 0.0126984126984127*G10_0_1_0 + 0.00634920634920636*G10_0_1_1 - 0.00634920634920635*G10_0_2_0 + 0.00634920634920636*G10_0_2_1 - 0.0507936507936508*G10_0_3_1 + 0.101587301587302*G10_0_4_0 - 0.0507936507936507*G10_0_4_1 + 0.0253968253968254*G10_0_5_0 - 0.0507936507936508*G10_0_5_1 + 0.0253968253968254*G12_0_6_0 + 0.00634920634920635*G12_0_6_1 - 0.0126984126984127*G12_0_7_0 + 0.00634920634920636*G12_0_7_1 - 0.00634920634920635*G12_0_8_0 + 0.00634920634920636*G12_0_8_1 - 0.0507936507936508*G12_0_9_1 + 0.101587301587302*G12_0_10_0 - 0.0507936507936507*G12_0_10_1 + 0.0253968253968254*G12_0_11_0 - 0.0507936507936508*G12_0_11_1 - 0.0317460317460317*G13_0_6_0 - 0.031746031746032*G13_0_6_1 + 0.0063492063492063*G13_0_7_0 + 0.00634920634920642*G13_0_8_1 + 0.0507936507936507*G13_0_9_0 + 0.0507936507936502*G13_0_9_1 - 0.0507936507936507*G13_0_10_0 + 0.0253968253968258*G13_0_10_1 + 0.0253968253968254*G13_0_11_0 - 0.0507936507936508*G13_0_11_1 + 0.666666666666665*G15_0_0_1 + 0.666666666666666*G15_1_0_0 + 0.666666666666665*G16_0_0_1 + 0.666666666666666*G16_1_0_0 + 0.666666666666665*G23_0_0_1 + 0.666666666666666*G23_1_0_0;
    A[222] = 0.0;
    A[223] = 0.0;
    A[224] = 0.0;
    A[225] = 0.0;
    A[226] = 0.0;
    A[227] = 0.0;
    A[228] = 0.166666666666666*G14_0 - 0.166666666666668*G14_1;
    A[229] = 0.166666666666666*G14_0;
    A[230] = 0.333333333333333*G14_0 + 0.166666666666665*G14_1;
    A[231] = -0.0190476190476191*G11_0_6_0 - 0.019047619047619*G11_0_6_1 - 0.0126984126984127*G11_0_7_0 - 0.00634920634920636*G11_0_8_1 - 0.00634920634920634*G11_0_9_0 - 0.0126984126984127*G11_0_9_1 + 0.00634920634920634*G11_0_10_0 + 0.0253968253968254*G11_0_10_1 + 0.0317460317460318*G11_0_11_0 + 0.0126984126984127*G11_0_11_1 - 0.666666666666668*G22_0_0_0 - 0.666666666666667*G22_0_0_1;
    A[232] = 0.0126984126984127*G11_0_6_0 + 0.0126984126984127*G11_0_6_1 + 0.0190476190476191*G11_0_7_0 - 0.00634920634920637*G11_0_8_1 - 0.00634920634920635*G11_0_9_0 + 0.019047619047619*G11_0_9_1 + 0.00634920634920635*G11_0_10_0 - 0.00634920634920631*G11_0_10_1 - 0.0317460317460318*G11_0_11_0 - 0.0190476190476191*G11_0_11_1 - 0.666666666666668*G22_0_0_0 - 0.666666666666667*G22_1_0_0;
    A[233] = 0.00793650793650793*G11_0_6_0 + 0.00793650793650799*G11_0_6_1 - 0.00793650793650793*G11_0_7_0 + 0.00476190476190476*G11_0_8_1 - 0.00634920634920632*G11_0_9_0 - 0.0190476190476189*G11_0_9_1 + 0.00634920634920632*G11_0_10_0 - 0.0126984126984128*G11_0_10_1 + 0.0190476190476191*G11_0_11_1;
    A[234] = -0.0063492063492063*G11_0_6_0 - 0.00634920634920656*G11_0_6_1 + 0.0317460317460317*G11_0_7_0 + 0.00634920634920642*G11_0_8_1 + 0.0507936507936507*G11_0_9_0 + 0.0761904761904757*G11_0_9_1 - 0.0507936507936507*G11_0_10_0 - 0.0253968253968254*G11_0_11_0 - 0.0761904761904763*G11_0_11_1 - 0.666666666666666*G22_0_0_1 - 0.666666666666665*G22_1_0_0 - 1.33333333333333*G22_1_0_1;
    A[235] = -0.0317460317460317*G11_0_6_0 - 0.031746031746032*G11_0_6_1 + 0.0063492063492063*G11_0_7_0 + 0.00634920634920642*G11_0_8_1 + 0.0507936507936507*G11_0_9_0 + 0.0507936507936502*G11_0_9_1 - 0.0507936507936507*G11_0_10_0 + 0.0253968253968258*G11_0_10_1 + 0.0253968253968254*G11_0_11_0 - 0.0507936507936508*G11_0_11_1 + 0.666666666666666*G22_0_0_1 + 0.666666666666665*G22_1_0_0;
    A[236] = -0.0634920634920634*G11_0_6_0 - 0.0634920634920639*G11_0_6_1 + 0.0634920634920634*G11_0_7_0 - 0.0380952380952381*G11_0_8_1 + 0.0507936507936507*G11_0_9_0 + 0.152380952380951*G11_0_9_1 - 0.0507936507936507*G11_0_10_0 + 0.101587301587302*G11_0_10_1 - 0.152380952380952*G11_0_11_1 + 1.33333333333334*G22_0_0_0 + 0.666666666666667*G22_0_0_1 + 0.666666666666667*G22_1_0_0 + 1.33333333333333*G22_1_0_1;
    A[237] = -0.0190476190476191*G10_0_0_0 - 0.019047619047619*G10_0_0_1 + 0.0126984126984127*G10_0_1_0 + 0.0126984126984127*G10_0_1_1 + 0.00793650793650793*G10_0_2_0 + 0.00793650793650799*G10_0_2_1 - 0.0063492063492063*G10_0_3_0 - 0.00634920634920656*G10_0_3_1 - 0.0317460317460317*G10_0_4_0 - 0.031746031746032*G10_0_4_1 - 0.0634920634920634*G10_0_5_0 - 0.0634920634920639*G10_0_5_1 - 0.0190476190476191*G12_0_6_0 - 0.019047619047619*G12_0_6_1 + 0.0126984126984127*G12_0_7_0 + 0.0126984126984127*G12_0_7_1 + 0.00793650793650793*G12_0_8_0 + 0.00793650793650799*G12_0_8_1 - 0.0063492063492063*G12_0_9_0 - 0.00634920634920656*G12_0_9_1 - 0.0317460317460317*G12_0_10_0 - 0.031746031746032*G12_0_10_1 - 0.0634920634920634*G12_0_11_0 - 0.0634920634920639*G12_0_11_1 - 0.0190476190476191*G13_0_6_0 - 0.019047619047619*G13_0_6_1 - 0.0126984126984127*G13_0_7_0 - 0.00634920634920636*G13_0_8_1 - 0.00634920634920634*G13_0_9_0 - 0.0126984126984127*G13_0_9_1 + 0.00634920634920634*G13_0_10_0 + 0.0253968253968254*G13_0_10_1 + 0.0317460317460318*G13_0_11_0 + 0.0126984126984127*G13_0_11_1 - 0.666666666666668*G15_0_0_0 - 0.666666666666667*G15_0_0_1 - 0.666666666666668*G16_0_0_0 - 0.666666666666667*G16_0_0_1 - 0.666666666666668*G23_0_0_0 - 0.666666666666667*G23_0_0_1;
    A[238] = -0.0126984126984127*G10_0_0_0 + 0.0190476190476191*G10_0_1_0 - 0.00793650793650793*G10_0_2_0 + 0.0317460317460317*G10_0_3_0 + 0.0063492063492063*G10_0_4_0 + 0.0634920634920634*G10_0_5_0 - 0.0126984126984127*G12_0_6_0 + 0.0190476190476191*G12_0_7_0 - 0.00793650793650793*G12_0_8_0 + 0.0317460317460317*G12_0_9_0 + 0.0063492063492063*G12_0_10_0 + 0.0634920634920634*G12_0_11_0 + 0.0126984126984127*G13_0_6_0 + 0.0126984126984127*G13_0_6_1 + 0.0190476190476191*G13_0_7_0 - 0.00634920634920637*G13_0_8_1 - 0.00634920634920635*G13_0_9_0 + 0.019047619047619*G13_0_9_1 + 0.00634920634920635*G13_0_10_0 - 0.00634920634920631*G13_0_10_1 - 0.0317460317460318*G13_0_11_0 - 0.0190476190476191*G13_0_11_1 - 0.666666666666668*G15_0_0_0 - 0.666666666666667*G15_1_0_0 - 0.666666666666668*G16_0_0_0 - 0.666666666666667*G16_1_0_0 - 0.666666666666668*G23_0_0_0 - 0.666666666666667*G23_1_0_0;
    A[239] = -0.00634920634920636*G10_0_0_1 - 0.00634920634920637*G10_0_1_1 + 0.00476190476190476*G10_0_2_1 + 0.00634920634920642*G10_0_3_1 + 0.00634920634920642*G10_0_4_1 - 0.0380952380952381*G10_0_5_1 - 0.00634920634920636*G12_0_6_1 - 0.00634920634920637*G12_0_7_1 + 0.00476190476190476*G12_0_8_1 + 0.00634920634920642*G12_0_9_1 + 0.00634920634920642*G12_0_10_1 - 0.0380952380952381*G12_0_11_1 + 0.00793650793650793*G13_0_6_0 + 0.00793650793650799*G13_0_6_1 - 0.00793650793650793*G13_0_7_0 + 0.00476190476190476*G13_0_8_1 - 0.00634920634920632*G13_0_9_0 - 0.0190476190476189*G13_0_9_1 + 0.00634920634920632*G13_0_10_0 - 0.0126984126984128*G13_0_10_1 + 0.0190476190476191*G13_0_11_1;
    A[240] = -0.00634920634920634*G10_0_0_0 - 0.0126984126984127*G10_0_0_1 - 0.00634920634920635*G10_0_1_0 + 0.019047619047619*G10_0_1_1 - 0.00634920634920632*G10_0_2_0 - 0.0190476190476189*G10_0_2_1 + 0.0507936507936507*G10_0_3_0 + 0.0761904761904757*G10_0_3_1 + 0.0507936507936507*G10_0_4_0 + 0.0507936507936502*G10_0_4_1 + 0.0507936507936507*G10_0_5_0 + 0.152380952380951*G10_0_5_1 - 0.00634920634920634*G12_0_6_0 - 0.0126984126984127*G12_0_6_1 - 0.00634920634920635*G12_0_7_0 + 0.019047619047619*G12_0_7_1 - 0.00634920634920632*G12_0_8_0 - 0.0190476190476189*G12_0_8_1 + 0.0507936507936507*G12_0_9_0 + 0.0761904761904757*G12_0_9_1 + 0.0507936507936507*G12_0_10_0 + 0.0507936507936502*G12_0_10_1 + 0.0507936507936507*G12_0_11_0 + 0.152380952380951*G12_0_11_1 - 0.0063492063492063*G13_0_6_0 - 0.00634920634920656*G13_0_6_1 + 0.0317460317460317*G13_0_7_0 + 0.00634920634920642*G13_0_8_1 + 0.0507936507936507*G13_0_9_0 + 0.0761904761904757*G13_0_9_1 - 0.0507936507936507*G13_0_10_0 - 0.0253968253968254*G13_0_11_0 - 0.0761904761904763*G13_0_11_1 - 0.666666666666666*G15_0_0_1 - 0.666666666666665*G15_1_0_0 - 1.33333333333333*G15_1_0_1 - 0.666666666666666*G16_0_0_1 - 0.666666666666665*G16_1_0_0 - 1.33333333333333*G16_1_0_1 - 0.666666666666666*G23_0_0_1 - 0.666666666666665*G23_1_0_0 - 1.33333333333333*G23_1_0_1;
    A[241] = 0.00634920634920634*G10_0_0_0 + 0.0253968253968254*G10_0_0_1 + 0.00634920634920635*G10_0_1_0 - 0.00634920634920631*G10_0_1_1 + 0.00634920634920632*G10_0_2_0 - 0.0126984126984128*G10_0_2_1 - 0.0507936507936507*G10_0_3_0 - 0.0507936507936507*G10_0_4_0 + 0.0253968253968258*G10_0_4_1 - 0.0507936507936507*G10_0_5_0 + 0.101587301587302*G10_0_5_1 + 0.00634920634920634*G12_0_6_0 + 0.0253968253968254*G12_0_6_1 + 0.00634920634920635*G12_0_7_0 - 0.00634920634920631*G12_0_7_1 + 0.00634920634920632*G12_0_8_0 - 0.0126984126984128*G12_0_8_1 - 0.0507936507936507*G12_0_9_0 - 0.0507936507936507*G12_0_10_0 + 0.0253968253968258*G12_0_10_1 - 0.0507936507936507*G12_0_11_0 + 0.101587301587302*G12_0_11_1 - 0.0317460317460317*G13_0_6_0 - 0.031746031746032*G13_0_6_1 + 0.0063492063492063*G13_0_7_0 + 0.00634920634920642*G13_0_8_1 + 0.0507936507936507*G13_0_9_0 + 0.0507936507936502*G13_0_9_1 - 0.0507936507936507*G13_0_10_0 + 0.0253968253968258*G13_0_10_1 + 0.0253968253968254*G13_0_11_0 - 0.0507936507936508*G13_0_11_1 + 0.666666666666666*G15_0_0_1 + 0.666666666666665*G15_1_0_0 + 0.666666666666666*G16_0_0_1 + 0.666666666666665*G16_1_0_0 + 0.666666666666666*G23_0_0_1 + 0.666666666666665*G23_1_0_0;
    A[242] = 0.0317460317460318*G10_0_0_0 + 0.0126984126984127*G10_0_0_1 - 0.0317460317460318*G10_0_1_0 - 0.0190476190476191*G10_0_1_1 + 0.0190476190476191*G10_0_2_1 - 0.0253968253968254*G10_0_3_0 - 0.0761904761904763*G10_0_3_1 + 0.0253968253968254*G10_0_4_0 - 0.0507936507936508*G10_0_4_1 - 0.152380952380952*G10_0_5_1 + 0.0317460317460318*G12_0_6_0 + 0.0126984126984127*G12_0_6_1 - 0.0317460317460318*G12_0_7_0 - 0.0190476190476191*G12_0_7_1 + 0.0190476190476191*G12_0_8_1 - 0.0253968253968254*G12_0_9_0 - 0.0761904761904763*G12_0_9_1 + 0.0253968253968254*G12_0_10_0 - 0.0507936507936508*G12_0_10_1 - 0.152380952380952*G12_0_11_1 - 0.0634920634920634*G13_0_6_0 - 0.0634920634920639*G13_0_6_1 + 0.0634920634920634*G13_0_7_0 - 0.0380952380952381*G13_0_8_1 + 0.0507936507936507*G13_0_9_0 + 0.152380952380951*G13_0_9_1 - 0.0507936507936507*G13_0_10_0 + 0.101587301587302*G13_0_10_1 - 0.152380952380952*G13_0_11_1 + 1.33333333333334*G15_0_0_0 + 0.666666666666667*G15_0_0_1 + 0.666666666666667*G15_1_0_0 + 1.33333333333333*G15_1_0_1 + 1.33333333333334*G16_0_0_0 + 0.666666666666667*G16_0_0_1 + 0.666666666666667*G16_1_0_0 + 1.33333333333333*G16_1_0_1 + 1.33333333333334*G23_0_0_0 + 0.666666666666667*G23_0_0_1 + 0.666666666666667*G23_1_0_0 + 1.33333333333333*G23_1_0_1;
    A[243] = 0.0;
    A[244] = 0.0;
    A[245] = 0.0;
    A[246] = 0.0;
    A[247] = 0.0;
    A[248] = 0.0;
    A[249] = -0.166666666666667*G14_0 + 0.166666666666667*G14_1;
    A[250] = 0.166666666666667*G14_0 + 0.333333333333333*G14_1;
    A[251] = 0.166666666666667*G14_1;
    A[252] = 0.0;
    A[253] = 0.0;
    A[254] = 0.0;
    A[255] = 0.0;
    A[256] = 0.0;
    A[257] = 0.0;
    A[258] = 0.0;
    A[259] = 0.0;
    A[260] = 0.0;
    A[261] = 0.0;
    A[262] = 0.0;
    A[263] = 0.0;
    A[264] = 0.499999999999999*G0_0_0 + 0.5*G0_0_1 + 0.5*G0_1_0 + 0.5*G0_1_1 + 0.499999999999999*G2_0_0 + 0.5*G2_0_1 + 0.5*G2_1_0 + 0.5*G2_1_1;
    A[265] = -0.499999999999999*G0_0_0 - 0.5*G0_1_0 - 0.499999999999999*G2_0_0 - 0.5*G2_1_0;
    A[266] = -0.5*G0_0_1 - 0.5*G0_1_1 - 0.5*G2_0_1 - 0.5*G2_1_1;
    A[267] = 0.0;
    A[268] = 0.0;
    A[269] = 0.0;
    A[270] = 0.0;
    A[271] = 0.0;
    A[272] = 0.0;
    A[273] = 0.0;
    A[274] = 0.0;
    A[275] = 0.0;
    A[276] = 0.0;
    A[277] = 0.0;
    A[278] = 0.0;
    A[279] = 0.0;
    A[280] = 0.0;
    A[281] = 0.0;
    A[282] = 0.0;
    A[283] = 0.0;
    A[284] = 0.0;
    A[285] = -0.499999999999999*G0_0_0 - 0.5*G0_0_1 - 0.499999999999999*G2_0_0 - 0.5*G2_0_1;
    A[286] = 0.499999999999999*G0_0_0 + 0.499999999999999*G2_0_0;
    A[287] = 0.5*G0_0_1 + 0.5*G2_0_1;
    A[288] = 0.0;
    A[289] = 0.0;
    A[290] = 0.0;
    A[291] = 0.0;
    A[292] = 0.0;
    A[293] = 0.0;
    A[294] = 0.0;
    A[295] = 0.0;
    A[296] = 0.0;
    A[297] = 0.0;
    A[298] = 0.0;
    A[299] = 0.0;
    A[300] = 0.0;
    A[301] = 0.0;
    A[302] = 0.0;
    A[303] = 0.0;
    A[304] = 0.0;
    A[305] = 0.0;
    A[306] = -0.5*G0_1_0 - 0.5*G0_1_1 - 0.5*G2_1_0 - 0.5*G2_1_1;
    A[307] = 0.5*G0_1_0 + 0.5*G2_1_0;
    A[308] = 0.5*G0_1_1 + 0.5*G2_1_1;
    A[309] = 0.0;
    A[310] = 0.0;
    A[311] = 0.0;
    A[312] = 0.0;
    A[313] = 0.0;
    A[314] = 0.0;
    A[315] = 0.0;
    A[316] = 0.0;
    A[317] = 0.0;
    A[318] = 0.0;
    A[319] = 0.0;
    A[320] = 0.0;
    A[321] = 0.0;
    A[322] = 0.0;
    A[323] = 0.0;
    A[324] = 0.0;
    A[325] = 0.0;
    A[326] = 0.0;
    A[327] = 0.0;
    A[328] = 0.0;
    A[329] = 0.0;
    A[330] = 0.499999999999999*G1_0_0 + 0.5*G1_0_1 + 0.5*G1_1_0 + 0.5*G1_1_1 + 0.499999999999999*G3_0_0 + 0.5*G3_0_1 + 0.5*G3_1_0 + 0.5*G3_1_1;
    A[331] = -0.499999999999999*G1_0_0 - 0.5*G1_1_0 - 0.499999999999999*G3_0_0 - 0.5*G3_1_0;
    A[332] = -0.5*G1_0_1 - 0.5*G1_1_1 - 0.5*G3_0_1 - 0.5*G3_1_1;
    A[333] = 0.0;
    A[334] = 0.0;
    A[335] = 0.0;
    A[336] = 0.0;
    A[337] = 0.0;
    A[338] = 0.0;
    A[339] = 0.0;
    A[340] = 0.0;
    A[341] = 0.0;
    A[342] = 0.0;
    A[343] = 0.0;
    A[344] = 0.0;
    A[345] = 0.0;
    A[346] = 0.0;
    A[347] = 0.0;
    A[348] = 0.0;
    A[349] = 0.0;
    A[350] = 0.0;
    A[351] = -0.499999999999999*G1_0_0 - 0.5*G1_0_1 - 0.499999999999999*G3_0_0 - 0.5*G3_0_1;
    A[352] = 0.499999999999999*G1_0_0 + 0.499999999999999*G3_0_0;
    A[353] = 0.5*G1_0_1 + 0.5*G3_0_1;
    A[354] = 0.0;
    A[355] = 0.0;
    A[356] = 0.0;
    A[357] = 0.0;
    A[358] = 0.0;
    A[359] = 0.0;
    A[360] = 0.0;
    A[361] = 0.0;
    A[362] = 0.0;
    A[363] = 0.0;
    A[364] = 0.0;
    A[365] = 0.0;
    A[366] = 0.0;
    A[367] = 0.0;
    A[368] = 0.0;
    A[369] = 0.0;
    A[370] = 0.0;
    A[371] = 0.0;
    A[372] = -0.5*G1_1_0 - 0.5*G1_1_1 - 0.5*G3_1_0 - 0.5*G3_1_1;
    A[373] = 0.5*G1_1_0 + 0.5*G3_1_0;
    A[374] = 0.5*G1_1_1 + 0.5*G3_1_1;
    A[375] = 0.0;
    A[376] = 0.0;
    A[377] = 0.0;
    A[378] = -0.166666666666667*G4_0 - 0.166666666666668*G4_1;
    A[379] = 0.0;
    A[380] = 0.0;
    A[381] = 0.166666666666666*G4_0 + 0.166666666666665*G4_1;
    A[382] = -0.166666666666666*G4_0 + 0.166666666666668*G4_1;
    A[383] = 0.166666666666667*G4_0 - 0.166666666666667*G4_1;
    A[384] = -0.166666666666667*G5_0 - 0.166666666666668*G5_1;
    A[385] = 0.0;
    A[386] = 0.0;
    A[387] = 0.166666666666666*G5_0 + 0.166666666666665*G5_1;
    A[388] = -0.166666666666666*G5_0 + 0.166666666666668*G5_1;
    A[389] = 0.166666666666667*G5_0 - 0.166666666666667*G5_1;
    A[390] = 0.0;
    A[391] = 0.0;
    A[392] = 0.0;
    A[393] = 0.0;
    A[394] = 0.0;
    A[395] = 0.0;
    A[396] = 0.0;
    A[397] = 0.0;
    A[398] = 0.0;
    A[399] = 0.0;
    A[400] = 0.166666666666667*G4_0;
    A[401] = 0.0;
    A[402] = 0.166666666666666*G4_0 + 0.333333333333331*G4_1;
    A[403] = -0.166666666666666*G4_0;
    A[404] = -0.166666666666667*G4_0 - 0.333333333333333*G4_1;
    A[405] = 0.0;
    A[406] = 0.166666666666667*G5_0;
    A[407] = 0.0;
    A[408] = 0.166666666666666*G5_0 + 0.333333333333331*G5_1;
    A[409] = -0.166666666666666*G5_0;
    A[410] = -0.166666666666667*G5_0 - 0.333333333333333*G5_1;
    A[411] = 0.0;
    A[412] = 0.0;
    A[413] = 0.0;
    A[414] = 0.0;
    A[415] = 0.0;
    A[416] = 0.0;
    A[417] = 0.0;
    A[418] = 0.0;
    A[419] = 0.0;
    A[420] = 0.0;
    A[421] = 0.0;
    A[422] = 0.166666666666667*G4_1;
    A[423] = 0.333333333333333*G4_0 + 0.166666666666664*G4_1;
    A[424] = -0.333333333333333*G4_0 - 0.166666666666665*G4_1;
    A[425] = -0.166666666666667*G4_1;
    A[426] = 0.0;
    A[427] = 0.0;
    A[428] = 0.166666666666667*G5_1;
    A[429] = 0.333333333333333*G5_0 + 0.166666666666664*G5_1;
    A[430] = -0.333333333333333*G5_0 - 0.166666666666665*G5_1;
    A[431] = -0.166666666666667*G5_1;
    A[432] = 0.0;
    A[433] = 0.0;
    A[434] = 0.0;
    A[435] = 0.0;
    A[436] = 0.0;
    A[437] = 0.0;
    A[438] = 0.0;
    A[439] = 0.0;
    A[440] = 0.0;
  }

};


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_2: public ufc::cell_integral
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_2() : ufc::cell_integral()
  {
    
  }

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_2() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, false, false, true, true, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W100[100] = {0.00100338733149811, 0.00214305550645421, 0.00287391164244473, 0.00309011325737211, 0.00281876808697729, 0.00220192367176984, 0.00144683172286484, 0.000759206314136439, 0.000280663684048605, 4.99748596351734e-05, 0.00224920604148448, 0.00480390098722555, 0.00644219757013291, 0.00692683791111401, 0.00631858706179499, 0.00493586062925265, 0.00324323673413364, 0.00170184670952471, 0.000629139350249611, 0.000112024292798222, 0.00329719586325924, 0.00704221941896127, 0.00944386009408088, 0.0101543126262094, 0.00926265479353039, 0.00723566402909657, 0.00475438290050921, 0.00249480119964587, 0.000922279073057938, 0.000164220630740906, 0.0040523978892458, 0.00865519559423296, 0.0116069169981781, 0.012480094225436, 0.0113842077604123, 0.00889294747865494, 0.00584334447503674, 0.0030662197621282, 0.00113352130839481, 0.000201834335897545, 0.00444756688655733, 0.00949920574772376, 0.0127387638398271, 0.0136970888188116, 0.012494337142773, 0.0097601419729592, 0.00641315737106899, 0.00336522174121631, 0.00124405647574803, 0.000221516182132668, 0.00444756688655733, 0.00949920574772376, 0.0127387638398271, 0.0136970888188116, 0.012494337142773, 0.0097601419729592, 0.00641315737106899, 0.00336522174121631, 0.00124405647574803, 0.000221516182132668, 0.0040523978892458, 0.00865519559423296, 0.0116069169981781, 0.012480094225436, 0.0113842077604123, 0.00889294747865494, 0.00584334447503674, 0.0030662197621282, 0.00113352130839481, 0.000201834335897545, 0.00329719586325924, 0.00704221941896127, 0.00944386009408088, 0.0101543126262094, 0.00926265479353039, 0.00723566402909657, 0.00475438290050921, 0.00249480119964587, 0.000922279073057938, 0.000164220630740906, 0.00224920604148448, 0.00480390098722554, 0.0064421975701329, 0.006926837911114, 0.00631858706179498, 0.00493586062925264, 0.00324323673413364, 0.00170184670952471, 0.000629139350249611, 0.000112024292798222, 0.00100338733149811, 0.00214305550645421, 0.00287391164244473, 0.00309011325737211, 0.00281876808697729, 0.00220192367176984, 0.00144683172286484, 0.000759206314136439, 0.000280663684048605, 4.99748596351734e-05};
    // Quadrature points on the UFC reference element: (0.0128912497882931, 0.0119176134324156), (0.012241333712863, 0.0617320718771481), (0.0111274115333846, 0.14711144964307), (0.00963945446221848, 0.261159676008456), (0.00789797394606312, 0.394639846885787), (0.00604404690294913, 0.536738765715661), (0.00422786697404626, 0.675944461676665), (0.00259657542420272, 0.800978921036899), (0.00128235076858657, 0.901710987790147), (0.000391780847181333, 0.969970967838514), (0.0666642553386717, 0.0119176134324156), (0.0633033576822998, 0.0617320718771481), (0.0575429547873383, 0.14711144964307), (0.0498483129369194, 0.261159676008456), (0.0408426305009364, 0.394639846885787), (0.0312554556489172, 0.536738765715661), (0.0218634816735698, 0.675944461676665), (0.0134276171766033, 0.800978921036899), (0.00663139419953146, 0.901710987790147), (0.00202600825072957, 0.969970967838514), (0.158384879432916, 0.0119176134324156), (0.150399860064042, 0.0617320718771481), (0.136713954275874, 0.14711144964307), (0.118432569213269, 0.261159676008456), (0.0970363364107271, 0.394639846885787), (0.0742585595447716, 0.536738765715661), (0.051944552463085, 0.675944461676665), (0.0319021268111873, 0.800978921036899), (0.0157552584279096, 0.901710987790147), (0.00481351019210674, 0.969970967838514), (0.279926015604479, 0.0119176134324156), (0.265813464807608, 0.0617320718771481), (0.241625290463333, 0.14711144964307), (0.209315165288324, 0.261159676008456), (0.171499925482569, 0.394639846885787), (0.131242974533438, 0.536738765715661), (0.0918056802859639, 0.675944461676665), (0.0563831300029299, 0.800978921036899), (0.0278455035122948, 0.901710987790147), (0.00850729396626959, 0.969970967838514), (0.420491137203971, 0.0119176134324156), (0.399291955267949, 0.0617320718771481), (0.36295766559877, 0.14711144964307), (0.314422979572164, 0.261159676008456), (0.257618780236758, 0.394639846885787), (0.197146762127222, 0.536738765715661), (0.137905992131056, 0.675944461676665), (0.0846959736945292, 0.800978921036899), (0.041828150243977, 0.901710987790147), (0.0127792399240935, 0.969970967838514), (0.567591249363613, 0.0119176134324156), (0.538975972854903, 0.0617320718771481), (0.48993088475816, 0.14711144964307), (0.42441734441938, 0.261159676008456), (0.347741372877455, 0.394639846885787), (0.266114472157117, 0.536738765715661), (0.186149546192279, 0.675944461676665), (0.114325105268572, 0.800978921036899), (0.0564608619658763, 0.901710987790147), (0.017249792237393, 0.969970967838514), (0.708156370963105, 0.0119176134324156), (0.672454463315244, 0.0617320718771481), (0.611263259893597, 0.14711144964307), (0.52952515870322, 0.261159676008456), (0.433860227631644, 0.394639846885787), (0.332018259750901, 0.536738765715661), (0.232249858037371, 0.675944461676665), (0.142637948960171, 0.800978921036899), (0.0704435086975584, 0.901710987790147), (0.0215217381952169, 0.969970967838514), (0.829697507134668, 0.0119176134324156), (0.787868068058809, 0.0617320718771481), (0.716174596081056, 0.14711144964307), (0.620407754778275, 0.261159676008456), (0.508323816703486, 0.394639846885787), (0.389002674739568, 0.536738765715661), (0.27211098586025, 0.675944461676665), (0.167118952151914, 0.800978921036899), (0.0825337537819436, 0.901710987790147), (0.0252155219693798, 0.969970967838514), (0.921418131228913, 0.0119176134324156), (0.874964570440552, 0.0617320718771481), (0.795345595569591, 0.14711144964307), (0.688992011054624, 0.261159676008456), (0.564517522613277, 0.394639846885787), (0.432005778635422, 0.536738765715661), (0.302192056649765, 0.675944461676665), (0.185593461786498, 0.800978921036899), (0.0916576180103218, 0.901710987790147), (0.0280030239107569, 0.969970967838514), (0.975191136779291, 0.0119176134324156), (0.926026594409989, 0.0617320718771481), (0.841761138823545, 0.14711144964307), (0.729200869529325, 0.261159676008456), (0.59746217916815, 0.394639846885787), (0.45721718738139, 0.536738765715661), (0.319827671349289, 0.675944461676665), (0.196424503538899, 0.800978921036899), (0.0970066614412667, 0.901710987790147), (0.0296372513143052, 0.969970967838514)
    
    // Values of basis functions at quadrature points.
    static const double FE0_C0[100][21] = \
    {{0.926804369726482, -0.0125588811460848, -0.0116335544125666, 0.000614531726550321, 0.046487803963414, 0.0502857301422051, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.789023912699135, -0.0119416332107237, -0.0541103744806573, 0.00302273157053858, 0.228662161145072, 0.0453432022766349, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.575362490843478, -0.010879772958518, -0.103827892410899, 0.00654787856580487, 0.495330805542134, 0.0374664904180003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.334266946715323, -0.00945361629756012, -0.124750923262773, 0.010069747217005, 0.761751451325452, 0.0281163943025522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.116459931904559, -0.00777321796115784, -0.0831586293857123, 0.0124674209151293, 0.943129531627869, 0.0188749628993127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0391220745074916, -0.0059709858970191, 0.039438239528281, 0.012976297098466, 0.981624755276293, 0.0110537685014705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.115248192627871, -0.00419211725574579, 0.237857368866048, 0.011431213063249, 0.864742972557985, 0.00540875539633523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.119259332357893, -0.0025830910163356, 0.48215554285397, 0.00831920872667533, 0.629327547639181, 0.00204012415440143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0781860767133055, -0.00127906192159918, 0.724454423212818, 0.00462523911294266, 0.349887890041715, 0.000497586267429018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0278805179833705, -0.000391473862716873, 0.911716389060652, 0.00152006419008421, 0.114989093365639, 4.64452297123108e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.776604613885851, -0.0577760094589524, -0.0116335544125666, 0.00317791529954456, 0.0439244203904197, 0.245702614295703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.656161428611888, -0.0552887274945935, -0.0541103744806574, 0.0156313897060343, 0.216053503009577, 0.221552780647752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.469803637214305, -0.050920571496023, -0.103827892410899, 0.0338609099820439, 0.468017774125895, 0.183066142584679, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.260427971539567, -0.0448786043316053, -0.124750923262773, 0.0520734770246961, 0.719747721517761, 0.137380357512353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0728425440615862, -0.0375063895684644, -0.0831586293857123, 0.0644725177892092, 0.891124434753789, 0.0922255223495923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0587477930866273, -0.0293016486332743, 0.039438239528281, 0.0671040587475214, 0.927496993627237, 0.0540101498168615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.119551978445335, -0.0209074580117887, 0.237857368866048, 0.059113997400875, 0.817060188220359, 0.0264278819698421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.116703595670705, -0.0130670153705205, 0.48215554285397, 0.043020953272849, 0.594625803093008, 0.00996831182139876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0748553801316696, -0.00654344342147228, 0.724454423212818, 0.0239184040563415, 0.330594725098316, 0.00243127118566616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0264346852144639, -0.00201779883186551, 0.911716389060652, 0.00786067673523594, 0.108648480820487, 0.000226937429954416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.547098399556298, -0.108213339366957, -0.0116335544125666, 0.00755027906648506, 0.0395520566234793, 0.525646158533261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.453604117274632, -0.105159624249475, -0.0541103744806574, 0.037137979887146, 0.194546912828465, 0.473980988739889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.309637508062672, -0.0993325436883823, -0.103827892410899, 0.0804487519998408, 0.421429932108098, 0.391644243928671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.149403809599765, -0.0903800223123574, -0.124750923262773, 0.123719245618345, 0.648101952924112, 0.293905937432907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00846238855251252, -0.0782042352426956, -0.0831586293857123, 0.153177619773948, 0.80241933276905, 0.197303523532897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0863565128304918, -0.0632298922134428, 0.039438239528281, 0.159429790375534, 0.835171261999225, 0.115547113140894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124022208608576, -0.0465480794019046, 0.237857368866048, 0.140446530206781, 0.735727655414453, 0.0565387335231982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.111261463815206, -0.0298666354210331, 0.48215554285397, 0.102211724448028, 0.535435031917828, 0.0213258000164125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0689101127552665, -0.0152588020916492, 0.724454423212818, 0.0568267585596778, 0.29768637059498, 0.00520136247944004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0239438768730031, -0.00476717043136768, 0.911716389060652, 0.0186758605589532, 0.0978332969967699, 0.000485500687995744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.294814520508164, -0.123208867180081, -0.0116335544125666, 0.0133442001746021, 0.0337581355153622, 0.792925565394519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.231935547149941, -0.124499868661557, -0.0541103744806574, 0.0656368636616683, 0.166048029053943, 0.714989803276662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.136022285897897, -0.124859728480353, -0.103827892410899, 0.142183387001955, 0.359695297105983, 0.590786650885416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0312686286961205, -0.121689488448967, -0.124750923262773, 0.218658723001421, 0.553162475541037, 0.443350584473162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0573908333904797, -0.112675476601516, -0.0831586293857123, 0.270722817333459, 0.684874135209539, 0.297627986834709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.111546010134867, -0.0967935378046688, 0.039438239528281, 0.281772768639718, 0.712828283735041, 0.174300256036496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124369864920613, -0.0749491144204267, 0.237857368866048, 0.248222164559024, 0.62795202106221, 0.0852874248537577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.101946779993042, -0.0500250153050754, 0.48215554285397, 0.18064679453772, 0.456999961828137, 0.0321694960782906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0605189328623124, -0.0262947593805883, 0.724454423212818, 0.100434385910341, 0.254078743244317, 0.00784613987542511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0205953677653299, -0.00836254586501251, 0.911716389060652, 0.033007312648597, 0.0835018449071261, 0.000732367013967339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0767284033446813, -0.0668655442697932, -0.0116335544125666, 0.0200450032998151, 0.0270573323901493, 0.954668359647714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0420142257748753, -0.0804238241845455, -0.0541103744806573, 0.0985964787302721, 0.133088413985339, 0.860835080174717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00986634107833336, -0.0994811315649528, -0.103827892410899, 0.213580913381199, 0.288297770726739, 0.711296680946247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.064157179931383, -0.116699359406089, -0.124750923262773, 0.328458413898719, 0.443362784643738, 0.533786264057787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.10589324805606, -0.124883908375408, -0.0831586293857123, 0.406666543950149, 0.548930408592849, 0.358338833274183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124480647574195, -0.119413070492727, 0.039438239528281, 0.423265239076016, 0.571335813298743, 0.209854426163882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.116846239097096, -0.0998698667997542, 0.237857368866048, 0.372867166452052, 0.503307019169182, 0.102684551409568, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0881846458792318, -0.0703491577744005, 0.48215554285397, 0.271358758504054, 0.366287997861802, 0.0387315044338052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0500852040980167, -0.0383289619383115, 0.724454423212818, 0.150867610695725, 0.203645518458933, 0.00944661366885256, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0166546815729264, -0.0124526219780184, 0.911716389060652, 0.0495819668696541, 0.0669271906860689, 0.000881756934569766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0668655442697932, 0.0767284033446813, -0.0116335544125666, 0.0270573323901495, 0.0200450032998149, 0.954668359647714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0804238241845455, 0.0420142257748754, -0.0541103744806573, 0.133088413985339, 0.0985964787302721, 0.860835080174717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0994811315649528, -0.00986634107833343, -0.103827892410899, 0.288297770726739, 0.213580913381199, 0.711296680946247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.116699359406089, -0.0641571799313831, -0.124750923262773, 0.443362784643738, 0.328458413898719, 0.533786264057787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124883908375408, -0.10589324805606, -0.0831586293857123, 0.548930408592849, 0.406666543950149, 0.358338833274183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.119413070492727, -0.124480647574195, 0.039438239528281, 0.571335813298743, 0.423265239076016, 0.209854426163882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0998698667997541, -0.116846239097096, 0.237857368866048, 0.503307019169182, 0.372867166452052, 0.102684551409568, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0703491577744004, -0.0881846458792318, 0.48215554285397, 0.366287997861802, 0.271358758504054, 0.0387315044338052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0383289619383114, -0.0500852040980168, 0.724454423212818, 0.203645518458934, 0.150867610695724, 0.00944661366885256, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0124526219780183, -0.0166546815729265, 0.911716389060652, 0.0669271906860693, 0.0495819668696538, 0.000881756934569766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.123208867180081, 0.294814520508164, -0.0116335544125666, 0.0337581355153624, 0.013344200174602, 0.792925565394519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124499868661557, 0.231935547149941, -0.0541103744806573, 0.166048029053943, 0.0656368636616682, 0.714989803276663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.124859728480353, 0.136022285897897, -0.103827892410899, 0.359695297105983, 0.142183387001955, 0.590786650885417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.121689488448967, 0.0312686286961202, -0.124750923262773, 0.553162475541037, 0.218658723001421, 0.443350584473162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.112675476601515, -0.0573908333904799, -0.0831586293857123, 0.684874135209539, 0.270722817333459, 0.297627986834709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0967935378046688, -0.111546010134867, 0.039438239528281, 0.712828283735041, 0.281772768639718, 0.174300256036496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0749491144204266, -0.124369864920613, 0.237857368866048, 0.62795202106221, 0.248222164559024, 0.0852874248537577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0500250153050753, -0.101946779993042, 0.48215554285397, 0.456999961828137, 0.18064679453772, 0.0321694960782906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0262947593805882, -0.0605189328623124, 0.724454423212818, 0.254078743244317, 0.100434385910341, 0.00784613987542511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00836254586501242, -0.02059536776533, 0.911716389060652, 0.0835018449071265, 0.0330073126485966, 0.000732367013967339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.108213339366957, 0.547098399556298, -0.0116335544125666, 0.0395520566234794, 0.00755027906648492, 0.525646158533261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.105159624249475, 0.453604117274632, -0.0541103744806574, 0.194546912828465, 0.0371379798871459, 0.473980988739889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0993325436883822, 0.309637508062672, -0.103827892410899, 0.421429932108098, 0.0804487519998407, 0.391644243928671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0903800223123573, 0.149403809599765, -0.124750923262773, 0.648101952924112, 0.123719245618345, 0.293905937432907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0782042352426954, 0.00846238855251247, -0.0831586293857123, 0.80241933276905, 0.153177619773948, 0.197303523532897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0632298922134427, -0.0863565128304918, 0.039438239528281, 0.835171261999225, 0.159429790375534, 0.115547113140895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0465480794019045, -0.124022208608576, 0.237857368866048, 0.735727655414453, 0.140446530206781, 0.0565387335231982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0298666354210331, -0.111261463815207, 0.48215554285397, 0.535435031917828, 0.102211724448028, 0.0213258000164125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0152588020916491, -0.0689101127552667, 0.724454423212818, 0.297686370594981, 0.0568267585596774, 0.00520136247944003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00476717043136757, -0.0239438768730032, 0.911716389060652, 0.0978332969967703, 0.0186758605589529, 0.000485500687995744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0577760094589522, 0.776604613885852, -0.0116335544125666, 0.0439244203904198, 0.00317791529954448, 0.245702614295703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0552887274945933, 0.656161428611888, -0.0541103744806573, 0.216053503009577, 0.0156313897060341, 0.221552780647752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0509205714960229, 0.469803637214305, -0.103827892410899, 0.468017774125895, 0.0338609099820438, 0.183066142584679, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0448786043316052, 0.260427971539567, -0.124750923262773, 0.719747721517762, 0.0520734770246959, 0.137380357512353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0375063895684642, 0.0728425440615861, -0.0831586293857123, 0.891124434753789, 0.0644725177892091, 0.0922255223495923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0293016486332742, -0.0587477930866274, 0.039438239528281, 0.927496993627238, 0.0671040587475213, 0.0540101498168615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0209074580117886, -0.119551978445335, 0.237857368866048, 0.817060188220359, 0.0591139974008749, 0.0264278819698421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0130670153705204, -0.116703595670705, 0.48215554285397, 0.594625803093008, 0.0430209532728489, 0.00996831182139876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00654344342147214, -0.0748553801316697, 0.724454423212818, 0.330594725098317, 0.023918404056341, 0.00243127118566625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0020177988318654, -0.026434685214464, 0.911716389060652, 0.108648480820488, 0.00786067673523538, 0.000226937429954416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0125588811460846, 0.926804369726482, -0.0116335544125666, 0.0464878039634141, 0.000614531726550238, 0.0502857301422048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0119416332107235, 0.789023912699135, -0.0541103744806573, 0.228662161145072, 0.0030227315705384, 0.0453432022766346, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0108797729585179, 0.575362490843478, -0.103827892410899, 0.495330805542134, 0.00654787856580476, 0.0374664904180003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00945361629755996, 0.334266946715323, -0.124750923262773, 0.761751451325453, 0.0100697472170049, 0.0281163943025522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00777321796115767, 0.116459931904559, -0.0831586293857123, 0.943129531627869, 0.0124674209151292, 0.0188749628993127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00597098589701897, -0.0391220745074917, 0.039438239528281, 0.981624755276293, 0.0129762970984659, 0.0110537685014706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00419211725574569, -0.115248192627872, 0.237857368866048, 0.864742972557985, 0.0114312130632489, 0.00540875539633523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00258309101633541, -0.119259332357893, 0.48215554285397, 0.629327547639182, 0.00831920872667505, 0.00204012415440138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00127906192159902, -0.0781860767133056, 0.724454423212818, 0.349887890041716, 0.00462523911294216, 0.000497586267429073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000391473862716762, -0.0278805179833705, 0.911716389060652, 0.114989093365639, 0.00152006419008388, 4.64452297123386e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C0_D01[100][21] = \
    {{-2.90076454711717, 0.0, -0.952329546270338, 0.0515649991531626, 3.85309409338751, -0.0515649991531699, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.70410637763996, 0.0, -0.753071712491408, 0.0489653348514421, 3.45717809013137, -0.0489653348514504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.36704455529419, 0.0, -0.411554201427719, 0.0445096461335286, 2.77859875672191, -0.0445096461335371, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.91680347811731, 0.0, 0.0446387040338259, 0.0385578178488636, 1.87216477408348, -0.0385578178488729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.38984871667261, 0.0, 0.578559387543149, 0.0315918957842414, 0.811289329129461, -0.031591895784252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.828868749525567, 0.0, 1.14695506286264, 0.0241761876117847, -0.318086313337073, -0.0241761876117956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.27931068539716, 0.0, 1.70377784670666, 0.0169114678961717, -1.4244671613095, -0.0169114678961836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.214301985844401, 0.0, 2.2039156841476, 0.0103863016967962, -2.41821766999199, -0.0103863016968087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.611973354234928, 0.0, 2.60684395116059, 0.00512940307433052, -3.21881730539551, -0.00512940307434306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.881450994742775, 0.0, 2.87988387135406, 0.00156712338870868, -3.76133486609683, -0.00156712338872145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.68567252491566, 0.0, -0.952329546270337, 0.266657021354677, 3.638002071186, -0.266657021354684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.49985828176221, 0.0, -0.753071712491407, 0.253213430729189, 3.25292999425362, -0.253213430729197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.18138238227837, 0.0, -0.411554201427719, 0.230171819149343, 2.59293658370609, -0.230171819149352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.7559680442185, 0.0, 0.0446387040338259, 0.199393251747667, 1.71132934018468, -0.199393251747677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.25807009045311, 0.0, 0.578559387543149, 0.163370522003734, 0.679510702909968, -0.163370522003745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.728023114541694, 0.0, 1.14695506286264, 0.125021822595656, -0.418931948320945, -0.125021822595668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.208768226599066, 0.0, 1.70377784670666, 0.0874539266942658, -1.49500962010759, -0.0874539266942778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.257626152854003, 0.0, 2.2039156841476, 0.0537104687063987, -2.4615418370016, -0.0537104687064111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.633369527958708, 0.0, 2.60684395116059, 0.0265255767981101, -3.24021347911929, -0.0265255767981226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.887987904356968, 0.0, 2.87988387135406, 0.00810403300290208, -3.76787177571102, -0.0081040330029144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.31879002853868, 0.0, -0.952329546270337, 0.633539517731654, 3.27111957480902, -0.633539517731663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.15147227223524, 0.0, -0.753071712491407, 0.60159944025616, 2.90454398472665, -0.601599440256168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86469838432423, 0.0, -0.411554201427718, 0.546855817103484, 2.27625258575195, -0.546855817103494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.4816310191131, 0.0, 0.0446387040338261, 0.473730276853065, 1.43699231507928, -0.473730276853075, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.03329526681395, 0.0, 0.578559387543149, 0.388145345642897, 0.454735879270805, -0.388145345642908, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.556010698958277, 0.0, 1.14695506286264, 0.297034238179074, -0.590944363904363, -0.297034238179086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0884439434410049, 0.0, 1.70377784670666, 0.207778209852326, -1.61533390326565, -0.207778209852339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.331524191392339, 0.0, 2.2039156841476, 0.127608507244734, -2.53543987553993, -0.127608507244747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.669864984872221, 0.0, 2.60684395116059, 0.0630210337116228, -3.2767089360328, -0.0630210337116354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.899137912122476, 0.0, 2.87988387135406, 0.0192540407684105, -3.77902178347653, -0.0192540407684231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.83262548385242, 0.0, -0.952329546270337, 1.11970406241791, 2.78495503012277, -1.11970406241792, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.68981785326098, 0.0, -0.753071712491407, 1.06325385923042, 2.44288956575239, -1.06325385923043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.44505303957439, 0.0, -0.411554201427718, 0.966501161853321, 1.85660724100211, -0.966501161853332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.11810063481288, 0.0, 0.0446387040338262, 0.837260661153284, 1.07346193077906, -0.837260661153296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.735440910526583, 0.0, 0.578559387543149, 0.685999701930262, 0.15688152298344, -0.685999701930275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.32807303900361, 0.0, 1.14695506286264, 0.52497189813374, -0.818882023859029, -0.524971898133753, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0710005678505108, 0.0, 1.70377784670666, 0.367222721143842, -1.77477841455717, -0.367222721143855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.42944820415931, 0.0, 2.2039156841476, 0.225532520011705, -2.6333638883069, -0.225532520011718, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.718225965209761, 0.0, 2.60684395116059, 0.111382014049163, -3.32506991637034, -0.111382014049176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.913913047219128, 0.0, 2.87988387135406, 0.0340291758650624, -3.79379691857318, -0.0340291758650746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.27036499745446, 0.0, -0.952329546270337, 1.68196454881587, 2.2226945437248, -1.68196454881589, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.15590389141962, 0.0, -0.753071712491407, 1.59716782107178, 1.90897560391103, -1.5971678210718, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.959723539032643, 0.0, -0.411554201427718, 1.45183066239507, 1.37127774046037, -1.45183066239508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.697669377677523, 0.0, 0.0446387040338264, 1.25769191828865, 0.653030673643702, -1.25769191828866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.390965491509826, 0.0, 0.578559387543149, 1.03047512094702, -0.187593896033317, -1.03047512094703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0644578886284753, 0.0, 1.14695506286264, 0.788587048508874, -1.08249717423416, -0.788587048508888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.255401815230879, 0.0, 1.70377784670666, 0.551623968524209, -1.95917966193754, -0.551623968524223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.542699578925707, 0.0, 2.2039156841476, 0.338783894778102, -2.7466152630733, -0.338783894778115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.77415655213649, 0.0, 2.60684395116059, 0.167312600975892, -3.38100050329707, -0.167312600975905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.931000831050423, 0.0, 2.87988387135406, 0.0511169596963574, -3.81088470240447, -0.0511169596963702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.68196454881589, 0.0, -0.952329546270337, 2.27036499745444, 1.63429409508623, -2.27036499745445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.5971678210718, 0.0, -0.753071712491407, 2.1559038914196, 1.35023953356321, -2.15590389141961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.451830662395085, 0.0, -0.411554201427718, 1.95972353903263, 0.863384863822809, -1.95972353903264, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.257691918288662, 0.0, 0.0446387040338264, 1.69766937767751, 0.213053214254842, -1.69766937767752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0304751209470362, 0.0, 0.578559387543149, 1.39096549150981, -0.548084266596107, -1.39096549150982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.211412951491107, 0.0, 1.14695506286264, 1.06445788862846, -1.35836801435374, -1.06445788862847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.448376031475771, 0.0, 1.70377784670666, 0.744598184769101, -2.15215387818243, -0.744598184769115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.661216105221878, 0.0, 2.2039156841476, 0.457300421074272, -2.86513178936947, -0.457300421074286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.832687399024087, 0.0, 2.60684395116059, 0.225843447863489, -3.43953135018467, -0.225843447863502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.948883040303621, 0.0, 2.87988387135406, 0.0689991689495555, -3.82876691165767, -0.0689991689495681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.119704062417923, 0.0, -0.952329546270337, 2.83262548385241, 1.07203360868827, -2.83262548385242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0632538592304381, 0.0, -0.753071712491407, 2.68981785326096, 0.816325571721852, -2.68981785326098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0334988381466625, 0.0, -0.411554201427718, 2.44505303957437, 0.378055363281062, -2.44505303957439, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.162739338846699, 0.0, 0.0446387040338263, 2.11810063481286, -0.207378042880518, -2.11810063481288, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.31400029806972, 0.0, 0.578559387543149, 1.73544091052656, -0.892559685612862, -1.73544091052658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.475028101866241, 0.0, 1.14695506286264, 1.32807303900359, -1.62198316472888, -1.3280730390036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.632777278856139, 0.0, 1.70377784670666, 0.928999432149469, -2.33655512556279, -0.928999432149483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.774467479988275, 0.0, 2.2039156841476, 0.570551795840669, -2.97838316413587, -0.570551795840683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.888617985950816, 0.0, 2.60684395116059, 0.281774034790218, -3.4954619371114, -0.281774034790231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.965970824134917, 0.0, 2.87988387135406, 0.0860869527808514, -3.84585469548897, -0.0860869527808639, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.366460482268331, 0.0, -0.952329546270338, 3.31879002853866, 0.585869064002013, -3.31879002853867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.398400559743826, 0.0, -0.753071712491407, 3.15147227223522, 0.354671152747588, -3.15147227223524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.453144182896501, 0.0, -0.411554201427718, 2.86469838432421, -0.0415899814687752, -2.86469838432423, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.52626972314692, 0.0, 0.0446387040338264, 2.48163101911309, -0.570908427180739, -2.4816310191131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.611854654357086, 0.0, 0.578559387543149, 2.03329526681393, -1.19041404190023, -2.03329526681395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.702965761820908, 0.0, 1.14695506286264, 1.55601069895826, -1.84992082468355, -1.55601069895827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.792221790147655, 0.0, 1.70377784670666, 1.08844394344098, -2.49599963685431, -1.088443943441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.872391492755246, 0.0, 2.2039156841476, 0.668475808607639, -3.07630717690284, -0.668475808607654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.936978966288357, 0.0, 2.60684395116059, 0.330135015127758, -3.54382291744894, -0.330135015127771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.980745959231568, 0.0, 2.87988387135406, 0.100862087877503, -3.86062983058562, -0.100862087877515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.733342978645309, 0.0, -0.952329546270338, 3.68567252491564, 0.218986567625035, -3.68567252491565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.746786569270797, 0.0, -0.753071712491407, 3.49985828176219, 0.00628514322061768, -3.49985828176221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.769828180850642, 0.0, -0.411554201427718, 3.18138238227835, -0.358273979422916, -3.18138238227837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.800606748252318, 0.0, 0.0446387040338262, 2.75596804421848, -0.845245452286136, -2.7559680442185, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.836629477996249, 0.0, 0.578559387543149, 2.25807009045309, -1.41518886553939, -2.25807009045311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.874978177404326, 0.0, 1.14695506286264, 1.72802311454167, -2.02193324026696, -1.72802311454169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.912546073305716, 0.0, 1.70377784670666, 1.20876822659904, -2.61632392001237, -1.20876822659906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.946289531293582, 0.0, 2.2039156841476, 0.742373847145975, -3.15020521544117, -0.74237384714599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.973474423201869, 0.0, 2.60684395116059, 0.366630472041271, -3.58031837436245, -0.366630472041284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.991895966997077, 0.0, 2.87988387135406, 0.112012095643012, -3.87177983835113, -0.112012095643024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.948435000846823, 0.0, -0.952329546270338, 3.90076454711715, 0.00389454542352174, -3.90076454711717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.951034665148543, 0.0, -0.753071712491408, 3.70410637763994, -0.197962952657128, -3.70410637763996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.955490353866457, 0.0, -0.411554201427718, 3.36704455529417, -0.543936152438731, -3.36704455529418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.961442182151121, 0.0, 0.0446387040338262, 2.91680347811729, -1.00608088618494, -2.9168034781173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.968408104215743, 0.0, 0.578559387543149, 2.38984871667259, -1.54696749175888, -2.3898487166726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.975823812388198, 0.0, 1.14695506286264, 1.82886874952555, -2.12277887525084, -1.82886874952556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.98308853210381, 0.0, 1.70377784670666, 1.27931068539714, -2.68686637881047, -1.27931068539715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.989613698303184, 0.0, 2.2039156841476, 0.785698014155578, -3.19352938245077, -0.785698014155592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994870596925649, 0.0, 2.60684395116059, 0.388026645765051, -3.60171454808623, -0.388026645765064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.99843287661127, 0.0, 2.87988387135406, 0.118549005257204, -3.87831674796532, -0.118549005257217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C0_D10[100][21] = \
    {{-2.90076454711717, -0.948435000846832, 0.0, 0.0476704537296609, -0.0476704537296609, 3.849199547964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.70410637763996, -0.951034665148551, 0.0, 0.246928287508591, -0.246928287508591, 3.65514104278851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.36704455529418, -0.955490353866465, 0.0, 0.58844579857228, -0.58844579857228, 3.32253490916065, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.9168034781173, -0.961442182151129, 0.0, 1.04463870403382, -1.04463870403382, 2.87824566026843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.3898487166726, -0.968408104215749, 0.0, 1.57855938754315, -1.57855938754315, 2.35825682088835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.828868749525562, -0.975823812388204, 0.0, 2.14695506286264, -2.14695506286264, 1.80469256191377, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.279310685397155, -0.983088532103815, 0.0, 2.70377784670666, -2.70377784670666, 1.26239921750097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.214301985844406, -0.98961369830319, 0.0, 3.20391568414759, -3.20391568414759, 0.775311712458784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.611973354234933, -0.994870596925654, 0.0, 3.60684395116058, -3.60684395116058, 0.382897242690721, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.881450994742779, -0.998432876611275, 0.0, 3.87988387135405, -3.87988387135405, 0.116981881868496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.68567252491565, -0.733342978645317, 0.0, 0.0476704537296609, -0.0476704537296609, 3.41901550356097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.49985828176221, -0.746786569270804, 0.0, 0.246928287508591, -0.246928287508591, 3.24664485103301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.18138238227837, -0.76982818085065, 0.0, 0.58844579857228, -0.58844579857228, 2.95121056312902, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.7559680442185, -0.800606748252324, 0.0, 1.04463870403382, -1.04463870403382, 2.55657479247082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.25807009045311, -0.836629477996256, 0.0, 1.57855938754315, -1.57855938754315, 2.09469956844936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.72802311454169, -0.874978177404332, 0.0, 2.14695506286264, -2.14695506286264, 1.60300129194602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.208768226599061, -0.912546073305721, 0.0, 2.70377784670666, -2.70377784670666, 1.12131429990478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.257626152854008, -0.946289531293587, 0.0, 3.20391568414759, -3.20391568414759, 0.688663378439579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.633369527958713, -0.973474423201874, 0.0, 3.60684395116058, -3.60684395116058, 0.340104895243162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.887987904356972, -0.991895966997082, 0.0, 3.87988387135405, -3.87988387135405, 0.10390806264011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.31879002853867, -0.366460482268339, 0.0, 0.0476704537296609, -0.0476704537296609, 2.68525051080701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.15147227223524, -0.398400559743833, 0.0, 0.246928287508591, -0.246928287508591, 2.54987283197907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86469838432422, -0.453144182896508, 0.0, 0.58844579857228, -0.58844579857228, 2.31784256722073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.4816310191131, -0.526269723146926, 0.0, 1.04463870403382, -1.04463870403382, 2.00790074226003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.03329526681394, -0.611854654357093, 0.0, 1.57855938754315, -1.57855938754315, 1.64514992117104, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.556010698958272, -0.702965761820914, 0.0, 2.14695506286264, -2.14695506286264, 1.25897646077919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0884439434410002, -0.79222179014766, 0.0, 2.70377784670666, -2.70377784670666, 0.880665733588661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.331524191392344, -0.872391492755251, 0.0, 3.20391568414759, -3.20391568414759, 0.540867301362908, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.669864984872225, -0.936978966288361, 0.0, 3.60684395116058, -3.60684395116058, 0.267113981416137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.899137912122481, -0.980745959231573, 0.0, 3.87988387135405, -3.87988387135405, 0.0816080471090928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.83262548385242, 0.119704062417915, 0.0, 0.0476704537296608, -0.0476704537296608, 1.7129214214345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.68981785326097, 0.0632538592304303, 0.0, 0.246928287508591, -0.246928287508591, 1.62656399403054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.44505303957439, -0.0334988381466699, 0.0, 0.58844579857228, -0.58844579857228, 1.47855187772106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.11810063481288, -0.162739338846705, 0.0, 1.04463870403382, -1.04463870403382, 1.28083997365958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.735440910526578, -0.314000298069726, 0.0, 1.57855938754315, -1.57855938754315, 1.0494412085963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.328073039003605, -0.475028101866247, 0.0, 2.14695506286264, -2.14695506286264, 0.803101140869852, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0710005678505158, -0.632777278856144, 0.0, 2.70377784670666, -2.70377784670666, 0.561776711005629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.429448204159315, -0.77446747998828, 0.0, 3.20391568414759, -3.20391568414759, 0.345019275828966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.718225965209766, -0.888617985950821, 0.0, 3.60684395116058, -3.60684395116058, 0.170392020741056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.913913047219132, -0.965970824134922, 0.0, 3.87988387135405, -3.87988387135405, 0.05205777691579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.27036499745445, 0.681964548815884, 0.0, 0.0476704537296609, -0.0476704537296609, 0.588400448638567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.15590389141961, 0.597167821071794, 0.0, 0.246928287508591, -0.246928287508591, 0.558736070347817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.959723539032638, 0.451830662395079, 0.0, 0.58844579857228, -0.58844579857228, 0.507892876637559, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.697669377677517, 0.257691918288656, 0.0, 1.04463870403382, -1.04463870403382, 0.439977459388861, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.390965491509821, 0.030475120947031, 0.0, 1.57855938754315, -1.57855938754315, 0.36049037056279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.06445788862847, -0.211412951491113, 0.0, 2.14695506286264, -2.14695506286264, 0.275870840119583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.255401815230884, -0.448376031475776, 0.0, 2.70377784670666, -2.70377784670666, 0.192974216244893, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.542699578925712, -0.661216105221883, 0.0, 3.20391568414759, -3.20391568414759, 0.118516526296171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.774156552136495, -0.832687399024092, 0.0, 3.60684395116058, -3.60684395116058, 0.0585308468875979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.931000831050428, -0.948883040303626, 0.0, 3.87988387135405, -3.87988387135405, 0.0178822092531985, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.681964548815884, 1.27036499745445, 0.0, 0.0476704537296609, -0.0476704537296609, -0.588400448638567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.597167821071794, 1.15590389141961, 0.0, 0.246928287508591, -0.246928287508591, -0.558736070347818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.451830662395079, 0.959723539032638, 0.0, 0.58844579857228, -0.58844579857228, -0.507892876637558, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.257691918288656, 0.697669377677518, 0.0, 1.04463870403382, -1.04463870403382, -0.439977459388861, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0304751209470305, 0.390965491509822, 0.0, 1.57855938754315, -1.57855938754315, -0.360490370562791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.211412951491113, 0.06445788862847, 0.0, 2.14695506286264, -2.14695506286264, -0.275870840119582, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.448376031475776, -0.255401815230884, 0.0, 2.70377784670666, -2.70377784670666, -0.192974216244892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.661216105221883, -0.542699578925712, 0.0, 3.20391568414759, -3.20391568414759, -0.11851652629617, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.832687399024092, -0.774156552136495, 0.0, 3.60684395116058, -3.60684395116058, -0.0585308468875969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.948883040303626, -0.931000831050428, 0.0, 3.87988387135405, -3.87988387135405, -0.0178822092531972, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.119704062417917, 1.83262548385242, 0.0, 0.0476704537296611, -0.0476704537296611, -1.7129214214345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0632538592304318, 1.68981785326097, 0.0, 0.246928287508591, -0.246928287508591, -1.62656399403054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0334988381466687, 1.44505303957439, 0.0, 0.58844579857228, -0.58844579857228, -1.47855187772105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.162739338846705, 1.11810063481288, 0.0, 1.04463870403382, -1.04463870403382, -1.28083997365958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.314000298069726, 0.735440910526578, 0.0, 1.57855938754315, -1.57855938754315, -1.0494412085963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.475028101866247, 0.328073039003604, 0.0, 2.14695506286264, -2.14695506286264, -0.803101140869851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.632777278856144, -0.0710005678505161, 0.0, 2.70377784670666, -2.70377784670666, -0.561776711005628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.77446747998828, -0.429448204159315, 0.0, 3.20391568414759, -3.20391568414759, -0.345019275828964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.888617985950821, -0.718225965209766, 0.0, 3.60684395116058, -3.60684395116058, -0.170392020741054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.965970824134921, -0.913913047219132, 0.0, 3.87988387135405, -3.87988387135405, -0.0520577769157886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.366460482268338, 2.31879002853867, 0.0, 0.0476704537296614, -0.0476704537296614, -2.68525051080701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.398400559743832, 2.15147227223524, 0.0, 0.246928287508591, -0.246928287508591, -2.54987283197907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.453144182896507, 1.86469838432422, 0.0, 0.58844579857228, -0.58844579857228, -2.31784256722073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.526269723146926, 1.4816310191131, 0.0, 1.04463870403382, -1.04463870403382, -2.00790074226003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.611854654357093, 1.03329526681394, 0.0, 1.57855938754315, -1.57855938754315, -1.64514992117104, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.702965761820914, 0.556010698958272, 0.0, 2.14695506286264, -2.14695506286264, -1.25897646077919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.79222179014766, 0.0884439434409998, 0.0, 2.70377784670666, -2.70377784670666, -0.88066573358866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.872391492755251, -0.331524191392345, 0.0, 3.20391568414759, -3.20391568414759, -0.540867301362906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.936978966288362, -0.669864984872225, 0.0, 3.60684395116058, -3.60684395116058, -0.267113981416136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.980745959231573, -0.899137912122481, 0.0, 3.87988387135405, -3.87988387135405, -0.0816080471090915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.733342978645316, 2.68567252491565, 0.0, 0.0476704537296616, -0.0476704537296616, -3.41901550356097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.746786569270803, 2.49985828176221, 0.0, 0.246928287508591, -0.246928287508591, -3.24664485103301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.769828180850649, 2.18138238227837, 0.0, 0.58844579857228, -0.58844579857228, -2.95121056312901, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.800606748252324, 1.7559680442185, 0.0, 1.04463870403382, -1.04463870403382, -2.55657479247082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.836629477996255, 1.25807009045311, 0.0, 1.57855938754315, -1.57855938754315, -2.09469956844936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.874978177404332, 0.728023114541689, 0.0, 2.14695506286264, -2.14695506286264, -1.60300129194602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.912546073305721, 0.208768226599061, 0.0, 2.70377784670666, -2.70377784670666, -1.12131429990478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.946289531293587, -0.257626152854009, 0.0, 3.20391568414759, -3.20391568414759, -0.688663378439578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.973474423201874, -0.633369527958713, 0.0, 3.60684395116058, -3.60684395116058, -0.340104895243161, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.991895966997081, -0.887987904356972, 0.0, 3.87988387135405, -3.87988387135405, -0.103908062640109, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.948435000846829, 2.90076454711716, 0.0, 0.0476704537296616, -0.0476704537296616, -3.84919954796399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.95103466514855, 2.70410637763996, 0.0, 0.246928287508591, -0.246928287508591, -3.65514104278851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.955490353866463, 2.36704455529418, 0.0, 0.58844579857228, -0.58844579857228, -3.32253490916064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.961442182151127, 1.9168034781173, 0.0, 1.04463870403382, -1.04463870403382, -2.87824566026843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.968408104215748, 1.3898487166726, 0.0, 1.57855938754315, -1.57855938754315, -2.35825682088835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.975823812388204, 0.828868749525561, 0.0, 2.14695506286264, -2.14695506286264, -1.80469256191376, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.983088532103815, 0.279310685397155, 0.0, 2.70377784670666, -2.70377784670666, -1.26239921750097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.989613698303189, -0.214301985844406, 0.0, 3.20391568414759, -3.20391568414759, -0.775311712458783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994870596925654, -0.611973354234933, 0.0, 3.60684395116058, -3.60684395116058, -0.38289724269072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.998432876611274, -0.881450994742779, 0.0, 3.87988387135405, -3.87988387135405, -0.116981881868495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.926804369726482, -0.0125588811460848, -0.0116335544125666, 0.000614531726550321, 0.046487803963414, 0.0502857301422051, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.789023912699135, -0.0119416332107237, -0.0541103744806573, 0.00302273157053858, 0.228662161145072, 0.0453432022766349, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.575362490843478, -0.010879772958518, -0.103827892410899, 0.00654787856580487, 0.495330805542134, 0.0374664904180003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.334266946715323, -0.00945361629756012, -0.124750923262773, 0.010069747217005, 0.761751451325452, 0.0281163943025522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.116459931904559, -0.00777321796115784, -0.0831586293857123, 0.0124674209151293, 0.943129531627869, 0.0188749628993127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0391220745074916, -0.0059709858970191, 0.039438239528281, 0.012976297098466, 0.981624755276293, 0.0110537685014705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.115248192627871, -0.00419211725574579, 0.237857368866048, 0.011431213063249, 0.864742972557985, 0.00540875539633523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.119259332357893, -0.0025830910163356, 0.48215554285397, 0.00831920872667533, 0.629327547639181, 0.00204012415440143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0781860767133055, -0.00127906192159918, 0.724454423212818, 0.00462523911294266, 0.349887890041715, 0.000497586267429018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0278805179833705, -0.000391473862716873, 0.911716389060652, 0.00152006419008421, 0.114989093365639, 4.64452297123108e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.776604613885851, -0.0577760094589524, -0.0116335544125666, 0.00317791529954456, 0.0439244203904197, 0.245702614295703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.656161428611888, -0.0552887274945935, -0.0541103744806574, 0.0156313897060343, 0.216053503009577, 0.221552780647752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.469803637214305, -0.050920571496023, -0.103827892410899, 0.0338609099820439, 0.468017774125895, 0.183066142584679, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.260427971539567, -0.0448786043316053, -0.124750923262773, 0.0520734770246961, 0.719747721517761, 0.137380357512353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0728425440615862, -0.0375063895684644, -0.0831586293857123, 0.0644725177892092, 0.891124434753789, 0.0922255223495923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0587477930866273, -0.0293016486332743, 0.039438239528281, 0.0671040587475214, 0.927496993627237, 0.0540101498168615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.119551978445335, -0.0209074580117887, 0.237857368866048, 0.059113997400875, 0.817060188220359, 0.0264278819698421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.116703595670705, -0.0130670153705205, 0.48215554285397, 0.043020953272849, 0.594625803093008, 0.00996831182139876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0748553801316696, -0.00654344342147228, 0.724454423212818, 0.0239184040563415, 0.330594725098316, 0.00243127118566616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0264346852144639, -0.00201779883186551, 0.911716389060652, 0.00786067673523594, 0.108648480820487, 0.000226937429954416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.547098399556298, -0.108213339366957, -0.0116335544125666, 0.00755027906648506, 0.0395520566234793, 0.525646158533261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.453604117274632, -0.105159624249475, -0.0541103744806574, 0.037137979887146, 0.194546912828465, 0.473980988739889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.309637508062672, -0.0993325436883823, -0.103827892410899, 0.0804487519998408, 0.421429932108098, 0.391644243928671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.149403809599765, -0.0903800223123574, -0.124750923262773, 0.123719245618345, 0.648101952924112, 0.293905937432907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00846238855251252, -0.0782042352426956, -0.0831586293857123, 0.153177619773948, 0.80241933276905, 0.197303523532897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0863565128304918, -0.0632298922134428, 0.039438239528281, 0.159429790375534, 0.835171261999225, 0.115547113140894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124022208608576, -0.0465480794019046, 0.237857368866048, 0.140446530206781, 0.735727655414453, 0.0565387335231982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.111261463815206, -0.0298666354210331, 0.48215554285397, 0.102211724448028, 0.535435031917828, 0.0213258000164125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0689101127552665, -0.0152588020916492, 0.724454423212818, 0.0568267585596778, 0.29768637059498, 0.00520136247944004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0239438768730031, -0.00476717043136768, 0.911716389060652, 0.0186758605589532, 0.0978332969967699, 0.000485500687995744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294814520508164, -0.123208867180081, -0.0116335544125666, 0.0133442001746021, 0.0337581355153622, 0.792925565394519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.231935547149941, -0.124499868661557, -0.0541103744806574, 0.0656368636616683, 0.166048029053943, 0.714989803276662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.136022285897897, -0.124859728480353, -0.103827892410899, 0.142183387001955, 0.359695297105983, 0.590786650885416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312686286961205, -0.121689488448967, -0.124750923262773, 0.218658723001421, 0.553162475541037, 0.443350584473162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0573908333904797, -0.112675476601516, -0.0831586293857123, 0.270722817333459, 0.684874135209539, 0.297627986834709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.111546010134867, -0.0967935378046688, 0.039438239528281, 0.281772768639718, 0.712828283735041, 0.174300256036496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124369864920613, -0.0749491144204267, 0.237857368866048, 0.248222164559024, 0.62795202106221, 0.0852874248537577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.101946779993042, -0.0500250153050754, 0.48215554285397, 0.18064679453772, 0.456999961828137, 0.0321694960782906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0605189328623124, -0.0262947593805883, 0.724454423212818, 0.100434385910341, 0.254078743244317, 0.00784613987542511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0205953677653299, -0.00836254586501251, 0.911716389060652, 0.033007312648597, 0.0835018449071261, 0.000732367013967339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0767284033446813, -0.0668655442697932, -0.0116335544125666, 0.0200450032998151, 0.0270573323901493, 0.954668359647714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0420142257748753, -0.0804238241845455, -0.0541103744806573, 0.0985964787302721, 0.133088413985339, 0.860835080174717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00986634107833336, -0.0994811315649528, -0.103827892410899, 0.213580913381199, 0.288297770726739, 0.711296680946247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.064157179931383, -0.116699359406089, -0.124750923262773, 0.328458413898719, 0.443362784643738, 0.533786264057787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10589324805606, -0.124883908375408, -0.0831586293857123, 0.406666543950149, 0.548930408592849, 0.358338833274183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124480647574195, -0.119413070492727, 0.039438239528281, 0.423265239076016, 0.571335813298743, 0.209854426163882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.116846239097096, -0.0998698667997542, 0.237857368866048, 0.372867166452052, 0.503307019169182, 0.102684551409568, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0881846458792318, -0.0703491577744005, 0.48215554285397, 0.271358758504054, 0.366287997861802, 0.0387315044338052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0500852040980167, -0.0383289619383115, 0.724454423212818, 0.150867610695725, 0.203645518458933, 0.00944661366885256, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0166546815729264, -0.0124526219780184, 0.911716389060652, 0.0495819668696541, 0.0669271906860689, 0.000881756934569766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0668655442697932, 0.0767284033446813, -0.0116335544125666, 0.0270573323901495, 0.0200450032998149, 0.954668359647714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0804238241845455, 0.0420142257748754, -0.0541103744806573, 0.133088413985339, 0.0985964787302721, 0.860835080174717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0994811315649528, -0.00986634107833343, -0.103827892410899, 0.288297770726739, 0.213580913381199, 0.711296680946247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.116699359406089, -0.0641571799313831, -0.124750923262773, 0.443362784643738, 0.328458413898719, 0.533786264057787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124883908375408, -0.10589324805606, -0.0831586293857123, 0.548930408592849, 0.406666543950149, 0.358338833274183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.119413070492727, -0.124480647574195, 0.039438239528281, 0.571335813298743, 0.423265239076016, 0.209854426163882, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0998698667997541, -0.116846239097096, 0.237857368866048, 0.503307019169182, 0.372867166452052, 0.102684551409568, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0703491577744004, -0.0881846458792318, 0.48215554285397, 0.366287997861802, 0.271358758504054, 0.0387315044338052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0383289619383114, -0.0500852040980168, 0.724454423212818, 0.203645518458934, 0.150867610695724, 0.00944661366885256, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0124526219780183, -0.0166546815729265, 0.911716389060652, 0.0669271906860693, 0.0495819668696538, 0.000881756934569766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123208867180081, 0.294814520508164, -0.0116335544125666, 0.0337581355153624, 0.013344200174602, 0.792925565394519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124499868661557, 0.231935547149941, -0.0541103744806573, 0.166048029053943, 0.0656368636616682, 0.714989803276663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124859728480353, 0.136022285897897, -0.103827892410899, 0.359695297105983, 0.142183387001955, 0.590786650885417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.121689488448967, 0.0312686286961202, -0.124750923262773, 0.553162475541037, 0.218658723001421, 0.443350584473162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.112675476601515, -0.0573908333904799, -0.0831586293857123, 0.684874135209539, 0.270722817333459, 0.297627986834709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0967935378046688, -0.111546010134867, 0.039438239528281, 0.712828283735041, 0.281772768639718, 0.174300256036496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0749491144204266, -0.124369864920613, 0.237857368866048, 0.62795202106221, 0.248222164559024, 0.0852874248537577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0500250153050753, -0.101946779993042, 0.48215554285397, 0.456999961828137, 0.18064679453772, 0.0321694960782906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0262947593805882, -0.0605189328623124, 0.724454423212818, 0.254078743244317, 0.100434385910341, 0.00784613987542511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00836254586501242, -0.02059536776533, 0.911716389060652, 0.0835018449071265, 0.0330073126485966, 0.000732367013967339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.108213339366957, 0.547098399556298, -0.0116335544125666, 0.0395520566234794, 0.00755027906648492, 0.525646158533261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.105159624249475, 0.453604117274632, -0.0541103744806574, 0.194546912828465, 0.0371379798871459, 0.473980988739889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0993325436883822, 0.309637508062672, -0.103827892410899, 0.421429932108098, 0.0804487519998407, 0.391644243928671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0903800223123573, 0.149403809599765, -0.124750923262773, 0.648101952924112, 0.123719245618345, 0.293905937432907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0782042352426954, 0.00846238855251247, -0.0831586293857123, 0.80241933276905, 0.153177619773948, 0.197303523532897, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0632298922134427, -0.0863565128304918, 0.039438239528281, 0.835171261999225, 0.159429790375534, 0.115547113140895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0465480794019045, -0.124022208608576, 0.237857368866048, 0.735727655414453, 0.140446530206781, 0.0565387335231982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0298666354210331, -0.111261463815207, 0.48215554285397, 0.535435031917828, 0.102211724448028, 0.0213258000164125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0152588020916491, -0.0689101127552667, 0.724454423212818, 0.297686370594981, 0.0568267585596774, 0.00520136247944003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00476717043136757, -0.0239438768730032, 0.911716389060652, 0.0978332969967703, 0.0186758605589529, 0.000485500687995744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0577760094589522, 0.776604613885852, -0.0116335544125666, 0.0439244203904198, 0.00317791529954448, 0.245702614295703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0552887274945933, 0.656161428611888, -0.0541103744806573, 0.216053503009577, 0.0156313897060341, 0.221552780647752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0509205714960229, 0.469803637214305, -0.103827892410899, 0.468017774125895, 0.0338609099820438, 0.183066142584679, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0448786043316052, 0.260427971539567, -0.124750923262773, 0.719747721517762, 0.0520734770246959, 0.137380357512353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0375063895684642, 0.0728425440615861, -0.0831586293857123, 0.891124434753789, 0.0644725177892091, 0.0922255223495923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0293016486332742, -0.0587477930866274, 0.039438239528281, 0.927496993627238, 0.0671040587475213, 0.0540101498168615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0209074580117886, -0.119551978445335, 0.237857368866048, 0.817060188220359, 0.0591139974008749, 0.0264278819698421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0130670153705204, -0.116703595670705, 0.48215554285397, 0.594625803093008, 0.0430209532728489, 0.00996831182139876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00654344342147214, -0.0748553801316697, 0.724454423212818, 0.330594725098317, 0.023918404056341, 0.00243127118566625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0020177988318654, -0.026434685214464, 0.911716389060652, 0.108648480820488, 0.00786067673523538, 0.000226937429954416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0125588811460846, 0.926804369726482, -0.0116335544125666, 0.0464878039634141, 0.000614531726550238, 0.0502857301422048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0119416332107235, 0.789023912699135, -0.0541103744806573, 0.228662161145072, 0.0030227315705384, 0.0453432022766346, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0108797729585179, 0.575362490843478, -0.103827892410899, 0.495330805542134, 0.00654787856580476, 0.0374664904180003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00945361629755996, 0.334266946715323, -0.124750923262773, 0.761751451325453, 0.0100697472170049, 0.0281163943025522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00777321796115767, 0.116459931904559, -0.0831586293857123, 0.943129531627869, 0.0124674209151292, 0.0188749628993127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00597098589701897, -0.0391220745074917, 0.039438239528281, 0.981624755276293, 0.0129762970984659, 0.0110537685014706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00419211725574569, -0.115248192627872, 0.237857368866048, 0.864742972557985, 0.0114312130632489, 0.00540875539633523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00258309101633541, -0.119259332357893, 0.48215554285397, 0.629327547639182, 0.00831920872667505, 0.00204012415440138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00127906192159902, -0.0781860767133056, 0.724454423212818, 0.349887890041716, 0.00462523911294216, 0.000497586267429073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000391473862716762, -0.0278805179833705, 0.911716389060652, 0.114989093365639, 0.00152006419008388, 4.64452297123386e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1_D01[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.90076454711717, 0.0, -0.952329546270338, 0.0515649991531626, 3.85309409338751, -0.0515649991531699, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.70410637763996, 0.0, -0.753071712491408, 0.0489653348514421, 3.45717809013137, -0.0489653348514504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.36704455529419, 0.0, -0.411554201427719, 0.0445096461335286, 2.77859875672191, -0.0445096461335371, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.91680347811731, 0.0, 0.0446387040338259, 0.0385578178488636, 1.87216477408348, -0.0385578178488729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.38984871667261, 0.0, 0.578559387543149, 0.0315918957842414, 0.811289329129461, -0.031591895784252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828868749525567, 0.0, 1.14695506286264, 0.0241761876117847, -0.318086313337073, -0.0241761876117956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.27931068539716, 0.0, 1.70377784670666, 0.0169114678961717, -1.4244671613095, -0.0169114678961836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.214301985844401, 0.0, 2.2039156841476, 0.0103863016967962, -2.41821766999199, -0.0103863016968087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611973354234928, 0.0, 2.60684395116059, 0.00512940307433052, -3.21881730539551, -0.00512940307434306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.881450994742775, 0.0, 2.87988387135406, 0.00156712338870868, -3.76133486609683, -0.00156712338872145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.68567252491566, 0.0, -0.952329546270337, 0.266657021354677, 3.638002071186, -0.266657021354684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.49985828176221, 0.0, -0.753071712491407, 0.253213430729189, 3.25292999425362, -0.253213430729197, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18138238227837, 0.0, -0.411554201427719, 0.230171819149343, 2.59293658370609, -0.230171819149352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7559680442185, 0.0, 0.0446387040338259, 0.199393251747667, 1.71132934018468, -0.199393251747677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.25807009045311, 0.0, 0.578559387543149, 0.163370522003734, 0.679510702909968, -0.163370522003745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.728023114541694, 0.0, 1.14695506286264, 0.125021822595656, -0.418931948320945, -0.125021822595668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.208768226599066, 0.0, 1.70377784670666, 0.0874539266942658, -1.49500962010759, -0.0874539266942778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.257626152854003, 0.0, 2.2039156841476, 0.0537104687063987, -2.4615418370016, -0.0537104687064111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633369527958708, 0.0, 2.60684395116059, 0.0265255767981101, -3.24021347911929, -0.0265255767981226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887987904356968, 0.0, 2.87988387135406, 0.00810403300290208, -3.76787177571102, -0.0081040330029144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.31879002853868, 0.0, -0.952329546270337, 0.633539517731654, 3.27111957480902, -0.633539517731663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.15147227223524, 0.0, -0.753071712491407, 0.60159944025616, 2.90454398472665, -0.601599440256168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86469838432423, 0.0, -0.411554201427718, 0.546855817103484, 2.27625258575195, -0.546855817103494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4816310191131, 0.0, 0.0446387040338261, 0.473730276853065, 1.43699231507928, -0.473730276853075, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.03329526681395, 0.0, 0.578559387543149, 0.388145345642897, 0.454735879270805, -0.388145345642908, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.556010698958277, 0.0, 1.14695506286264, 0.297034238179074, -0.590944363904363, -0.297034238179086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0884439434410049, 0.0, 1.70377784670666, 0.207778209852326, -1.61533390326565, -0.207778209852339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.331524191392339, 0.0, 2.2039156841476, 0.127608507244734, -2.53543987553993, -0.127608507244747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.669864984872221, 0.0, 2.60684395116059, 0.0630210337116228, -3.2767089360328, -0.0630210337116354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.899137912122476, 0.0, 2.87988387135406, 0.0192540407684105, -3.77902178347653, -0.0192540407684231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.83262548385242, 0.0, -0.952329546270337, 1.11970406241791, 2.78495503012277, -1.11970406241792, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.68981785326098, 0.0, -0.753071712491407, 1.06325385923042, 2.44288956575239, -1.06325385923043, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.44505303957439, 0.0, -0.411554201427718, 0.966501161853321, 1.85660724100211, -0.966501161853332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11810063481288, 0.0, 0.0446387040338262, 0.837260661153284, 1.07346193077906, -0.837260661153296, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.735440910526583, 0.0, 0.578559387543149, 0.685999701930262, 0.15688152298344, -0.685999701930275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.32807303900361, 0.0, 1.14695506286264, 0.52497189813374, -0.818882023859029, -0.524971898133753, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0710005678505108, 0.0, 1.70377784670666, 0.367222721143842, -1.77477841455717, -0.367222721143855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.42944820415931, 0.0, 2.2039156841476, 0.225532520011705, -2.6333638883069, -0.225532520011718, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.718225965209761, 0.0, 2.60684395116059, 0.111382014049163, -3.32506991637034, -0.111382014049176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.913913047219128, 0.0, 2.87988387135406, 0.0340291758650624, -3.79379691857318, -0.0340291758650746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.27036499745446, 0.0, -0.952329546270337, 1.68196454881587, 2.2226945437248, -1.68196454881589, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.15590389141962, 0.0, -0.753071712491407, 1.59716782107178, 1.90897560391103, -1.5971678210718, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.959723539032643, 0.0, -0.411554201427718, 1.45183066239507, 1.37127774046037, -1.45183066239508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.697669377677523, 0.0, 0.0446387040338264, 1.25769191828865, 0.653030673643702, -1.25769191828866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.390965491509826, 0.0, 0.578559387543149, 1.03047512094702, -0.187593896033317, -1.03047512094703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0644578886284753, 0.0, 1.14695506286264, 0.788587048508874, -1.08249717423416, -0.788587048508888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.255401815230879, 0.0, 1.70377784670666, 0.551623968524209, -1.95917966193754, -0.551623968524223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.542699578925707, 0.0, 2.2039156841476, 0.338783894778102, -2.7466152630733, -0.338783894778115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.77415655213649, 0.0, 2.60684395116059, 0.167312600975892, -3.38100050329707, -0.167312600975905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.931000831050423, 0.0, 2.87988387135406, 0.0511169596963574, -3.81088470240447, -0.0511169596963702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.68196454881589, 0.0, -0.952329546270337, 2.27036499745444, 1.63429409508623, -2.27036499745445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5971678210718, 0.0, -0.753071712491407, 2.1559038914196, 1.35023953356321, -2.15590389141961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.451830662395085, 0.0, -0.411554201427718, 1.95972353903263, 0.863384863822809, -1.95972353903264, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.257691918288662, 0.0, 0.0446387040338264, 1.69766937767751, 0.213053214254842, -1.69766937767752, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0304751209470362, 0.0, 0.578559387543149, 1.39096549150981, -0.548084266596107, -1.39096549150982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211412951491107, 0.0, 1.14695506286264, 1.06445788862846, -1.35836801435374, -1.06445788862847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.448376031475771, 0.0, 1.70377784670666, 0.744598184769101, -2.15215387818243, -0.744598184769115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.661216105221878, 0.0, 2.2039156841476, 0.457300421074272, -2.86513178936947, -0.457300421074286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.832687399024087, 0.0, 2.60684395116059, 0.225843447863489, -3.43953135018467, -0.225843447863502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.948883040303621, 0.0, 2.87988387135406, 0.0689991689495555, -3.82876691165767, -0.0689991689495681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.119704062417923, 0.0, -0.952329546270337, 2.83262548385241, 1.07203360868827, -2.83262548385242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0632538592304381, 0.0, -0.753071712491407, 2.68981785326096, 0.816325571721852, -2.68981785326098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334988381466625, 0.0, -0.411554201427718, 2.44505303957437, 0.378055363281062, -2.44505303957439, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.162739338846699, 0.0, 0.0446387040338263, 2.11810063481286, -0.207378042880518, -2.11810063481288, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.31400029806972, 0.0, 0.578559387543149, 1.73544091052656, -0.892559685612862, -1.73544091052658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.475028101866241, 0.0, 1.14695506286264, 1.32807303900359, -1.62198316472888, -1.3280730390036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.632777278856139, 0.0, 1.70377784670666, 0.928999432149469, -2.33655512556279, -0.928999432149483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.774467479988275, 0.0, 2.2039156841476, 0.570551795840669, -2.97838316413587, -0.570551795840683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.888617985950816, 0.0, 2.60684395116059, 0.281774034790218, -3.4954619371114, -0.281774034790231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965970824134917, 0.0, 2.87988387135406, 0.0860869527808514, -3.84585469548897, -0.0860869527808639, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.366460482268331, 0.0, -0.952329546270338, 3.31879002853866, 0.585869064002013, -3.31879002853867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.398400559743826, 0.0, -0.753071712491407, 3.15147227223522, 0.354671152747588, -3.15147227223524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.453144182896501, 0.0, -0.411554201427718, 2.86469838432421, -0.0415899814687752, -2.86469838432423, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.52626972314692, 0.0, 0.0446387040338264, 2.48163101911309, -0.570908427180739, -2.4816310191131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611854654357086, 0.0, 0.578559387543149, 2.03329526681393, -1.19041404190023, -2.03329526681395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.702965761820908, 0.0, 1.14695506286264, 1.55601069895826, -1.84992082468355, -1.55601069895827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.792221790147655, 0.0, 1.70377784670666, 1.08844394344098, -2.49599963685431, -1.088443943441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.872391492755246, 0.0, 2.2039156841476, 0.668475808607639, -3.07630717690284, -0.668475808607654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.936978966288357, 0.0, 2.60684395116059, 0.330135015127758, -3.54382291744894, -0.330135015127771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.980745959231568, 0.0, 2.87988387135406, 0.100862087877503, -3.86062983058562, -0.100862087877515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.733342978645309, 0.0, -0.952329546270338, 3.68567252491564, 0.218986567625035, -3.68567252491565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.746786569270797, 0.0, -0.753071712491407, 3.49985828176219, 0.00628514322061768, -3.49985828176221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.769828180850642, 0.0, -0.411554201427718, 3.18138238227835, -0.358273979422916, -3.18138238227837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.800606748252318, 0.0, 0.0446387040338262, 2.75596804421848, -0.845245452286136, -2.7559680442185, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.836629477996249, 0.0, 0.578559387543149, 2.25807009045309, -1.41518886553939, -2.25807009045311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874978177404326, 0.0, 1.14695506286264, 1.72802311454167, -2.02193324026696, -1.72802311454169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.912546073305716, 0.0, 1.70377784670666, 1.20876822659904, -2.61632392001237, -1.20876822659906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.946289531293582, 0.0, 2.2039156841476, 0.742373847145975, -3.15020521544117, -0.74237384714599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.973474423201869, 0.0, 2.60684395116059, 0.366630472041271, -3.58031837436245, -0.366630472041284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.991895966997077, 0.0, 2.87988387135406, 0.112012095643012, -3.87177983835113, -0.112012095643024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.948435000846823, 0.0, -0.952329546270338, 3.90076454711715, 0.00389454542352174, -3.90076454711717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.951034665148543, 0.0, -0.753071712491408, 3.70410637763994, -0.197962952657128, -3.70410637763996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.955490353866457, 0.0, -0.411554201427718, 3.36704455529417, -0.543936152438731, -3.36704455529418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961442182151121, 0.0, 0.0446387040338262, 2.91680347811729, -1.00608088618494, -2.9168034781173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.968408104215743, 0.0, 0.578559387543149, 2.38984871667259, -1.54696749175888, -2.3898487166726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975823812388198, 0.0, 1.14695506286264, 1.82886874952555, -2.12277887525084, -1.82886874952556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.98308853210381, 0.0, 1.70377784670666, 1.27931068539714, -2.68686637881047, -1.27931068539715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.989613698303184, 0.0, 2.2039156841476, 0.785698014155578, -3.19352938245077, -0.785698014155592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994870596925649, 0.0, 2.60684395116059, 0.388026645765051, -3.60171454808623, -0.388026645765064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.99843287661127, 0.0, 2.87988387135406, 0.118549005257204, -3.87831674796532, -0.118549005257217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1_D10[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.90076454711717, -0.948435000846832, 0.0, 0.0476704537296609, -0.0476704537296609, 3.849199547964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.70410637763996, -0.951034665148551, 0.0, 0.246928287508591, -0.246928287508591, 3.65514104278851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.36704455529418, -0.955490353866465, 0.0, 0.58844579857228, -0.58844579857228, 3.32253490916065, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.9168034781173, -0.961442182151129, 0.0, 1.04463870403382, -1.04463870403382, 2.87824566026843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.3898487166726, -0.968408104215749, 0.0, 1.57855938754315, -1.57855938754315, 2.35825682088835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.828868749525562, -0.975823812388204, 0.0, 2.14695506286264, -2.14695506286264, 1.80469256191377, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.279310685397155, -0.983088532103815, 0.0, 2.70377784670666, -2.70377784670666, 1.26239921750097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.214301985844406, -0.98961369830319, 0.0, 3.20391568414759, -3.20391568414759, 0.775311712458784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611973354234933, -0.994870596925654, 0.0, 3.60684395116058, -3.60684395116058, 0.382897242690721, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.881450994742779, -0.998432876611275, 0.0, 3.87988387135405, -3.87988387135405, 0.116981881868496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.68567252491565, -0.733342978645317, 0.0, 0.0476704537296609, -0.0476704537296609, 3.41901550356097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.49985828176221, -0.746786569270804, 0.0, 0.246928287508591, -0.246928287508591, 3.24664485103301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.18138238227837, -0.76982818085065, 0.0, 0.58844579857228, -0.58844579857228, 2.95121056312902, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7559680442185, -0.800606748252324, 0.0, 1.04463870403382, -1.04463870403382, 2.55657479247082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.25807009045311, -0.836629477996256, 0.0, 1.57855938754315, -1.57855938754315, 2.09469956844936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.72802311454169, -0.874978177404332, 0.0, 2.14695506286264, -2.14695506286264, 1.60300129194602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.208768226599061, -0.912546073305721, 0.0, 2.70377784670666, -2.70377784670666, 1.12131429990478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.257626152854008, -0.946289531293587, 0.0, 3.20391568414759, -3.20391568414759, 0.688663378439579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633369527958713, -0.973474423201874, 0.0, 3.60684395116058, -3.60684395116058, 0.340104895243162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887987904356972, -0.991895966997082, 0.0, 3.87988387135405, -3.87988387135405, 0.10390806264011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.31879002853867, -0.366460482268339, 0.0, 0.0476704537296609, -0.0476704537296609, 2.68525051080701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.15147227223524, -0.398400559743833, 0.0, 0.246928287508591, -0.246928287508591, 2.54987283197907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86469838432422, -0.453144182896508, 0.0, 0.58844579857228, -0.58844579857228, 2.31784256722073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.4816310191131, -0.526269723146926, 0.0, 1.04463870403382, -1.04463870403382, 2.00790074226003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.03329526681394, -0.611854654357093, 0.0, 1.57855938754315, -1.57855938754315, 1.64514992117104, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.556010698958272, -0.702965761820914, 0.0, 2.14695506286264, -2.14695506286264, 1.25897646077919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0884439434410002, -0.79222179014766, 0.0, 2.70377784670666, -2.70377784670666, 0.880665733588661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.331524191392344, -0.872391492755251, 0.0, 3.20391568414759, -3.20391568414759, 0.540867301362908, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.669864984872225, -0.936978966288361, 0.0, 3.60684395116058, -3.60684395116058, 0.267113981416137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.899137912122481, -0.980745959231573, 0.0, 3.87988387135405, -3.87988387135405, 0.0816080471090928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.83262548385242, 0.119704062417915, 0.0, 0.0476704537296608, -0.0476704537296608, 1.7129214214345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.68981785326097, 0.0632538592304303, 0.0, 0.246928287508591, -0.246928287508591, 1.62656399403054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.44505303957439, -0.0334988381466699, 0.0, 0.58844579857228, -0.58844579857228, 1.47855187772106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.11810063481288, -0.162739338846705, 0.0, 1.04463870403382, -1.04463870403382, 1.28083997365958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.735440910526578, -0.314000298069726, 0.0, 1.57855938754315, -1.57855938754315, 1.0494412085963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.328073039003605, -0.475028101866247, 0.0, 2.14695506286264, -2.14695506286264, 0.803101140869852, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0710005678505158, -0.632777278856144, 0.0, 2.70377784670666, -2.70377784670666, 0.561776711005629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.429448204159315, -0.77446747998828, 0.0, 3.20391568414759, -3.20391568414759, 0.345019275828966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.718225965209766, -0.888617985950821, 0.0, 3.60684395116058, -3.60684395116058, 0.170392020741056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.913913047219132, -0.965970824134922, 0.0, 3.87988387135405, -3.87988387135405, 0.05205777691579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.27036499745445, 0.681964548815884, 0.0, 0.0476704537296609, -0.0476704537296609, 0.588400448638567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.15590389141961, 0.597167821071794, 0.0, 0.246928287508591, -0.246928287508591, 0.558736070347817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.959723539032638, 0.451830662395079, 0.0, 0.58844579857228, -0.58844579857228, 0.507892876637559, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.697669377677517, 0.257691918288656, 0.0, 1.04463870403382, -1.04463870403382, 0.439977459388861, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.390965491509821, 0.030475120947031, 0.0, 1.57855938754315, -1.57855938754315, 0.36049037056279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06445788862847, -0.211412951491113, 0.0, 2.14695506286264, -2.14695506286264, 0.275870840119583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.255401815230884, -0.448376031475776, 0.0, 2.70377784670666, -2.70377784670666, 0.192974216244893, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.542699578925712, -0.661216105221883, 0.0, 3.20391568414759, -3.20391568414759, 0.118516526296171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.774156552136495, -0.832687399024092, 0.0, 3.60684395116058, -3.60684395116058, 0.0585308468875979, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.931000831050428, -0.948883040303626, 0.0, 3.87988387135405, -3.87988387135405, 0.0178822092531985, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.681964548815884, 1.27036499745445, 0.0, 0.0476704537296609, -0.0476704537296609, -0.588400448638567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.597167821071794, 1.15590389141961, 0.0, 0.246928287508591, -0.246928287508591, -0.558736070347818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.451830662395079, 0.959723539032638, 0.0, 0.58844579857228, -0.58844579857228, -0.507892876637558, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.257691918288656, 0.697669377677518, 0.0, 1.04463870403382, -1.04463870403382, -0.439977459388861, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0304751209470305, 0.390965491509822, 0.0, 1.57855938754315, -1.57855938754315, -0.360490370562791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211412951491113, 0.06445788862847, 0.0, 2.14695506286264, -2.14695506286264, -0.275870840119582, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.448376031475776, -0.255401815230884, 0.0, 2.70377784670666, -2.70377784670666, -0.192974216244892, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.661216105221883, -0.542699578925712, 0.0, 3.20391568414759, -3.20391568414759, -0.11851652629617, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.832687399024092, -0.774156552136495, 0.0, 3.60684395116058, -3.60684395116058, -0.0585308468875969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.948883040303626, -0.931000831050428, 0.0, 3.87988387135405, -3.87988387135405, -0.0178822092531972, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.119704062417917, 1.83262548385242, 0.0, 0.0476704537296611, -0.0476704537296611, -1.7129214214345, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0632538592304318, 1.68981785326097, 0.0, 0.246928287508591, -0.246928287508591, -1.62656399403054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0334988381466687, 1.44505303957439, 0.0, 0.58844579857228, -0.58844579857228, -1.47855187772105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.162739338846705, 1.11810063481288, 0.0, 1.04463870403382, -1.04463870403382, -1.28083997365958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.314000298069726, 0.735440910526578, 0.0, 1.57855938754315, -1.57855938754315, -1.0494412085963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.475028101866247, 0.328073039003604, 0.0, 2.14695506286264, -2.14695506286264, -0.803101140869851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.632777278856144, -0.0710005678505161, 0.0, 2.70377784670666, -2.70377784670666, -0.561776711005628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.77446747998828, -0.429448204159315, 0.0, 3.20391568414759, -3.20391568414759, -0.345019275828964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.888617985950821, -0.718225965209766, 0.0, 3.60684395116058, -3.60684395116058, -0.170392020741054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.965970824134921, -0.913913047219132, 0.0, 3.87988387135405, -3.87988387135405, -0.0520577769157886, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.366460482268338, 2.31879002853867, 0.0, 0.0476704537296614, -0.0476704537296614, -2.68525051080701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.398400559743832, 2.15147227223524, 0.0, 0.246928287508591, -0.246928287508591, -2.54987283197907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.453144182896507, 1.86469838432422, 0.0, 0.58844579857228, -0.58844579857228, -2.31784256722073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.526269723146926, 1.4816310191131, 0.0, 1.04463870403382, -1.04463870403382, -2.00790074226003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611854654357093, 1.03329526681394, 0.0, 1.57855938754315, -1.57855938754315, -1.64514992117104, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.702965761820914, 0.556010698958272, 0.0, 2.14695506286264, -2.14695506286264, -1.25897646077919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.79222179014766, 0.0884439434409998, 0.0, 2.70377784670666, -2.70377784670666, -0.88066573358866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.872391492755251, -0.331524191392345, 0.0, 3.20391568414759, -3.20391568414759, -0.540867301362906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.936978966288362, -0.669864984872225, 0.0, 3.60684395116058, -3.60684395116058, -0.267113981416136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.980745959231573, -0.899137912122481, 0.0, 3.87988387135405, -3.87988387135405, -0.0816080471090915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.733342978645316, 2.68567252491565, 0.0, 0.0476704537296616, -0.0476704537296616, -3.41901550356097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.746786569270803, 2.49985828176221, 0.0, 0.246928287508591, -0.246928287508591, -3.24664485103301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.769828180850649, 2.18138238227837, 0.0, 0.58844579857228, -0.58844579857228, -2.95121056312901, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.800606748252324, 1.7559680442185, 0.0, 1.04463870403382, -1.04463870403382, -2.55657479247082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.836629477996255, 1.25807009045311, 0.0, 1.57855938754315, -1.57855938754315, -2.09469956844936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874978177404332, 0.728023114541689, 0.0, 2.14695506286264, -2.14695506286264, -1.60300129194602, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.912546073305721, 0.208768226599061, 0.0, 2.70377784670666, -2.70377784670666, -1.12131429990478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.946289531293587, -0.257626152854009, 0.0, 3.20391568414759, -3.20391568414759, -0.688663378439578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.973474423201874, -0.633369527958713, 0.0, 3.60684395116058, -3.60684395116058, -0.340104895243161, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.991895966997081, -0.887987904356972, 0.0, 3.87988387135405, -3.87988387135405, -0.103908062640109, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.948435000846829, 2.90076454711716, 0.0, 0.0476704537296616, -0.0476704537296616, -3.84919954796399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.95103466514855, 2.70410637763996, 0.0, 0.246928287508591, -0.246928287508591, -3.65514104278851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.955490353866463, 2.36704455529418, 0.0, 0.58844579857228, -0.58844579857228, -3.32253490916064, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.961442182151127, 1.9168034781173, 0.0, 1.04463870403382, -1.04463870403382, -2.87824566026843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.968408104215748, 1.3898487166726, 0.0, 1.57855938754315, -1.57855938754315, -2.35825682088835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975823812388204, 0.828868749525561, 0.0, 2.14695506286264, -2.14695506286264, -1.80469256191376, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.983088532103815, 0.279310685397155, 0.0, 2.70377784670666, -2.70377784670666, -1.26239921750097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.989613698303189, -0.214301985844406, 0.0, 3.20391568414759, -3.20391568414759, -0.775311712458783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994870596925654, -0.611973354234933, 0.0, 3.60684395116058, -3.60684395116058, -0.38289724269072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.998432876611274, -0.881450994742779, 0.0, 3.87988387135405, -3.87988387135405, -0.116981881868495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975191136779291, 0.012891249788293, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.926026594409989, 0.012241333712863, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841761138823545, 0.0111274115333846, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729200869529325, 0.00963945446221846, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.59746217916815, 0.00789797394606313, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.45721718738139, 0.00604404690294914, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.319827671349289, 0.00422786697404631, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.196424503538899, 0.00259657542420277, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970066614412667, 0.00128235076858663, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0296372513143052, 0.000391780847181389, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.921418131228913, 0.0666642553386715, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874964570440552, 0.0633033576822997, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.795345595569592, 0.0575429547873383, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.688992011054624, 0.0498483129369194, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.564517522613277, 0.0408426305009364, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.432005778635422, 0.0312554556489172, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.302192056649765, 0.0218634816735698, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.185593461786498, 0.0134276171766034, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0916576180103218, 0.00663139419953152, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0280030239107569, 0.00202600825072963, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.829697507134668, 0.158384879432916, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.787868068058809, 0.150399860064042, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.716174596081056, 0.136713954275874, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620407754778275, 0.118432569213269, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.508323816703486, 0.0970363364107271, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.389002674739568, 0.0742585595447716, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27211098586025, 0.051944552463085, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.167118952151914, 0.0319021268111873, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0825337537819436, 0.0157552584279097, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0252155219693798, 0.0048135101921068, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.708156370963105, 0.279926015604479, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.672454463315244, 0.265813464807608, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611263259893597, 0.241625290463333, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.52952515870322, 0.209315165288324, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.433860227631645, 0.171499925482569, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.332018259750901, 0.131242974533438, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.232249858037371, 0.091805680285964, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.142637948960171, 0.05638313000293, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0704435086975585, 0.0278455035122948, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0215217381952169, 0.00850729396626965, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567591249363613, 0.420491137203971, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.538975972854903, 0.399291955267949, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48993088475816, 0.36295766559877, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.42441734441938, 0.314422979572164, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.347741372877455, 0.257618780236758, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.266114472157118, 0.197146762127222, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.186149546192279, 0.137905992131056, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.114325105268572, 0.0846959736945293, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0564608619658763, 0.041828150243977, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017249792237393, 0.0127792399240936, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.420491137203971, 0.567591249363613, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.399291955267949, 0.538975972854903, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36295766559877, 0.48993088475816, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.314422979572164, 0.42441734441938, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.257618780236758, 0.347741372877455, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.197146762127222, 0.266114472157117, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.137905992131056, 0.186149546192279, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0846959736945293, 0.114325105268572, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.041828150243977, 0.0564608619658764, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127792399240935, 0.017249792237393, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27992601560448, 0.708156370963105, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.265813464807608, 0.672454463315244, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.241625290463333, 0.611263259893597, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.209315165288324, 0.52952515870322, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.171499925482569, 0.433860227631644, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.131242974533438, 0.332018259750901, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.091805680285964, 0.232249858037371, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05638313000293, 0.142637948960171, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0278455035122948, 0.0704435086975585, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00850729396626959, 0.021521738195217, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.158384879432916, 0.829697507134668, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.150399860064042, 0.787868068058809, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.136713954275874, 0.716174596081056, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.118432569213269, 0.620407754778275, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970363364107271, 0.508323816703486, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0742585595447716, 0.389002674739568, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.051944552463085, 0.27211098586025, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0319021268111874, 0.167118952151914, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0157552584279096, 0.0825337537819437, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00481351019210674, 0.0252155219693798, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0666642553386714, 0.921418131228913, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0633033576822997, 0.874964570440552, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0575429547873383, 0.795345595569592, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0498483129369194, 0.688992011054624, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0408426305009364, 0.564517522613277, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312554556489172, 0.432005778635422, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218634816735698, 0.302192056649765, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0134276171766034, 0.185593461786498, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00663139419953146, 0.0916576180103219, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00202600825072957, 0.028003023910757, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012891249788293, 0.975191136779291, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012241333712863, 0.926026594409989, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0111274115333846, 0.841761138823545, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00963945446221846, 0.729200869529325, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00789797394606313, 0.59746217916815, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0060440469029492, 0.45721718738139, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00422786697404631, 0.319827671349289, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00259657542420272, 0.196424503538899, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00128235076858657, 0.0970066614412667, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000391780847181333, 0.0296372513143052, 0.969970967838513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2_D01[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2_D10[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975191136779291, 0.012891249788293, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.926026594409989, 0.012241333712863, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841761138823545, 0.0111274115333846, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729200869529325, 0.00963945446221846, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.59746217916815, 0.00789797394606313, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.45721718738139, 0.00604404690294914, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.319827671349289, 0.00422786697404631, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.196424503538899, 0.00259657542420277, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970066614412667, 0.00128235076858663, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0296372513143052, 0.000391780847181389, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.921418131228913, 0.0666642553386715, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874964570440552, 0.0633033576822997, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.795345595569592, 0.0575429547873383, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.688992011054624, 0.0498483129369194, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.564517522613277, 0.0408426305009364, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.432005778635422, 0.0312554556489172, 0.53673876571566, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.302192056649765, 0.0218634816735698, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.185593461786498, 0.0134276171766034, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0916576180103218, 0.00663139419953152, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0280030239107569, 0.00202600825072963, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.829697507134668, 0.158384879432916, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.787868068058809, 0.150399860064042, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.716174596081056, 0.136713954275874, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620407754778275, 0.118432569213269, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.508323816703486, 0.0970363364107271, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.389002674739568, 0.0742585595447716, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27211098586025, 0.051944552463085, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.167118952151914, 0.0319021268111873, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0825337537819436, 0.0157552584279097, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0252155219693798, 0.0048135101921068, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.708156370963105, 0.279926015604479, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.672454463315244, 0.265813464807608, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611263259893597, 0.241625290463333, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.52952515870322, 0.209315165288324, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.433860227631645, 0.171499925482569, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.332018259750901, 0.131242974533438, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.232249858037371, 0.091805680285964, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.142637948960171, 0.05638313000293, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0704435086975585, 0.0278455035122948, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0215217381952169, 0.00850729396626965, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567591249363613, 0.420491137203971, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.538975972854903, 0.399291955267949, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48993088475816, 0.36295766559877, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.42441734441938, 0.314422979572164, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.347741372877455, 0.257618780236758, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.266114472157118, 0.197146762127222, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.186149546192279, 0.137905992131056, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.114325105268572, 0.0846959736945293, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0564608619658763, 0.041828150243977, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.017249792237393, 0.0127792399240936, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.420491137203971, 0.567591249363613, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.399291955267949, 0.538975972854903, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36295766559877, 0.48993088475816, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.314422979572164, 0.42441734441938, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.257618780236758, 0.347741372877455, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.197146762127222, 0.266114472157117, 0.53673876571566, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.137905992131056, 0.186149546192279, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0846959736945293, 0.114325105268572, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.041828150243977, 0.0564608619658764, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127792399240935, 0.017249792237393, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27992601560448, 0.708156370963105, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.265813464807608, 0.672454463315244, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.241625290463333, 0.611263259893597, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.209315165288324, 0.52952515870322, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.171499925482569, 0.433860227631644, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.131242974533438, 0.332018259750901, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.091805680285964, 0.232249858037371, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05638313000293, 0.142637948960171, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0278455035122948, 0.0704435086975585, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00850729396626959, 0.021521738195217, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.158384879432916, 0.829697507134668, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.150399860064042, 0.787868068058809, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.136713954275874, 0.716174596081056, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.118432569213269, 0.620407754778275, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970363364107271, 0.508323816703486, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0742585595447716, 0.389002674739568, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.051944552463085, 0.27211098586025, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0319021268111874, 0.167118952151914, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0157552584279096, 0.0825337537819437, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00481351019210674, 0.0252155219693798, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0666642553386714, 0.921418131228913, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0633033576822997, 0.874964570440552, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0575429547873383, 0.795345595569592, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0498483129369194, 0.688992011054624, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0408426305009364, 0.564517522613277, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312554556489172, 0.432005778635422, 0.53673876571566, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218634816735698, 0.302192056649765, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0134276171766034, 0.185593461786498, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00663139419953146, 0.0916576180103219, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00202600825072957, 0.028003023910757, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012891249788293, 0.975191136779291, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012241333712863, 0.926026594409989, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0111274115333846, 0.841761138823545, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00963945446221846, 0.729200869529325, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00789797394606313, 0.59746217916815, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0060440469029492, 0.45721718738139, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00422786697404631, 0.319827671349289, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00259657542420272, 0.196424503538899, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00128235076858657, 0.0970066614412667, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000391780847181333, 0.0296372513143052, 0.969970967838513, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3_D01[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3_D10[100][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1[100][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    static const double FE3_C0[100][2] = \
    {{1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0},
    {1.0, 0.0}};
    
    static const double FE3_C1[100][2] = \
    {{0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0},
    {0.0, 1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 441; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 1151406000
    for (unsigned int ip = 0; ip < 100; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      
      // Total number of operations to compute function values = 4
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE1[ip][0]*w[5][0];
        F13 += FE1[ip][0]*w[4][0];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 8
      for (unsigned int r = 0; r < 2; r++)
      {
        F11 += FE3_C0[ip][r]*w[3][r];
        F12 += FE3_C1[ip][r]*w[3][r];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 420
      for (unsigned int r = 0; r < 21; r++)
      {
        F1 += FE0_C2_D10[ip][r]*w[0][r];
        F2 += FE0_C2_D01[ip][r]*w[0][r];
        F3 += FE0_C3_D10[ip][r]*w[0][r];
        F4 += FE0_C3_D01[ip][r]*w[0][r];
        F5 += FE0_C0[ip][r]*w[0][r];
        F6 += FE0_C0_D10[ip][r]*w[0][r];
        F7 += FE0_C0_D01[ip][r]*w[0][r];
        F8 += FE0_C1[ip][r]*w[0][r];
        F9 += FE0_C1_D10[ip][r]*w[0][r];
        F10 += FE0_C1_D01[ip][r]*w[0][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 11513628
      for (unsigned int j = 0; j < 21; j++)
      {
        for (unsigned int k = 0; k < 21; k++)
        {
          // Number of operations to compute entry: 26108
          A[j*21 + k] += (((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*F0)*((FE0_C0[ip][j]*((F5*((K[0]*F6 + K[2]*F7)) + F8*((K[1]*F6 + K[3]*F7)))) + FE0_C1[ip][j]*((F5*((K[0]*F9 + K[2]*F10)) + F8*((K[1]*F9 + K[3]*F10)))))) + ((FE0_C0[ip][j]*(((((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*F5 + FE0_C0[ip][k]*((K[0]*F6 + K[2]*F7))) + (((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*F8 + FE0_C1[ip][k]*((K[1]*F6 + K[3]*F7))))) + FE0_C1[ip][j]*(((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*F5 + FE0_C0[ip][k]*((K[0]*F9 + K[2]*F10))) + (((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*F8 + FE0_C1[ip][k]*((K[1]*F9 + K[3]*F10)))))))*(F0*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))*1000.0 + ((((K[0]*FE0_C0_D10[ip][j] + K[2]*FE0_C0_D01[ip][j]))*(((((((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)))))))) + (((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))))))))*(F0*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*F0)*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))))))))) + ((K[0]*FE0_C1_D10[ip][j] + K[2]*FE0_C1_D01[ip][j]))*(((((((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)))))))) + (((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))))))))*(F0*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*F0)*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))))))))) + (((K[1]*FE0_C0_D10[ip][j] + K[3]*FE0_C0_D01[ip][j]))*(((((((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)))))))) + (((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))))))))*(F0*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*F0)*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))))))))) + ((K[1]*FE0_C1_D10[ip][j] + K[3]*FE0_C1_D01[ip][j]))*(((((((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)))))))) + (((((((((((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0)*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))))))) + (((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + (((((((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5 + ((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5))*2000000)*1.0 + (((2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + 2.0*(((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*0.5)*1000000.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))*(-1.0) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))))))))*(F0*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*F0)*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(1000000.0*(0.5*(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((1.0*(2000000*((0.5*((((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[1]*F1 + K[3]*F2)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)) + 0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0))))) + 1000000.0*(0.5*((((((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4))))))) + ((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))*((-1.0)*((-1.0)*((K[0]*F3 + K[2]*F4)))/(((((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (-1.0)*(((-1.0)*((K[1]*F1 + K[3]*F2)))*((-1.0)*((K[0]*F3 + K[2]*F4)))))))) + (-1.0)*1.0)))))))))))))) + (((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*(-1.0))*((-1.0)*((K[1]*F1 + K[3]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*(-1.0))*((-1.0)*((K[0]*F3 + K[2]*F4)))))*(-1.0) + ((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(-1.0))*(((-1.0)*((K[1]*F3 + K[3]*F4)) + 1.0)) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(-1.0))*(((-1.0)*((K[0]*F1 + K[2]*F2)) + 1.0)))))*F0)*((FE0_C0[ip][j]*F11 + FE0_C1[ip][j]*F12)))*(-1.0)) + (FE0_C2[ip][j]*(((((((((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*F5 + FE0_C0[ip][k]*((K[0]*F1 + K[2]*F2))) + (((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*F8 + FE0_C1[ip][k]*((K[1]*F1 + K[3]*F2)))))*F0)*F13 + FE0_C2[ip][k]) + FE0_C0[ip][k]*F0*F13*(-1.0))) + FE0_C3[ip][j]*(((((((((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*F5 + FE0_C0[ip][k]*((K[0]*F3 + K[2]*F4))) + (((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*F8 + FE0_C1[ip][k]*((K[1]*F3 + K[3]*F4)))))*F0)*F13 + FE0_C3[ip][k]) + FE0_C1[ip][k]*F0*F13*(-1.0)))))*W100[ip]*det;
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_interior_facet_integral_0_5: public ufc::interior_facet_integral
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_interior_facet_integral_0_5() : ufc::interior_facet_integral()
  {
    
  }

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_interior_facet_integral_0_5() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({false, false, false, false, false, false});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // Compute Jacobian
    double J_0[4];
    compute_jacobian_triangle_2d(J_0, coordinate_dofs_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[4];
    double detJ_0;
    compute_jacobian_inverse_triangle_2d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[4];
    compute_jacobian_triangle_2d(J_1, coordinate_dofs_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[4];
    double detJ_1;
    compute_jacobian_inverse_triangle_2d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet_0][0];
    const unsigned int v1 = edge_vertices[facet_0][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = coordinate_dofs_0[2*v1 + 0] - coordinate_dofs_0[2*v0 + 0];
    const double dx1 = coordinate_dofs_0[2*v1 + 1] - coordinate_dofs_0[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    const bool direction = dx1*(coordinate_dofs_0[2*facet_0] - coordinate_dofs_0[2*v0]) - dx0*(coordinate_dofs_0[2*facet_0 + 1] - coordinate_dofs_0[2*v0 + 1]) < 0;
    // Compute facet normals from the facet scale factor constants
    const double n_00 = direction ? dx1 / det : -dx1 / det;
    const double n_01 = direction ? -dx0 / det : dx0 / det;// Compute facet normals from the facet scale factor constants
    
    // Facet area
    
    // Compute cell volume
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W2[2] = {0.5, 0.5};
    // Quadrature points on the UFC reference element: (0.211324865405187), (0.788675134594813)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0_C0_D01[2][21] = \
    {{0.999999999999995, 0.0, -0.154700538379251, 3.15470053837924, -0.845299461620737, -3.15470053837925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.999999999999995, 0.0, 2.15470053837925, 0.845299461620733, -3.15470053837924, -0.845299461620747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C0_D10[2][21] = \
    {{1, 2.15470053837925, 0.0, 0.845299461620747, -0.845299461620747, -3.15470053837925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1.0, -0.154700538379251, 0.0, 3.15470053837925, -3.15470053837925, -0.845299461620749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C1_D01[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, -0.154700538379251, 3.15470053837924, -0.845299461620737, -3.15470053837925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.999999999999995, 0.0, 2.15470053837925, 0.845299461620733, -3.15470053837924, -0.845299461620747, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C1_D10[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 2.15470053837925, 0.0, 0.845299461620747, -0.845299461620747, -3.15470053837925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.154700538379251, 0.0, 3.15470053837925, -3.15470053837925, -0.845299461620749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C2[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C3[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C0_D01[2][21] = \
    {{-2.15470053837926, 0.0, -0.154700538379251, -1.01030295240889e-14, 2.30940107675851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.154700538379246, 0.0, 2.15470053837925, -1.37667655053519e-14, -2.30940107675849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C0_D10[2][21] = \
    {{-2.15470053837925, -1, 0.0, 0.845299461620747, -0.845299461620747, 3.15470053837926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.154700538379251, -1.0, 0.0, 3.15470053837925, -3.15470053837925, 0.84529946162075, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C1_D01[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.15470053837926, 0.0, -0.154700538379251, -1.01030295240889e-14, 2.30940107675851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.154700538379246, 0.0, 2.15470053837925, -1.37667655053519e-14, -2.30940107675849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C1_D10[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.15470053837925, -1, 0.0, 0.845299461620747, -0.845299461620747, 3.15470053837926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.154700538379251, -1.0, 0.0, 3.15470053837925, -3.15470053837925, 0.84529946162075, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C2[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.0, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.0, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C3[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.0, 0.211324865405187, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.0, 0.788675134594813, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C0_D01[2][21] = \
    {{-2.15470053837926, 0.0, -1.0, 0.845299461620739, 3.15470053837926, -0.845299461620748, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.154700538379247, 0.0, -1.0, 3.15470053837924, 0.845299461620759, -3.15470053837925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C0_D10[2][21] = \
    {{-2.15470053837925, -0.154700538379254, 0.0, 0.0, 0.0, 2.30940107675851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.154700538379253, 2.15470053837925, 0.0, 0.0, 0.0, -2.3094010767585, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C1_D01[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.15470053837926, 0.0, -1.0, 0.845299461620739, 3.15470053837926, -0.845299461620748, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.154700538379247, 0.0, -1.0, 3.15470053837924, 0.845299461620759, -3.15470053837925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C1_D10[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.15470053837925, -0.154700538379254, 0.0, 0.0, 0.0, 2.30940107675851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.154700538379253, 2.15470053837925, 0.0, 0.0, 0.0, -2.3094010767585, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C2[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C3[2][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 1764; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f0_C2[ip][j]*((((K_1[0]*FE0_f0_C0_D10[ip][k] + K_1[2]*FE0_f0_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f0_C0_D10[ip][k] + K_1[3]*FE0_f0_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f0_C3[ip][j]*((((K_1[0]*FE0_f0_C1_D10[ip][k] + K_1[2]*FE0_f0_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f0_C1_D10[ip][k] + K_1[3]*FE0_f0_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f1_C2[ip][j]*((((K_1[0]*FE0_f1_C0_D10[ip][k] + K_1[2]*FE0_f1_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f1_C0_D10[ip][k] + K_1[3]*FE0_f1_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f1_C3[ip][j]*((((K_1[0]*FE0_f1_C1_D10[ip][k] + K_1[2]*FE0_f1_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f1_C1_D10[ip][k] + K_1[3]*FE0_f1_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f2_C2[ip][j]*((((K_1[0]*FE0_f2_C0_D10[ip][k] + K_1[2]*FE0_f2_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f2_C0_D10[ip][k] + K_1[3]*FE0_f2_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f2_C3[ip][j]*((((K_1[0]*FE0_f2_C1_D10[ip][k] + K_1[2]*FE0_f2_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f2_C1_D10[ip][k] + K_1[3]*FE0_f2_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f0_C2[ip][j]*((((K_1[0]*FE0_f0_C0_D10[ip][k] + K_1[2]*FE0_f0_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f0_C0_D10[ip][k] + K_1[3]*FE0_f0_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f0_C3[ip][j]*((((K_1[0]*FE0_f0_C1_D10[ip][k] + K_1[2]*FE0_f0_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f0_C1_D10[ip][k] + K_1[3]*FE0_f0_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f1_C2[ip][j]*((((K_1[0]*FE0_f1_C0_D10[ip][k] + K_1[2]*FE0_f1_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f1_C0_D10[ip][k] + K_1[3]*FE0_f1_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f1_C3[ip][j]*((((K_1[0]*FE0_f1_C1_D10[ip][k] + K_1[2]*FE0_f1_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f1_C1_D10[ip][k] + K_1[3]*FE0_f1_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f2_C2[ip][j]*((((K_1[0]*FE0_f2_C0_D10[ip][k] + K_1[2]*FE0_f2_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f2_C0_D10[ip][k] + K_1[3]*FE0_f2_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f2_C3[ip][j]*((((K_1[0]*FE0_f2_C1_D10[ip][k] + K_1[2]*FE0_f2_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f2_C1_D10[ip][k] + K_1[3]*FE0_f2_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f0_C2[ip][j]*((((K_1[0]*FE0_f0_C0_D10[ip][k] + K_1[2]*FE0_f0_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f0_C0_D10[ip][k] + K_1[3]*FE0_f0_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f0_C3[ip][j]*((((K_1[0]*FE0_f0_C1_D10[ip][k] + K_1[2]*FE0_f0_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f0_C1_D10[ip][k] + K_1[3]*FE0_f0_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f1_C2[ip][j]*((((K_1[0]*FE0_f1_C0_D10[ip][k] + K_1[2]*FE0_f1_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f1_C0_D10[ip][k] + K_1[3]*FE0_f1_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f1_C3[ip][j]*((((K_1[0]*FE0_f1_C1_D10[ip][k] + K_1[2]*FE0_f1_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f1_C1_D10[ip][k] + K_1[3]*FE0_f1_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 25578
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 25578
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices: 12789
          for (unsigned int j = 0; j < 21; j++)
          {
            for (unsigned int k = 0; k < 21; k++)
            {
              // Number of operations to compute entry: 29
              A[(j + 21)*42 + (k + 21)] += ((FE0_f2_C2[ip][j]*((((K_1[0]*FE0_f2_C0_D10[ip][k] + K_1[2]*FE0_f2_C0_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f2_C0_D10[ip][k] + K_1[3]*FE0_f2_C0_D01[ip][k]))*((-1.0)*n_01))) + FE0_f2_C3[ip][j]*((((K_1[0]*FE0_f2_C1_D10[ip][k] + K_1[2]*FE0_f2_C1_D01[ip][k]))*((-1.0)*n_00) + ((K_1[1]*FE0_f2_C1_D10[ip][k] + K_1[3]*FE0_f2_C1_D01[ip][k]))*((-1.0)*n_01)))))*(-1.0)*W2[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};


class ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0: public ufc::form
{
public:

  ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0();

  ~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};

extern "C" DLL_EXPORT ufc::form * create_ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0()
{
  return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0();
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0() : ufc::form()
{
    // Do nothing
}

ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::~ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0()
{
    // Do nothing
}

const char * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::signature() const
{
    return "5c95d3da3424676928f3222129588e5e7d4e435e43af3ad5c9bb16becd00af33f421cfd84985d61d774f73b18f8d395a37a5feca69a24ee1a8ac474d65a3cc0a";
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::rank() const
{
    return 2;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::num_coefficients() const
{
    return 6;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0, 2, 3, 4, 5, 6});
    return position[i];
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_coordinate_finite_element() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_5();
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_coordinate_dofmap() const
{
    return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_5();
}

ufc::coordinate_mapping * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6();
        break;
      }
    case 2:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_6();
        break;
      }
    case 3:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
        break;
      }
    case 4:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
        break;
      }
    case 5:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_1();
        break;
      }
    case 6:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
        break;
      }
    case 7:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6();
        break;
      }
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6();
        break;
      }
    case 2:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_6();
        break;
      }
    case 3:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
        break;
      }
    case 4:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
        break;
      }
    case 5:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_1();
        break;
      }
    case 6:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
        break;
      }
    case 7:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_dofmap_0();
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_cell_subdomain_id() const
{
    return 3;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_interior_facet_subdomain_id() const
{
    return 6;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_cell_integrals() const
{
    return true;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_interior_facet_integrals() const
{
    return true;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_custom_integrals() const
{
    return false;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_interface_integrals() const
{
    return false;
}

bool ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 1:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_cell_integral_0_2();
        break;
      }
    }
    
    return 0;
}

ufc::exterior_facet_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 5:
      {
        return new ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_interior_facet_integral_0_5();
        break;
      }
    }
    
    return 0;
}

ufc::vertex_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_cell_integral() const
{
    return 0;
}

ufc::exterior_facet_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * ffc_form_f32396425367de2a46727051cc2a8550bf32c00b_form_0::create_default_overlap_integral() const
{
    return 0;
}

