// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_76E710C42DE53B16A6F81EE406E47A24E84A5933_H
#define __FFC_FORM_76E710C42DE53B16A6F81EE406E47A24E84A5933_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_3();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_4: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_4()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Domain(Cell('triangle', 2)), 1, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_4();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_5: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_5()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), VectorElement('Lagrange', Domain(Cell('triangle', 2)), 1, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (5,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 21; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[20];
    for (unsigned int r = 0; r < 20; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 16:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 17:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 18:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 19:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 20:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[16] = vals[3];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[17] = vals[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[18] = vals[4];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[19] = vals[4];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[4];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[15];
    vertex_values[8] = dof_values[16];
    vertex_values[13] = dof_values[17];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[18];
    vertex_values[9] = dof_values[19];
    vertex_values[14] = dof_values[20];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_4();
        break;
      }
    case 2:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_5();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('triangle', 2)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_4: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_4()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Domain(Cell('triangle', 2)), 1, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[0][0];
    dofs[4] = offset + c.entity_indices[0][1];
    dofs[5] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[0];
    dof_coordinates[7] = vertex_coordinates[1];
    dof_coordinates[8] = vertex_coordinates[2];
    dof_coordinates[9] = vertex_coordinates[3];
    dof_coordinates[10] = vertex_coordinates[4];
    dof_coordinates[11] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_4();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_5: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_5()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None), VectorElement('Lagrange', Domain(Cell('triangle', 2)), 1, 2, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None), **{'value_shape': (5,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 5*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 21;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 12;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + c.entity_indices[0][0];
    dofs[16] = offset + c.entity_indices[0][1];
    dofs[17] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[18] = offset + c.entity_indices[0][0];
    dofs[19] = offset + c.entity_indices[0][1];
    dofs[20] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 16;
      dofs[9] = 17;
      dofs[10] = 19;
      dofs[11] = 20;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 17;
      dofs[10] = 18;
      dofs[11] = 20;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 18;
      dofs[11] = 19;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
        dofs[3] = 15;
        dofs[4] = 18;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
        dofs[3] = 16;
        dofs[4] = 19;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
        dofs[3] = 17;
        dofs[4] = 20;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[24] = vertex_coordinates[0];
    dof_coordinates[25] = vertex_coordinates[1];
    dof_coordinates[26] = vertex_coordinates[2];
    dof_coordinates[27] = vertex_coordinates[3];
    dof_coordinates[28] = vertex_coordinates[4];
    dof_coordinates[29] = vertex_coordinates[5];
    dof_coordinates[30] = vertex_coordinates[0];
    dof_coordinates[31] = vertex_coordinates[1];
    dof_coordinates[32] = vertex_coordinates[2];
    dof_coordinates[33] = vertex_coordinates[3];
    dof_coordinates[34] = vertex_coordinates[4];
    dof_coordinates[35] = vertex_coordinates[5];
    dof_coordinates[36] = vertex_coordinates[0];
    dof_coordinates[37] = vertex_coordinates[1];
    dof_coordinates[38] = vertex_coordinates[2];
    dof_coordinates[39] = vertex_coordinates[3];
    dof_coordinates[40] = vertex_coordinates[4];
    dof_coordinates[41] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 3;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_4();
        break;
      }
    case 2:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_5();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_2: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_2() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Values of basis functions at quadrature points.
    static const double FE0_C0_D01[6][6] = \
    {{-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C0_D10[6][6] = \
    {{-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1_D01[6][6] = \
    {{0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0}};
    
    static const double FE0_C1_D10[6][6] = \
    {{0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0}};
    
    static const double FE1_C0[6][12] = \
    {{-0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1[6][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048}};
    
    static const double FE2_C0[6][21] = \
    {{-0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D01[6][21] = \
    {{0.633695145960915, 0.0, -0.633695145960916, 3.26739029192182, 0.0, -3.26739029192184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.633695145960915, 0.0, 2.26739029192184, 0.366304854039066, -2.90108543788275, -0.366304854039082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.26739029192184, 0.0, -0.633695145960916, 0.366304854039074, 2.90108543788276, -0.366304854039083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.783793963663865, 0.0, 0.783793963663862, 0.432412072672267, 0.0, -0.432412072672279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.783793963663864, 0.0, -0.567587927327719, 1.78379396366385, 1.35138189099159, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.567587927327715, 0.0, 0.783793963663862, 1.78379396366385, -1.35138189099157, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D10[6][21] = \
    {{0.633695145960923, 2.26739029192184, 0.0, 0.366304854039082, -0.366304854039082, -2.90108543788276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.633695145960919, -0.633695145960917, 0.0, 3.26739029192183, -3.26739029192183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.26739029192183, -0.633695145960918, 0.0, 0.366304854039083, -0.366304854039083, 2.90108543788275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.78379396366386, -0.567587927327721, 0.0, 1.78379396366386, -1.78379396366386, 1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.783793963663859, 0.783793963663859, 0.0, 0.432412072672279, -0.432412072672279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.567587927327721, 0.783793963663861, 0.0, 1.78379396366386, -1.78379396366386, -1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1[6][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1_D01[6][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, -0.633695145960916, 3.26739029192182, 0.0, -3.26739029192184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960915, 0.0, 2.26739029192184, 0.366304854039066, -2.90108543788275, -0.366304854039082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192184, 0.0, -0.633695145960916, 0.366304854039074, 2.90108543788276, -0.366304854039083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663865, 0.0, 0.783793963663862, 0.432412072672267, 0.0, -0.432412072672279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663864, 0.0, -0.567587927327719, 1.78379396366385, 1.35138189099159, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327715, 0.0, 0.783793963663862, 1.78379396366385, -1.35138189099157, -1.78379396366386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1_D10[6][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960923, 2.26739029192184, 0.0, 0.366304854039082, -0.366304854039082, -2.90108543788276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.633695145960919, -0.633695145960917, 0.0, 3.26739029192183, -3.26739029192183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26739029192183, -0.633695145960918, 0.0, 0.366304854039083, -0.366304854039083, 2.90108543788275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.78379396366386, -0.567587927327721, 0.0, 1.78379396366386, -1.78379396366386, 1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.783793963663859, 0.783793963663859, 0.0, 0.432412072672279, -0.432412072672279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567587927327721, 0.783793963663861, 0.0, 1.78379396366386, -1.78379396366386, -1.35138189099158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE3[6][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 21; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 11940
    for (unsigned int ip = 0; ip < 6; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      
      // Total number of operations to compute function values = 4
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE3[ip][0]*w[3][0];
        F1 += FE3[ip][0]*w[2][0];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 6; r++)
      {
        F4 += FE0_C0_D10[ip][r]*w[1][r];
        F5 += FE0_C0_D01[ip][r]*w[1][r];
        F6 += FE0_C1_D10[ip][r]*w[1][r];
        F7 += FE0_C1_D01[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 12; r++)
      {
        F2 += FE1_C0[ip][r]*w[0][r];
        F3 += FE1_C1[ip][r]*w[0][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 1890
      for (unsigned int j = 0; j < 21; j++)
      {
        // Number of operations to compute entry: 90
        A[j] += ((((((FE2_C0[ip][j]*((-1.0)*F2) + FE2_C1[ip][j]*((-1.0)*F3)))*1.0/(F1))*F0)*(-1.0) + (((FE2_C0[ip][j]*((-1.0)*F2) + FE2_C1[ip][j]*((-1.0)*F3)))*1000.0/(F1))*(-1.0)) + (((((K[0]*FE2_C0_D10[ip][j] + K[2]*FE2_C0_D01[ip][j]))*((1.0*(8000000*((2.0*((K[0]*F4 + K[2]*F5))/(2.0) + 2.0*((K[1]*F6 + K[3]*F7))/(2.0)))) + 4000000.0*(2.0*((K[0]*F4 + K[2]*F5))/(2.0)))) + ((K[0]*FE2_C1_D10[ip][j] + K[2]*FE2_C1_D01[ip][j]))*(4000000.0*(((K[0]*F6 + K[2]*F7) + (K[1]*F4 + K[3]*F5))/(2.0)))) + (((K[1]*FE2_C0_D10[ip][j] + K[3]*FE2_C0_D01[ip][j]))*(4000000.0*(((K[0]*F6 + K[2]*F7) + (K[1]*F4 + K[3]*F5))/(2.0))) + ((K[1]*FE2_C1_D10[ip][j] + K[3]*FE2_C1_D01[ip][j]))*((1.0*(8000000*((2.0*((K[0]*F4 + K[2]*F5))/(2.0) + 2.0*((K[1]*F6 + K[3]*F7))/(2.0)))) + 4000000.0*(2.0*((K[1]*F6 + K[3]*F7))/(2.0)))))))*(-1.0))*W6[ip]*det;
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, false, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Values of basis functions at quadrature points.
    static const double FE1_C0[6][12] = \
    {{-0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1[6][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048}};
    
    static const double FE2_C0[6][21] = \
    {{-0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1[6][21] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, 0.517632341987673, -0.0748038077481966, 0.299215230992787, 0.0335448115231483, 0.299215230992784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.074803807748196, -0.0748038077481966, 0.517632341987674, 0.299215230992787, 0.299215230992784, 0.0335448115231483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.517632341987671, -0.0748038077481966, -0.0748038077481966, 0.0335448115231487, 0.299215230992787, 0.299215230992787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.0847304930939778, -0.0482083778155119, 0.192833511262048, 0.795480226200906, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0482083778155119, -0.048208377815512, -0.0847304930939778, 0.192833511262048, 0.192833511262048, 0.795480226200906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0847304930939778, -0.048208377815512, -0.0482083778155119, 0.795480226200906, 0.192833511262048, 0.192833511262048, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE3[6][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 21; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 1698
    for (unsigned int ip = 0; ip < 6; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      
      // Total number of operations to compute function values = 4
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE3[ip][0]*w[3][0];
        F1 += FE3[ip][0]*w[2][0];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 12; r++)
      {
        F2 += FE1_C0[ip][r]*w[0][r];
        F3 += FE1_C1[ip][r]*w[0][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 231
      for (unsigned int j = 0; j < 21; j++)
      {
        // Number of operations to compute entry: 11
        A[j] += ((((FE2_C0[ip][j]*((-1.0)*F2) + FE2_C1[ip][j]*((-1.0)*F3)))*1.0/(F1))*F0)*(-1.0)*W6[ip]*det;
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_exterior_facet_integral_0_otherwise: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_exterior_facet_integral_0_otherwise() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_exterior_facet_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, true, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      10
    // Number of operations (multiply-add pairs) for geometry tensor:    320
    // Number of operations (multiply-add pairs) for tensor contraction: 2478
    // Total number of operations (multiply-add pairs):                  2808
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    // Compute geometry tensor
    const double G0_0_0_0 = det*w[1][0]*K[1]*K[0]*(1.0);
    const double G0_0_0_1 = det*w[1][0]*K[1]*K[2]*(1.0);
    const double G0_0_1_0 = det*w[1][1]*K[1]*K[0]*(1.0);
    const double G0_0_1_1 = det*w[1][1]*K[1]*K[2]*(1.0);
    const double G0_0_2_1 = det*w[1][2]*K[1]*K[2]*(1.0);
    const double G0_1_0_0 = det*w[1][0]*K[3]*K[0]*(1.0);
    const double G0_1_0_1 = det*w[1][0]*K[3]*K[2]*(1.0);
    const double G0_1_1_0 = det*w[1][1]*K[3]*K[0]*(1.0);
    const double G0_1_1_1 = det*w[1][1]*K[3]*K[2]*(1.0);
    const double G0_1_2_1 = det*w[1][2]*K[3]*K[2]*(1.0);
    const double G1_0_0_0 = det*w[1][0]*K[1]*K[0]*(1.0);
    const double G1_0_0_1 = det*w[1][0]*K[1]*K[2]*(1.0);
    const double G1_0_1_0 = det*w[1][1]*K[1]*K[0]*(1.0);
    const double G1_0_1_1 = det*w[1][1]*K[1]*K[2]*(1.0);
    const double G1_0_2_1 = det*w[1][2]*K[1]*K[2]*(1.0);
    const double G1_1_0_0 = det*w[1][0]*K[3]*K[0]*(1.0);
    const double G1_1_0_1 = det*w[1][0]*K[3]*K[2]*(1.0);
    const double G1_1_1_0 = det*w[1][1]*K[3]*K[0]*(1.0);
    const double G1_1_1_1 = det*w[1][1]*K[3]*K[2]*(1.0);
    const double G1_1_2_1 = det*w[1][2]*K[3]*K[2]*(1.0);
    const double G2_0_3_0 = det*w[1][3]*K[1]*K[1]*(1.0);
    const double G2_0_3_1 = det*w[1][3]*K[1]*K[3]*(1.0);
    const double G2_0_4_0 = det*w[1][4]*K[1]*K[1]*(1.0);
    const double G2_0_4_1 = det*w[1][4]*K[1]*K[3]*(1.0);
    const double G2_0_5_1 = det*w[1][5]*K[1]*K[3]*(1.0);
    const double G2_1_3_0 = det*w[1][3]*K[3]*K[1]*(1.0);
    const double G2_1_3_1 = det*w[1][3]*K[3]*K[3]*(1.0);
    const double G2_1_4_0 = det*w[1][4]*K[3]*K[1]*(1.0);
    const double G2_1_4_1 = det*w[1][4]*K[3]*K[3]*(1.0);
    const double G2_1_5_1 = det*w[1][5]*K[3]*K[3]*(1.0);
    const double G3_0_3_0 = det*w[1][3]*K[1]*K[1]*(1.0);
    const double G3_0_3_1 = det*w[1][3]*K[1]*K[3]*(1.0);
    const double G3_0_4_0 = det*w[1][4]*K[1]*K[1]*(1.0);
    const double G3_0_4_1 = det*w[1][4]*K[1]*K[3]*(1.0);
    const double G3_0_5_1 = det*w[1][5]*K[1]*K[3]*(1.0);
    const double G3_1_3_0 = det*w[1][3]*K[3]*K[1]*(1.0);
    const double G3_1_3_1 = det*w[1][3]*K[3]*K[3]*(1.0);
    const double G3_1_4_0 = det*w[1][4]*K[3]*K[1]*(1.0);
    const double G3_1_4_1 = det*w[1][4]*K[3]*K[3]*(1.0);
    const double G3_1_5_1 = det*w[1][5]*K[3]*K[3]*(1.0);
    const double G4_0_3_0 = det*w[1][3]*K[1]*K[1]*(1.0);
    const double G4_0_3_1 = det*w[1][3]*K[1]*K[3]*(1.0);
    const double G4_0_4_0 = det*w[1][4]*K[1]*K[1]*(1.0);
    const double G4_0_4_1 = det*w[1][4]*K[1]*K[3]*(1.0);
    const double G4_0_5_1 = det*w[1][5]*K[1]*K[3]*(1.0);
    const double G4_1_3_0 = det*w[1][3]*K[3]*K[1]*(1.0);
    const double G4_1_3_1 = det*w[1][3]*K[3]*K[3]*(1.0);
    const double G4_1_4_0 = det*w[1][4]*K[3]*K[1]*(1.0);
    const double G4_1_4_1 = det*w[1][4]*K[3]*K[3]*(1.0);
    const double G4_1_5_1 = det*w[1][5]*K[3]*K[3]*(1.0);
    const double G5_0_3_0 = det*w[1][3]*K[1]*K[1]*(1.0);
    const double G5_0_3_1 = det*w[1][3]*K[1]*K[3]*(1.0);
    const double G5_0_4_0 = det*w[1][4]*K[1]*K[1]*(1.0);
    const double G5_0_4_1 = det*w[1][4]*K[1]*K[3]*(1.0);
    const double G5_0_5_1 = det*w[1][5]*K[1]*K[3]*(1.0);
    const double G5_1_3_0 = det*w[1][3]*K[3]*K[1]*(1.0);
    const double G5_1_3_1 = det*w[1][3]*K[3]*K[3]*(1.0);
    const double G5_1_4_0 = det*w[1][4]*K[3]*K[1]*(1.0);
    const double G5_1_4_1 = det*w[1][4]*K[3]*K[3]*(1.0);
    const double G5_1_5_1 = det*w[1][5]*K[3]*K[3]*(1.0);
    const double G6_0_0_0 = det*w[1][0]*K[1]*K[1]*(1.0);
    const double G6_0_0_1 = det*w[1][0]*K[1]*K[3]*(1.0);
    const double G6_0_1_0 = det*w[1][1]*K[1]*K[1]*(1.0);
    const double G6_0_1_1 = det*w[1][1]*K[1]*K[3]*(1.0);
    const double G6_0_2_1 = det*w[1][2]*K[1]*K[3]*(1.0);
    const double G6_1_0_0 = det*w[1][0]*K[3]*K[1]*(1.0);
    const double G6_1_0_1 = det*w[1][0]*K[3]*K[3]*(1.0);
    const double G6_1_1_0 = det*w[1][1]*K[3]*K[1]*(1.0);
    const double G6_1_1_1 = det*w[1][1]*K[3]*K[3]*(1.0);
    const double G6_1_2_1 = det*w[1][2]*K[3]*K[3]*(1.0);
    const double G7_0_3_0 = det*w[1][3]*K[1]*K[0]*(1.0);
    const double G7_0_3_1 = det*w[1][3]*K[1]*K[2]*(1.0);
    const double G7_0_4_0 = det*w[1][4]*K[1]*K[0]*(1.0);
    const double G7_0_4_1 = det*w[1][4]*K[1]*K[2]*(1.0);
    const double G7_0_5_1 = det*w[1][5]*K[1]*K[2]*(1.0);
    const double G7_1_3_0 = det*w[1][3]*K[3]*K[0]*(1.0);
    const double G7_1_3_1 = det*w[1][3]*K[3]*K[2]*(1.0);
    const double G7_1_4_0 = det*w[1][4]*K[3]*K[0]*(1.0);
    const double G7_1_4_1 = det*w[1][4]*K[3]*K[2]*(1.0);
    const double G7_1_5_1 = det*w[1][5]*K[3]*K[2]*(1.0);
    const double G8_0_0_0 = det*w[1][0]*K[0]*K[0]*(1.0);
    const double G8_0_0_1 = det*w[1][0]*K[0]*K[2]*(1.0);
    const double G8_0_1_0 = det*w[1][1]*K[0]*K[0]*(1.0);
    const double G8_0_1_1 = det*w[1][1]*K[0]*K[2]*(1.0);
    const double G8_0_2_1 = det*w[1][2]*K[0]*K[2]*(1.0);
    const double G8_1_0_0 = det*w[1][0]*K[2]*K[0]*(1.0);
    const double G8_1_0_1 = det*w[1][0]*K[2]*K[2]*(1.0);
    const double G8_1_1_0 = det*w[1][1]*K[2]*K[0]*(1.0);
    const double G8_1_1_1 = det*w[1][1]*K[2]*K[2]*(1.0);
    const double G8_1_2_1 = det*w[1][2]*K[2]*K[2]*(1.0);
    const double G9_0_0_0 = det*w[1][0]*K[0]*K[0]*(1.0);
    const double G9_0_0_1 = det*w[1][0]*K[0]*K[2]*(1.0);
    const double G9_0_1_0 = det*w[1][1]*K[0]*K[0]*(1.0);
    const double G9_0_1_1 = det*w[1][1]*K[0]*K[2]*(1.0);
    const double G9_0_2_1 = det*w[1][2]*K[0]*K[2]*(1.0);
    const double G9_1_0_0 = det*w[1][0]*K[2]*K[0]*(1.0);
    const double G9_1_0_1 = det*w[1][0]*K[2]*K[2]*(1.0);
    const double G9_1_1_0 = det*w[1][1]*K[2]*K[0]*(1.0);
    const double G9_1_1_1 = det*w[1][1]*K[2]*K[2]*(1.0);
    const double G9_1_2_1 = det*w[1][2]*K[2]*K[2]*(1.0);
    const double G10_0_3_0 = det*w[1][3]*K[0]*K[1]*(1.0);
    const double G10_0_3_1 = det*w[1][3]*K[0]*K[3]*(1.0);
    const double G10_0_4_0 = det*w[1][4]*K[0]*K[1]*(1.0);
    const double G10_0_4_1 = det*w[1][4]*K[0]*K[3]*(1.0);
    const double G10_0_5_1 = det*w[1][5]*K[0]*K[3]*(1.0);
    const double G10_1_3_0 = det*w[1][3]*K[2]*K[1]*(1.0);
    const double G10_1_3_1 = det*w[1][3]*K[2]*K[3]*(1.0);
    const double G10_1_4_0 = det*w[1][4]*K[2]*K[1]*(1.0);
    const double G10_1_4_1 = det*w[1][4]*K[2]*K[3]*(1.0);
    const double G10_1_5_1 = det*w[1][5]*K[2]*K[3]*(1.0);
    const double G11_0_3_0 = det*w[1][3]*K[0]*K[1]*(1.0);
    const double G11_0_3_1 = det*w[1][3]*K[0]*K[3]*(1.0);
    const double G11_0_4_0 = det*w[1][4]*K[0]*K[1]*(1.0);
    const double G11_0_4_1 = det*w[1][4]*K[0]*K[3]*(1.0);
    const double G11_0_5_1 = det*w[1][5]*K[0]*K[3]*(1.0);
    const double G11_1_3_0 = det*w[1][3]*K[2]*K[1]*(1.0);
    const double G11_1_3_1 = det*w[1][3]*K[2]*K[3]*(1.0);
    const double G11_1_4_0 = det*w[1][4]*K[2]*K[1]*(1.0);
    const double G11_1_4_1 = det*w[1][4]*K[2]*K[3]*(1.0);
    const double G11_1_5_1 = det*w[1][5]*K[2]*K[3]*(1.0);
    const double G12_0_0_0 = det*w[1][0]*K[0]*K[0]*(1.0);
    const double G12_0_0_1 = det*w[1][0]*K[0]*K[2]*(1.0);
    const double G12_0_1_0 = det*w[1][1]*K[0]*K[0]*(1.0);
    const double G12_0_1_1 = det*w[1][1]*K[0]*K[2]*(1.0);
    const double G12_0_2_1 = det*w[1][2]*K[0]*K[2]*(1.0);
    const double G12_1_0_0 = det*w[1][0]*K[2]*K[0]*(1.0);
    const double G12_1_0_1 = det*w[1][0]*K[2]*K[2]*(1.0);
    const double G12_1_1_0 = det*w[1][1]*K[2]*K[0]*(1.0);
    const double G12_1_1_1 = det*w[1][1]*K[2]*K[2]*(1.0);
    const double G12_1_2_1 = det*w[1][2]*K[2]*K[2]*(1.0);
    const double G13_0_0_0 = det*w[1][0]*K[0]*K[0]*(1.0);
    const double G13_0_0_1 = det*w[1][0]*K[0]*K[2]*(1.0);
    const double G13_0_1_0 = det*w[1][1]*K[0]*K[0]*(1.0);
    const double G13_0_1_1 = det*w[1][1]*K[0]*K[2]*(1.0);
    const double G13_0_2_1 = det*w[1][2]*K[0]*K[2]*(1.0);
    const double G13_1_0_0 = det*w[1][0]*K[2]*K[0]*(1.0);
    const double G13_1_0_1 = det*w[1][0]*K[2]*K[2]*(1.0);
    const double G13_1_1_0 = det*w[1][1]*K[2]*K[0]*(1.0);
    const double G13_1_1_1 = det*w[1][1]*K[2]*K[2]*(1.0);
    const double G13_1_2_1 = det*w[1][2]*K[2]*K[2]*(1.0);
    const double G14_0_0_0 = det*w[1][0]*K[0]*K[1]*(1.0);
    const double G14_0_0_1 = det*w[1][0]*K[0]*K[3]*(1.0);
    const double G14_0_1_0 = det*w[1][1]*K[0]*K[1]*(1.0);
    const double G14_0_1_1 = det*w[1][1]*K[0]*K[3]*(1.0);
    const double G14_0_2_1 = det*w[1][2]*K[0]*K[3]*(1.0);
    const double G14_1_0_0 = det*w[1][0]*K[2]*K[1]*(1.0);
    const double G14_1_0_1 = det*w[1][0]*K[2]*K[3]*(1.0);
    const double G14_1_1_0 = det*w[1][1]*K[2]*K[1]*(1.0);
    const double G14_1_1_1 = det*w[1][1]*K[2]*K[3]*(1.0);
    const double G14_1_2_1 = det*w[1][2]*K[2]*K[3]*(1.0);
    const double G15_0_3_0 = det*w[1][3]*K[0]*K[0]*(1.0);
    const double G15_0_3_1 = det*w[1][3]*K[0]*K[2]*(1.0);
    const double G15_0_4_0 = det*w[1][4]*K[0]*K[0]*(1.0);
    const double G15_0_4_1 = det*w[1][4]*K[0]*K[2]*(1.0);
    const double G15_0_5_1 = det*w[1][5]*K[0]*K[2]*(1.0);
    const double G15_1_3_0 = det*w[1][3]*K[2]*K[0]*(1.0);
    const double G15_1_3_1 = det*w[1][3]*K[2]*K[2]*(1.0);
    const double G15_1_4_0 = det*w[1][4]*K[2]*K[0]*(1.0);
    const double G15_1_4_1 = det*w[1][4]*K[2]*K[2]*(1.0);
    const double G15_1_5_1 = det*w[1][5]*K[2]*K[2]*(1.0);
    
    // Compute element tensor
    switch (facet)
    {
    case 0:
      {
        A[0] = 2000000*G6_0_0_0 + 2000000*G6_0_0_1 - 2000000*G6_0_1_0 - 1.77635683940025e-09*G6_0_1_1 - 2000000*G6_0_2_1 + 1999999.99999999*G6_1_0_0 + 1999999.99999999*G6_1_0_1 - 1999999.99999999*G6_1_1_0 - 1.77635683940024e-09*G6_1_1_1 - 1999999.99999999*G6_1_2_1 + 2000000*G7_0_3_0 + 2000000*G7_0_3_1 - 2000000*G7_0_4_0 - 1.77635683940025e-09*G7_0_4_1 - 2000000*G7_0_5_1 + 1999999.99999999*G7_1_3_0 + 1999999.99999999*G7_1_3_1 - 1999999.99999999*G7_1_4_0 - 1.77635683940024e-09*G7_1_4_1 - 1999999.99999999*G7_1_5_1 + 4000000*G8_0_0_0 + 4000000.00000001*G8_0_0_1 - 4000000*G8_0_1_0 - 3.5527136788005e-09*G8_0_1_1 - 4000000*G8_0_2_1 + 3999999.99999997*G8_1_0_0 + 3999999.99999998*G8_1_0_1 - 3999999.99999997*G8_1_1_0 - 3.55271367880048e-09*G8_1_1_1 - 3999999.99999998*G8_1_2_1 + 4000000*G9_0_0_0 + 4000000.00000001*G9_0_0_1 - 4000000*G9_0_1_0 - 3.5527136788005e-09*G9_0_1_1 - 4000000*G9_0_2_1 + 3999999.99999997*G9_1_0_0 + 3999999.99999998*G9_1_0_1 - 3999999.99999997*G9_1_1_0 - 3.55271367880048e-09*G9_1_1_1 - 3999999.99999998*G9_1_2_1 + 4000000*G10_0_3_0 + 4000000.00000001*G10_0_3_1 - 4000000*G10_0_4_0 - 3.5527136788005e-09*G10_0_4_1 - 4000000*G10_0_5_1 + 3999999.99999997*G10_1_3_0 + 3999999.99999998*G10_1_3_1 - 3999999.99999997*G10_1_4_0 - 3.55271367880048e-09*G10_1_4_1 - 3999999.99999998*G10_1_5_1 + 4000000*G11_0_3_0 + 4000000.00000001*G11_0_3_1 - 4000000*G11_0_4_0 - 3.5527136788005e-09*G11_0_4_1 - 4000000*G11_0_5_1 + 3999999.99999997*G11_1_3_0 + 3999999.99999998*G11_1_3_1 - 3999999.99999997*G11_1_4_0 - 3.55271367880048e-09*G11_1_4_1 - 3999999.99999998*G11_1_5_1 + 2000000*G12_0_0_0 + 2000000*G12_0_0_1 - 2000000*G12_0_1_0 - 1.77635683940025e-09*G12_0_1_1 - 2000000*G12_0_2_1 + 1999999.99999999*G12_1_0_0 + 1999999.99999999*G12_1_0_1 - 1999999.99999999*G12_1_1_0 - 1.77635683940024e-09*G12_1_1_1 - 1999999.99999999*G12_1_2_1 + 2000000*G13_0_0_0 + 2000000*G13_0_0_1 - 2000000*G13_0_1_0 - 1.77635683940025e-09*G13_0_1_1 - 2000000*G13_0_2_1 + 1999999.99999999*G13_1_0_0 + 1999999.99999999*G13_1_0_1 - 1999999.99999999*G13_1_1_0 - 1.77635683940024e-09*G13_1_1_1 - 1999999.99999999*G13_1_2_1;
      A[1] = 2000000*G6_0_0_0 + 2000000*G6_0_0_1 - 2000000*G6_0_1_0 - 1.77635683940025e-09*G6_0_1_1 - 2000000*G6_0_2_1 + 1.68753899743024e-08*G6_1_0_0 + 1.68753899743024e-08*G6_1_0_1 - 1.68753899743024e-08*G6_1_1_0 - 1.68753899743024e-08*G6_1_2_1 + 2000000*G7_0_3_0 + 2000000*G7_0_3_1 - 2000000*G7_0_4_0 - 1.77635683940025e-09*G7_0_4_1 - 2000000*G7_0_5_1 + 1.68753899743024e-08*G7_1_3_0 + 1.68753899743024e-08*G7_1_3_1 - 1.68753899743024e-08*G7_1_4_0 - 1.68753899743024e-08*G7_1_5_1 + 4000000*G8_0_0_0 + 4000000.00000001*G8_0_0_1 - 4000000*G8_0_1_0 - 3.5527136788005e-09*G8_0_1_1 - 4000000*G8_0_2_1 + 3.37507799486047e-08*G8_1_0_0 + 3.37507799486048e-08*G8_1_0_1 - 3.37507799486047e-08*G8_1_1_0 - 3.37507799486048e-08*G8_1_2_1 + 4000000*G9_0_0_0 + 4000000.00000001*G9_0_0_1 - 4000000*G9_0_1_0 - 3.5527136788005e-09*G9_0_1_1 - 4000000*G9_0_2_1 + 3.37507799486047e-08*G9_1_0_0 + 3.37507799486048e-08*G9_1_0_1 - 3.37507799486047e-08*G9_1_1_0 - 3.37507799486048e-08*G9_1_2_1 + 4000000*G10_0_3_0 + 4000000.00000001*G10_0_3_1 - 4000000*G10_0_4_0 - 3.5527136788005e-09*G10_0_4_1 - 4000000*G10_0_5_1 + 3.37507799486047e-08*G10_1_3_0 + 3.37507799486048e-08*G10_1_3_1 - 3.37507799486047e-08*G10_1_4_0 - 3.37507799486048e-08*G10_1_5_1 + 4000000*G11_0_3_0 + 4000000.00000001*G11_0_3_1 - 4000000*G11_0_4_0 - 3.5527136788005e-09*G11_0_4_1 - 4000000*G11_0_5_1 + 3.37507799486047e-08*G11_1_3_0 + 3.37507799486048e-08*G11_1_3_1 - 3.37507799486047e-08*G11_1_4_0 - 3.37507799486048e-08*G11_1_5_1 + 2000000*G12_0_0_0 + 2000000*G12_0_0_1 - 2000000*G12_0_1_0 - 1.77635683940025e-09*G12_0_1_1 - 2000000*G12_0_2_1 + 1.68753899743024e-08*G12_1_0_0 + 1.68753899743024e-08*G12_1_0_1 - 1.68753899743024e-08*G12_1_1_0 - 1.68753899743024e-08*G12_1_2_1 + 2000000*G13_0_0_0 + 2000000*G13_0_0_1 - 2000000*G13_0_1_0 - 1.77635683940025e-09*G13_0_1_1 - 2000000*G13_0_2_1 + 1.68753899743024e-08*G13_1_0_0 + 1.68753899743024e-08*G13_1_0_1 - 1.68753899743024e-08*G13_1_1_0 - 1.68753899743024e-08*G13_1_2_1;
      A[2] = 2000000*G6_1_0_0 + 2000000*G6_1_0_1 - 2000000*G6_1_1_0 - 1.77635683940025e-09*G6_1_1_1 - 2000000*G6_1_2_1 + 2000000*G7_1_3_0 + 2000000*G7_1_3_1 - 2000000*G7_1_4_0 - 1.77635683940025e-09*G7_1_4_1 - 2000000*G7_1_5_1 + 4000000*G8_1_0_0 + 4000000.00000001*G8_1_0_1 - 4000000*G8_1_1_0 - 3.55271367880051e-09*G8_1_1_1 - 4000000.00000001*G8_1_2_1 + 4000000*G9_1_0_0 + 4000000.00000001*G9_1_0_1 - 4000000*G9_1_1_0 - 3.55271367880051e-09*G9_1_1_1 - 4000000.00000001*G9_1_2_1 + 4000000*G10_1_3_0 + 4000000.00000001*G10_1_3_1 - 4000000*G10_1_4_0 - 3.55271367880051e-09*G10_1_4_1 - 4000000.00000001*G10_1_5_1 + 4000000*G11_1_3_0 + 4000000.00000001*G11_1_3_1 - 4000000*G11_1_4_0 - 3.55271367880051e-09*G11_1_4_1 - 4000000.00000001*G11_1_5_1 + 2000000*G12_1_0_0 + 2000000*G12_1_0_1 - 2000000*G12_1_1_0 - 1.77635683940025e-09*G12_1_1_1 - 2000000*G12_1_2_1 + 2000000*G13_1_0_0 + 2000000*G13_1_0_1 - 2000000*G13_1_1_0 - 1.77635683940025e-09*G13_1_1_1 - 2000000*G13_1_2_1;
      A[3] = 3999999.99999999*G6_0_0_0 + 4000000*G6_0_0_1 - 3999999.99999999*G6_0_1_0 - 3.55271367880049e-09*G6_0_1_1 - 3999999.99999999*G6_0_2_1 + 3999999.99999996*G6_1_0_0 + 3999999.99999997*G6_1_0_1 - 3999999.99999996*G6_1_1_0 - 3.55271367880047e-09*G6_1_1_1 - 3999999.99999997*G6_1_2_1 + 3999999.99999999*G7_0_3_0 + 4000000*G7_0_3_1 - 3999999.99999999*G7_0_4_0 - 3.55271367880049e-09*G7_0_4_1 - 3999999.99999999*G7_0_5_1 + 3999999.99999996*G7_1_3_0 + 3999999.99999997*G7_1_3_1 - 3999999.99999996*G7_1_4_0 - 3.55271367880047e-09*G7_1_4_1 - 3999999.99999997*G7_1_5_1 + 7999999.99999998*G8_0_0_0 + 7999999.99999999*G8_0_0_1 - 7999999.99999998*G8_0_1_0 - 7.10542735760099e-09*G8_0_1_1 - 7999999.99999999*G8_0_2_1 + 7999999.99999993*G8_1_0_0 + 7999999.99999995*G8_1_0_1 - 7999999.99999993*G8_1_1_0 - 7.10542735760095e-09*G8_1_1_1 - 7999999.99999994*G8_1_2_1 + 7999999.99999998*G9_0_0_0 + 7999999.99999999*G9_0_0_1 - 7999999.99999998*G9_0_1_0 - 7.10542735760099e-09*G9_0_1_1 - 7999999.99999999*G9_0_2_1 + 7999999.99999993*G9_1_0_0 + 7999999.99999995*G9_1_0_1 - 7999999.99999993*G9_1_1_0 - 7.10542735760095e-09*G9_1_1_1 - 7999999.99999994*G9_1_2_1 + 7999999.99999998*G10_0_3_0 + 7999999.99999999*G10_0_3_1 - 7999999.99999998*G10_0_4_0 - 7.10542735760099e-09*G10_0_4_1 - 7999999.99999999*G10_0_5_1 + 7999999.99999993*G10_1_3_0 + 7999999.99999995*G10_1_3_1 - 7999999.99999993*G10_1_4_0 - 7.10542735760095e-09*G10_1_4_1 - 7999999.99999994*G10_1_5_1 + 7999999.99999998*G11_0_3_0 + 7999999.99999999*G11_0_3_1 - 7999999.99999998*G11_0_4_0 - 7.10542735760099e-09*G11_0_4_1 - 7999999.99999999*G11_0_5_1 + 7999999.99999993*G11_1_3_0 + 7999999.99999995*G11_1_3_1 - 7999999.99999993*G11_1_4_0 - 7.10542735760095e-09*G11_1_4_1 - 7999999.99999994*G11_1_5_1 + 3999999.99999999*G12_0_0_0 + 4000000*G12_0_0_1 - 3999999.99999999*G12_0_1_0 - 3.55271367880049e-09*G12_0_1_1 - 3999999.99999999*G12_0_2_1 + 3999999.99999996*G12_1_0_0 + 3999999.99999997*G12_1_0_1 - 3999999.99999996*G12_1_1_0 - 3.55271367880047e-09*G12_1_1_1 - 3999999.99999997*G12_1_2_1 + 3999999.99999999*G13_0_0_0 + 4000000*G13_0_0_1 - 3999999.99999999*G13_0_1_0 - 3.55271367880049e-09*G13_0_1_1 - 3999999.99999999*G13_0_2_1 + 3999999.99999996*G13_1_0_0 + 3999999.99999997*G13_1_0_1 - 3999999.99999996*G13_1_1_0 - 3.55271367880047e-09*G13_1_1_1 - 3999999.99999997*G13_1_2_1;
      A[4] = -3999999.99999999*G6_0_0_0 - 4000000*G6_0_0_1 + 3999999.99999999*G6_0_1_0 + 3.55271367880049e-09*G6_0_1_1 + 3999999.99999999*G6_0_2_1 - 3999999.99999997*G6_1_0_0 - 3999999.99999998*G6_1_0_1 + 3999999.99999997*G6_1_1_0 + 3.55271367880048e-09*G6_1_1_1 + 3999999.99999998*G6_1_2_1 - 3999999.99999999*G7_0_3_0 - 4000000*G7_0_3_1 + 3999999.99999999*G7_0_4_0 + 3.55271367880049e-09*G7_0_4_1 + 3999999.99999999*G7_0_5_1 - 3999999.99999997*G7_1_3_0 - 3999999.99999998*G7_1_3_1 + 3999999.99999997*G7_1_4_0 + 3.55271367880048e-09*G7_1_4_1 + 3999999.99999998*G7_1_5_1 - 7999999.99999998*G8_0_0_0 - 7999999.99999999*G8_0_0_1 + 7999999.99999998*G8_0_1_0 + 7.10542735760099e-09*G8_0_1_1 + 7999999.99999999*G8_0_2_1 - 7999999.99999995*G8_1_0_0 - 7999999.99999996*G8_1_0_1 + 7999999.99999995*G8_1_1_0 + 7.10542735760096e-09*G8_1_1_1 + 7999999.99999996*G8_1_2_1 - 7999999.99999998*G9_0_0_0 - 7999999.99999999*G9_0_0_1 + 7999999.99999998*G9_0_1_0 + 7.10542735760099e-09*G9_0_1_1 + 7999999.99999999*G9_0_2_1 - 7999999.99999995*G9_1_0_0 - 7999999.99999996*G9_1_0_1 + 7999999.99999995*G9_1_1_0 + 7.10542735760096e-09*G9_1_1_1 + 7999999.99999996*G9_1_2_1 - 7999999.99999998*G10_0_3_0 - 7999999.99999999*G10_0_3_1 + 7999999.99999998*G10_0_4_0 + 7.10542735760099e-09*G10_0_4_1 + 7999999.99999999*G10_0_5_1 - 7999999.99999995*G10_1_3_0 - 7999999.99999996*G10_1_3_1 + 7999999.99999995*G10_1_4_0 + 7.10542735760096e-09*G10_1_4_1 + 7999999.99999996*G10_1_5_1 - 7999999.99999998*G11_0_3_0 - 7999999.99999999*G11_0_3_1 + 7999999.99999998*G11_0_4_0 + 7.10542735760099e-09*G11_0_4_1 + 7999999.99999999*G11_0_5_1 - 7999999.99999995*G11_1_3_0 - 7999999.99999996*G11_1_3_1 + 7999999.99999995*G11_1_4_0 + 7.10542735760096e-09*G11_1_4_1 + 7999999.99999996*G11_1_5_1 - 3999999.99999999*G12_0_0_0 - 4000000*G12_0_0_1 + 3999999.99999999*G12_0_1_0 + 3.55271367880049e-09*G12_0_1_1 + 3999999.99999999*G12_0_2_1 - 3999999.99999997*G12_1_0_0 - 3999999.99999998*G12_1_0_1 + 3999999.99999997*G12_1_1_0 + 3.55271367880048e-09*G12_1_1_1 + 3999999.99999998*G12_1_2_1 - 3999999.99999999*G13_0_0_0 - 4000000*G13_0_0_1 + 3999999.99999999*G13_0_1_0 + 3.55271367880049e-09*G13_0_1_1 + 3999999.99999999*G13_0_2_1 - 3999999.99999997*G13_1_0_0 - 3999999.99999998*G13_1_0_1 + 3999999.99999997*G13_1_1_0 + 3.55271367880048e-09*G13_1_1_1 + 3999999.99999998*G13_1_2_1;
      A[5] = -4000000*G6_0_0_0 - 4000000.00000001*G6_0_0_1 + 4000000*G6_0_1_0 + 3.5527136788005e-09*G6_0_1_1 + 4000000*G6_0_2_1 - 4000000*G6_1_0_0 - 4000000*G6_1_0_1 + 4000000*G6_1_1_0 + 3.5527136788005e-09*G6_1_1_1 + 4000000.0*G6_1_2_1 - 4000000*G7_0_3_0 - 4000000.00000001*G7_0_3_1 + 4000000*G7_0_4_0 + 3.5527136788005e-09*G7_0_4_1 + 4000000*G7_0_5_1 - 4000000*G7_1_3_0 - 4000000*G7_1_3_1 + 4000000*G7_1_4_0 + 3.5527136788005e-09*G7_1_4_1 + 4000000.0*G7_1_5_1 - 8000000*G8_0_0_0 - 8000000.00000002*G8_0_0_1 + 8000000*G8_0_1_0 + 7.10542735760101e-09*G8_0_1_1 + 8000000.00000001*G8_0_2_1 - 7999999.99999999*G8_1_0_0 - 8000000.00000001*G8_1_0_1 + 7999999.99999999*G8_1_1_0 + 7.105427357601e-09*G8_1_1_1 + 8000000*G8_1_2_1 - 8000000*G9_0_0_0 - 8000000.00000002*G9_0_0_1 + 8000000*G9_0_1_0 + 7.10542735760101e-09*G9_0_1_1 + 8000000.00000001*G9_0_2_1 - 7999999.99999999*G9_1_0_0 - 8000000.00000001*G9_1_0_1 + 7999999.99999999*G9_1_1_0 + 7.105427357601e-09*G9_1_1_1 + 8000000*G9_1_2_1 - 8000000*G10_0_3_0 - 8000000.00000002*G10_0_3_1 + 8000000*G10_0_4_0 + 7.10542735760101e-09*G10_0_4_1 + 8000000.00000001*G10_0_5_1 - 7999999.99999999*G10_1_3_0 - 8000000.00000001*G10_1_3_1 + 7999999.99999999*G10_1_4_0 + 7.105427357601e-09*G10_1_4_1 + 8000000*G10_1_5_1 - 8000000*G11_0_3_0 - 8000000.00000002*G11_0_3_1 + 8000000*G11_0_4_0 + 7.10542735760101e-09*G11_0_4_1 + 8000000.00000001*G11_0_5_1 - 7999999.99999999*G11_1_3_0 - 8000000.00000001*G11_1_3_1 + 7999999.99999999*G11_1_4_0 + 7.105427357601e-09*G11_1_4_1 + 8000000*G11_1_5_1 - 4000000*G12_0_0_0 - 4000000.00000001*G12_0_0_1 + 4000000*G12_0_1_0 + 3.5527136788005e-09*G12_0_1_1 + 4000000*G12_0_2_1 - 4000000*G12_1_0_0 - 4000000*G12_1_0_1 + 4000000*G12_1_1_0 + 3.5527136788005e-09*G12_1_1_1 + 4000000.0*G12_1_2_1 - 4000000*G13_0_0_0 - 4000000.00000001*G13_0_0_1 + 4000000*G13_0_1_0 + 3.5527136788005e-09*G13_0_1_1 + 4000000*G13_0_2_1 - 4000000*G13_1_0_0 - 4000000*G13_1_0_1 + 4000000*G13_1_1_0 + 3.5527136788005e-09*G13_1_1_1 + 4000000.0*G13_1_2_1;
      A[6] = 4000000*G0_0_0_0 + 4000000.00000001*G0_0_0_1 - 4000000*G0_0_1_0 - 3.5527136788005e-09*G0_0_1_1 - 4000000*G0_0_2_1 + 3999999.99999997*G0_1_0_0 + 3999999.99999998*G0_1_0_1 - 3999999.99999997*G0_1_1_0 - 3.55271367880048e-09*G0_1_1_1 - 3999999.99999998*G0_1_2_1 + 4000000*G1_0_0_0 + 4000000.00000001*G1_0_0_1 - 4000000*G1_0_1_0 - 3.5527136788005e-09*G1_0_1_1 - 4000000*G1_0_2_1 + 3999999.99999997*G1_1_0_0 + 3999999.99999998*G1_1_0_1 - 3999999.99999997*G1_1_1_0 - 3.55271367880048e-09*G1_1_1_1 - 3999999.99999998*G1_1_2_1 + 4000000*G2_0_3_0 + 4000000.00000001*G2_0_3_1 - 4000000*G2_0_4_0 - 3.5527136788005e-09*G2_0_4_1 - 4000000*G2_0_5_1 + 3999999.99999997*G2_1_3_0 + 3999999.99999998*G2_1_3_1 - 3999999.99999997*G2_1_4_0 - 3.55271367880048e-09*G2_1_4_1 - 3999999.99999998*G2_1_5_1 + 4000000*G3_0_3_0 + 4000000.00000001*G3_0_3_1 - 4000000*G3_0_4_0 - 3.5527136788005e-09*G3_0_4_1 - 4000000*G3_0_5_1 + 3999999.99999997*G3_1_3_0 + 3999999.99999998*G3_1_3_1 - 3999999.99999997*G3_1_4_0 - 3.55271367880048e-09*G3_1_4_1 - 3999999.99999998*G3_1_5_1 + 2000000*G4_0_3_0 + 2000000*G4_0_3_1 - 2000000*G4_0_4_0 - 1.77635683940025e-09*G4_0_4_1 - 2000000*G4_0_5_1 + 1999999.99999999*G4_1_3_0 + 1999999.99999999*G4_1_3_1 - 1999999.99999999*G4_1_4_0 - 1.77635683940024e-09*G4_1_4_1 - 1999999.99999999*G4_1_5_1 + 2000000*G5_0_3_0 + 2000000*G5_0_3_1 - 2000000*G5_0_4_0 - 1.77635683940025e-09*G5_0_4_1 - 2000000*G5_0_5_1 + 1999999.99999999*G5_1_3_0 + 1999999.99999999*G5_1_3_1 - 1999999.99999999*G5_1_4_0 - 1.77635683940024e-09*G5_1_4_1 - 1999999.99999999*G5_1_5_1 + 2000000*G14_0_0_0 + 2000000*G14_0_0_1 - 2000000*G14_0_1_0 - 1.77635683940025e-09*G14_0_1_1 - 2000000*G14_0_2_1 + 1999999.99999999*G14_1_0_0 + 1999999.99999999*G14_1_0_1 - 1999999.99999999*G14_1_1_0 - 1.77635683940024e-09*G14_1_1_1 - 1999999.99999999*G14_1_2_1 + 2000000*G15_0_3_0 + 2000000*G15_0_3_1 - 2000000*G15_0_4_0 - 1.77635683940025e-09*G15_0_4_1 - 2000000*G15_0_5_1 + 1999999.99999999*G15_1_3_0 + 1999999.99999999*G15_1_3_1 - 1999999.99999999*G15_1_4_0 - 1.77635683940024e-09*G15_1_4_1 - 1999999.99999999*G15_1_5_1;
      A[7] = 4000000*G0_0_0_0 + 4000000.00000001*G0_0_0_1 - 4000000*G0_0_1_0 - 3.5527136788005e-09*G0_0_1_1 - 4000000*G0_0_2_1 + 3.37507799486047e-08*G0_1_0_0 + 3.37507799486048e-08*G0_1_0_1 - 3.37507799486047e-08*G0_1_1_0 - 3.37507799486048e-08*G0_1_2_1 + 4000000*G1_0_0_0 + 4000000.00000001*G1_0_0_1 - 4000000*G1_0_1_0 - 3.5527136788005e-09*G1_0_1_1 - 4000000*G1_0_2_1 + 3.37507799486047e-08*G1_1_0_0 + 3.37507799486048e-08*G1_1_0_1 - 3.37507799486047e-08*G1_1_1_0 - 3.37507799486048e-08*G1_1_2_1 + 4000000*G2_0_3_0 + 4000000.00000001*G2_0_3_1 - 4000000*G2_0_4_0 - 3.5527136788005e-09*G2_0_4_1 - 4000000*G2_0_5_1 + 3.37507799486047e-08*G2_1_3_0 + 3.37507799486048e-08*G2_1_3_1 - 3.37507799486047e-08*G2_1_4_0 - 3.37507799486048e-08*G2_1_5_1 + 4000000*G3_0_3_0 + 4000000.00000001*G3_0_3_1 - 4000000*G3_0_4_0 - 3.5527136788005e-09*G3_0_4_1 - 4000000*G3_0_5_1 + 3.37507799486047e-08*G3_1_3_0 + 3.37507799486048e-08*G3_1_3_1 - 3.37507799486047e-08*G3_1_4_0 - 3.37507799486048e-08*G3_1_5_1 + 2000000*G4_0_3_0 + 2000000*G4_0_3_1 - 2000000*G4_0_4_0 - 1.77635683940025e-09*G4_0_4_1 - 2000000*G4_0_5_1 + 1.68753899743024e-08*G4_1_3_0 + 1.68753899743024e-08*G4_1_3_1 - 1.68753899743024e-08*G4_1_4_0 - 1.68753899743024e-08*G4_1_5_1 + 2000000*G5_0_3_0 + 2000000*G5_0_3_1 - 2000000*G5_0_4_0 - 1.77635683940025e-09*G5_0_4_1 - 2000000*G5_0_5_1 + 1.68753899743024e-08*G5_1_3_0 + 1.68753899743024e-08*G5_1_3_1 - 1.68753899743024e-08*G5_1_4_0 - 1.68753899743024e-08*G5_1_5_1 + 2000000*G14_0_0_0 + 2000000*G14_0_0_1 - 2000000*G14_0_1_0 - 1.77635683940025e-09*G14_0_1_1 - 2000000*G14_0_2_1 + 1.68753899743024e-08*G14_1_0_0 + 1.68753899743024e-08*G14_1_0_1 - 1.68753899743024e-08*G14_1_1_0 - 1.68753899743024e-08*G14_1_2_1 + 2000000*G15_0_3_0 + 2000000*G15_0_3_1 - 2000000*G15_0_4_0 - 1.77635683940025e-09*G15_0_4_1 - 2000000*G15_0_5_1 + 1.68753899743024e-08*G15_1_3_0 + 1.68753899743024e-08*G15_1_3_1 - 1.68753899743024e-08*G15_1_4_0 - 1.68753899743024e-08*G15_1_5_1;
      A[8] = 4000000*G0_1_0_0 + 4000000.00000001*G0_1_0_1 - 4000000*G0_1_1_0 - 3.55271367880051e-09*G0_1_1_1 - 4000000.00000001*G0_1_2_1 + 4000000*G1_1_0_0 + 4000000.00000001*G1_1_0_1 - 4000000*G1_1_1_0 - 3.55271367880051e-09*G1_1_1_1 - 4000000.00000001*G1_1_2_1 + 4000000*G2_1_3_0 + 4000000.00000001*G2_1_3_1 - 4000000*G2_1_4_0 - 3.55271367880051e-09*G2_1_4_1 - 4000000.00000001*G2_1_5_1 + 4000000*G3_1_3_0 + 4000000.00000001*G3_1_3_1 - 4000000*G3_1_4_0 - 3.55271367880051e-09*G3_1_4_1 - 4000000.00000001*G3_1_5_1 + 2000000*G4_1_3_0 + 2000000*G4_1_3_1 - 2000000*G4_1_4_0 - 1.77635683940025e-09*G4_1_4_1 - 2000000*G4_1_5_1 + 2000000*G5_1_3_0 + 2000000*G5_1_3_1 - 2000000*G5_1_4_0 - 1.77635683940025e-09*G5_1_4_1 - 2000000*G5_1_5_1 + 2000000*G14_1_0_0 + 2000000*G14_1_0_1 - 2000000*G14_1_1_0 - 1.77635683940025e-09*G14_1_1_1 - 2000000*G14_1_2_1 + 2000000*G15_1_3_0 + 2000000*G15_1_3_1 - 2000000*G15_1_4_0 - 1.77635683940025e-09*G15_1_4_1 - 2000000*G15_1_5_1;
      A[9] = 7999999.99999998*G0_0_0_0 + 7999999.99999999*G0_0_0_1 - 7999999.99999998*G0_0_1_0 - 7.10542735760099e-09*G0_0_1_1 - 7999999.99999999*G0_0_2_1 + 7999999.99999993*G0_1_0_0 + 7999999.99999995*G0_1_0_1 - 7999999.99999993*G0_1_1_0 - 7.10542735760095e-09*G0_1_1_1 - 7999999.99999994*G0_1_2_1 + 7999999.99999998*G1_0_0_0 + 7999999.99999999*G1_0_0_1 - 7999999.99999998*G1_0_1_0 - 7.10542735760099e-09*G1_0_1_1 - 7999999.99999999*G1_0_2_1 + 7999999.99999993*G1_1_0_0 + 7999999.99999995*G1_1_0_1 - 7999999.99999993*G1_1_1_0 - 7.10542735760095e-09*G1_1_1_1 - 7999999.99999994*G1_1_2_1 + 7999999.99999998*G2_0_3_0 + 7999999.99999999*G2_0_3_1 - 7999999.99999998*G2_0_4_0 - 7.10542735760099e-09*G2_0_4_1 - 7999999.99999999*G2_0_5_1 + 7999999.99999993*G2_1_3_0 + 7999999.99999995*G2_1_3_1 - 7999999.99999993*G2_1_4_0 - 7.10542735760095e-09*G2_1_4_1 - 7999999.99999994*G2_1_5_1 + 7999999.99999998*G3_0_3_0 + 7999999.99999999*G3_0_3_1 - 7999999.99999998*G3_0_4_0 - 7.10542735760099e-09*G3_0_4_1 - 7999999.99999999*G3_0_5_1 + 7999999.99999993*G3_1_3_0 + 7999999.99999995*G3_1_3_1 - 7999999.99999993*G3_1_4_0 - 7.10542735760095e-09*G3_1_4_1 - 7999999.99999994*G3_1_5_1 + 3999999.99999999*G4_0_3_0 + 4000000*G4_0_3_1 - 3999999.99999999*G4_0_4_0 - 3.55271367880049e-09*G4_0_4_1 - 3999999.99999999*G4_0_5_1 + 3999999.99999996*G4_1_3_0 + 3999999.99999997*G4_1_3_1 - 3999999.99999996*G4_1_4_0 - 3.55271367880047e-09*G4_1_4_1 - 3999999.99999997*G4_1_5_1 + 3999999.99999999*G5_0_3_0 + 4000000*G5_0_3_1 - 3999999.99999999*G5_0_4_0 - 3.55271367880049e-09*G5_0_4_1 - 3999999.99999999*G5_0_5_1 + 3999999.99999996*G5_1_3_0 + 3999999.99999997*G5_1_3_1 - 3999999.99999996*G5_1_4_0 - 3.55271367880047e-09*G5_1_4_1 - 3999999.99999997*G5_1_5_1 + 3999999.99999999*G14_0_0_0 + 4000000*G14_0_0_1 - 3999999.99999999*G14_0_1_0 - 3.55271367880049e-09*G14_0_1_1 - 3999999.99999999*G14_0_2_1 + 3999999.99999996*G14_1_0_0 + 3999999.99999997*G14_1_0_1 - 3999999.99999996*G14_1_1_0 - 3.55271367880047e-09*G14_1_1_1 - 3999999.99999997*G14_1_2_1 + 3999999.99999999*G15_0_3_0 + 4000000*G15_0_3_1 - 3999999.99999999*G15_0_4_0 - 3.55271367880049e-09*G15_0_4_1 - 3999999.99999999*G15_0_5_1 + 3999999.99999996*G15_1_3_0 + 3999999.99999997*G15_1_3_1 - 3999999.99999996*G15_1_4_0 - 3.55271367880047e-09*G15_1_4_1 - 3999999.99999997*G15_1_5_1;
      A[10] = -7999999.99999998*G0_0_0_0 - 7999999.99999999*G0_0_0_1 + 7999999.99999998*G0_0_1_0 + 7.10542735760099e-09*G0_0_1_1 + 7999999.99999999*G0_0_2_1 - 7999999.99999995*G0_1_0_0 - 7999999.99999996*G0_1_0_1 + 7999999.99999995*G0_1_1_0 + 7.10542735760096e-09*G0_1_1_1 + 7999999.99999996*G0_1_2_1 - 7999999.99999998*G1_0_0_0 - 7999999.99999999*G1_0_0_1 + 7999999.99999998*G1_0_1_0 + 7.10542735760099e-09*G1_0_1_1 + 7999999.99999999*G1_0_2_1 - 7999999.99999995*G1_1_0_0 - 7999999.99999996*G1_1_0_1 + 7999999.99999995*G1_1_1_0 + 7.10542735760096e-09*G1_1_1_1 + 7999999.99999996*G1_1_2_1 - 7999999.99999998*G2_0_3_0 - 7999999.99999999*G2_0_3_1 + 7999999.99999998*G2_0_4_0 + 7.10542735760099e-09*G2_0_4_1 + 7999999.99999999*G2_0_5_1 - 7999999.99999995*G2_1_3_0 - 7999999.99999996*G2_1_3_1 + 7999999.99999995*G2_1_4_0 + 7.10542735760096e-09*G2_1_4_1 + 7999999.99999996*G2_1_5_1 - 7999999.99999998*G3_0_3_0 - 7999999.99999999*G3_0_3_1 + 7999999.99999998*G3_0_4_0 + 7.10542735760099e-09*G3_0_4_1 + 7999999.99999999*G3_0_5_1 - 7999999.99999995*G3_1_3_0 - 7999999.99999996*G3_1_3_1 + 7999999.99999995*G3_1_4_0 + 7.10542735760096e-09*G3_1_4_1 + 7999999.99999996*G3_1_5_1 - 3999999.99999999*G4_0_3_0 - 4000000*G4_0_3_1 + 3999999.99999999*G4_0_4_0 + 3.55271367880049e-09*G4_0_4_1 + 3999999.99999999*G4_0_5_1 - 3999999.99999997*G4_1_3_0 - 3999999.99999998*G4_1_3_1 + 3999999.99999997*G4_1_4_0 + 3.55271367880048e-09*G4_1_4_1 + 3999999.99999998*G4_1_5_1 - 3999999.99999999*G5_0_3_0 - 4000000*G5_0_3_1 + 3999999.99999999*G5_0_4_0 + 3.55271367880049e-09*G5_0_4_1 + 3999999.99999999*G5_0_5_1 - 3999999.99999997*G5_1_3_0 - 3999999.99999998*G5_1_3_1 + 3999999.99999997*G5_1_4_0 + 3.55271367880048e-09*G5_1_4_1 + 3999999.99999998*G5_1_5_1 - 3999999.99999999*G14_0_0_0 - 4000000*G14_0_0_1 + 3999999.99999999*G14_0_1_0 + 3.55271367880049e-09*G14_0_1_1 + 3999999.99999999*G14_0_2_1 - 3999999.99999997*G14_1_0_0 - 3999999.99999998*G14_1_0_1 + 3999999.99999997*G14_1_1_0 + 3.55271367880048e-09*G14_1_1_1 + 3999999.99999998*G14_1_2_1 - 3999999.99999999*G15_0_3_0 - 4000000*G15_0_3_1 + 3999999.99999999*G15_0_4_0 + 3.55271367880049e-09*G15_0_4_1 + 3999999.99999999*G15_0_5_1 - 3999999.99999997*G15_1_3_0 - 3999999.99999998*G15_1_3_1 + 3999999.99999997*G15_1_4_0 + 3.55271367880048e-09*G15_1_4_1 + 3999999.99999998*G15_1_5_1;
      A[11] = -8000000*G0_0_0_0 - 8000000.00000002*G0_0_0_1 + 8000000*G0_0_1_0 + 7.10542735760101e-09*G0_0_1_1 + 8000000.00000001*G0_0_2_1 - 7999999.99999999*G0_1_0_0 - 8000000.00000001*G0_1_0_1 + 7999999.99999999*G0_1_1_0 + 7.105427357601e-09*G0_1_1_1 + 8000000*G0_1_2_1 - 8000000*G1_0_0_0 - 8000000.00000002*G1_0_0_1 + 8000000*G1_0_1_0 + 7.10542735760101e-09*G1_0_1_1 + 8000000.00000001*G1_0_2_1 - 7999999.99999999*G1_1_0_0 - 8000000.00000001*G1_1_0_1 + 7999999.99999999*G1_1_1_0 + 7.105427357601e-09*G1_1_1_1 + 8000000*G1_1_2_1 - 8000000*G2_0_3_0 - 8000000.00000002*G2_0_3_1 + 8000000*G2_0_4_0 + 7.10542735760101e-09*G2_0_4_1 + 8000000.00000001*G2_0_5_1 - 7999999.99999999*G2_1_3_0 - 8000000.00000001*G2_1_3_1 + 7999999.99999999*G2_1_4_0 + 7.105427357601e-09*G2_1_4_1 + 8000000*G2_1_5_1 - 8000000*G3_0_3_0 - 8000000.00000002*G3_0_3_1 + 8000000*G3_0_4_0 + 7.10542735760101e-09*G3_0_4_1 + 8000000.00000001*G3_0_5_1 - 7999999.99999999*G3_1_3_0 - 8000000.00000001*G3_1_3_1 + 7999999.99999999*G3_1_4_0 + 7.105427357601e-09*G3_1_4_1 + 8000000*G3_1_5_1 - 4000000*G4_0_3_0 - 4000000.00000001*G4_0_3_1 + 4000000*G4_0_4_0 + 3.5527136788005e-09*G4_0_4_1 + 4000000*G4_0_5_1 - 4000000*G4_1_3_0 - 4000000*G4_1_3_1 + 4000000*G4_1_4_0 + 3.5527136788005e-09*G4_1_4_1 + 4000000.0*G4_1_5_1 - 4000000*G5_0_3_0 - 4000000.00000001*G5_0_3_1 + 4000000*G5_0_4_0 + 3.5527136788005e-09*G5_0_4_1 + 4000000*G5_0_5_1 - 4000000*G5_1_3_0 - 4000000*G5_1_3_1 + 4000000*G5_1_4_0 + 3.5527136788005e-09*G5_1_4_1 + 4000000.0*G5_1_5_1 - 4000000*G14_0_0_0 - 4000000.00000001*G14_0_0_1 + 4000000*G14_0_1_0 + 3.5527136788005e-09*G14_0_1_1 + 4000000*G14_0_2_1 - 4000000*G14_1_0_0 - 4000000*G14_1_0_1 + 4000000*G14_1_1_0 + 3.5527136788005e-09*G14_1_1_1 + 4000000.0*G14_1_2_1 - 4000000*G15_0_3_0 - 4000000.00000001*G15_0_3_1 + 4000000*G15_0_4_0 + 3.5527136788005e-09*G15_0_4_1 + 4000000*G15_0_5_1 - 4000000*G15_1_3_0 - 4000000*G15_1_3_1 + 4000000*G15_1_4_0 + 3.5527136788005e-09*G15_1_4_1 + 4000000.0*G15_1_5_1;
      A[12] = 0.0;
      A[13] = 0.0;
      A[14] = 0.0;
      A[15] = 0.0;
      A[16] = 0.0;
      A[17] = 0.0;
      A[18] = 0.0;
      A[19] = 0.0;
      A[20] = 0.0;
        break;
      }
    case 1:
      {
        A[0] = -2000000*G6_0_0_0 - 2000000*G6_0_0_1 + 2000000*G6_0_1_0 + 1.77635683940025e-09*G6_0_1_1 + 2000000*G6_0_2_1 - 2000000.00000001*G6_1_0_0 - 2000000.00000001*G6_1_0_1 + 2000000.00000001*G6_1_1_0 + 1.77635683940026e-09*G6_1_1_1 + 2000000.00000001*G6_1_2_1 - 2000000*G7_0_3_0 - 2000000*G7_0_3_1 + 2000000*G7_0_4_0 + 1.77635683940025e-09*G7_0_4_1 + 2000000*G7_0_5_1 - 2000000.00000001*G7_1_3_0 - 2000000.00000001*G7_1_3_1 + 2000000.00000001*G7_1_4_0 + 1.77635683940026e-09*G7_1_4_1 + 2000000.00000001*G7_1_5_1 - 4000000*G8_0_0_0 - 4000000.00000001*G8_0_0_1 + 4000000*G8_0_1_0 + 3.5527136788005e-09*G8_0_1_1 + 4000000*G8_0_2_1 - 4000000.00000002*G8_1_0_0 - 4000000.00000002*G8_1_0_1 + 4000000.00000002*G8_1_1_0 + 3.55271367880052e-09*G8_1_1_1 + 4000000.00000002*G8_1_2_1 - 4000000*G9_0_0_0 - 4000000.00000001*G9_0_0_1 + 4000000*G9_0_1_0 + 3.5527136788005e-09*G9_0_1_1 + 4000000*G9_0_2_1 - 4000000.00000002*G9_1_0_0 - 4000000.00000002*G9_1_0_1 + 4000000.00000002*G9_1_1_0 + 3.55271367880052e-09*G9_1_1_1 + 4000000.00000002*G9_1_2_1 - 4000000*G10_0_3_0 - 4000000.00000001*G10_0_3_1 + 4000000*G10_0_4_0 + 3.5527136788005e-09*G10_0_4_1 + 4000000*G10_0_5_1 - 4000000.00000002*G10_1_3_0 - 4000000.00000002*G10_1_3_1 + 4000000.00000002*G10_1_4_0 + 3.55271367880052e-09*G10_1_4_1 + 4000000.00000002*G10_1_5_1 - 4000000*G11_0_3_0 - 4000000.00000001*G11_0_3_1 + 4000000*G11_0_4_0 + 3.5527136788005e-09*G11_0_4_1 + 4000000*G11_0_5_1 - 4000000.00000002*G11_1_3_0 - 4000000.00000002*G11_1_3_1 + 4000000.00000002*G11_1_4_0 + 3.55271367880052e-09*G11_1_4_1 + 4000000.00000002*G11_1_5_1 - 2000000*G12_0_0_0 - 2000000*G12_0_0_1 + 2000000*G12_0_1_0 + 1.77635683940025e-09*G12_0_1_1 + 2000000*G12_0_2_1 - 2000000.00000001*G12_1_0_0 - 2000000.00000001*G12_1_0_1 + 2000000.00000001*G12_1_1_0 + 1.77635683940026e-09*G12_1_1_1 + 2000000.00000001*G12_1_2_1 - 2000000*G13_0_0_0 - 2000000*G13_0_0_1 + 2000000*G13_0_1_0 + 1.77635683940025e-09*G13_0_1_1 + 2000000*G13_0_2_1 - 2000000.00000001*G13_1_0_0 - 2000000.00000001*G13_1_0_1 + 2000000.00000001*G13_1_1_0 + 1.77635683940026e-09*G13_1_1_1 + 2000000.00000001*G13_1_2_1;
      A[1] = -2000000*G6_0_0_0 - 2000000*G6_0_0_1 + 2000000*G6_0_1_0 + 1.77635683940025e-09*G6_0_1_1 + 2000000*G6_0_2_1 + 1.37667655053519e-08*G6_1_0_0 + 1.37667655053519e-08*G6_1_0_1 - 1.37667655053519e-08*G6_1_1_0 - 1.37667655053519e-08*G6_1_2_1 - 2000000*G7_0_3_0 - 2000000*G7_0_3_1 + 2000000*G7_0_4_0 + 1.77635683940025e-09*G7_0_4_1 + 2000000*G7_0_5_1 + 1.37667655053519e-08*G7_1_3_0 + 1.37667655053519e-08*G7_1_3_1 - 1.37667655053519e-08*G7_1_4_0 - 1.37667655053519e-08*G7_1_5_1 - 4000000*G8_0_0_0 - 4000000.00000001*G8_0_0_1 + 4000000*G8_0_1_0 + 3.55271367880051e-09*G8_0_1_1 + 4000000.00000001*G8_0_2_1 + 2.75335310107038e-08*G8_1_0_0 + 2.75335310107039e-08*G8_1_0_1 - 2.75335310107038e-08*G8_1_1_0 - 2.75335310107039e-08*G8_1_2_1 - 4000000*G9_0_0_0 - 4000000.00000001*G9_0_0_1 + 4000000*G9_0_1_0 + 3.55271367880051e-09*G9_0_1_1 + 4000000.00000001*G9_0_2_1 + 2.75335310107038e-08*G9_1_0_0 + 2.75335310107039e-08*G9_1_0_1 - 2.75335310107038e-08*G9_1_1_0 - 2.75335310107039e-08*G9_1_2_1 - 4000000*G10_0_3_0 - 4000000.00000001*G10_0_3_1 + 4000000*G10_0_4_0 + 3.55271367880051e-09*G10_0_4_1 + 4000000.00000001*G10_0_5_1 + 2.75335310107038e-08*G10_1_3_0 + 2.75335310107039e-08*G10_1_3_1 - 2.75335310107038e-08*G10_1_4_0 - 2.75335310107039e-08*G10_1_5_1 - 4000000*G11_0_3_0 - 4000000.00000001*G11_0_3_1 + 4000000*G11_0_4_0 + 3.55271367880051e-09*G11_0_4_1 + 4000000.00000001*G11_0_5_1 + 2.75335310107038e-08*G11_1_3_0 + 2.75335310107039e-08*G11_1_3_1 - 2.75335310107038e-08*G11_1_4_0 - 2.75335310107039e-08*G11_1_5_1 - 2000000*G12_0_0_0 - 2000000*G12_0_0_1 + 2000000*G12_0_1_0 + 1.77635683940025e-09*G12_0_1_1 + 2000000*G12_0_2_1 + 1.37667655053519e-08*G12_1_0_0 + 1.37667655053519e-08*G12_1_0_1 - 1.37667655053519e-08*G12_1_1_0 - 1.37667655053519e-08*G12_1_2_1 - 2000000*G13_0_0_0 - 2000000*G13_0_0_1 + 2000000*G13_0_1_0 + 1.77635683940025e-09*G13_0_1_1 + 2000000*G13_0_2_1 + 1.37667655053519e-08*G13_1_0_0 + 1.37667655053519e-08*G13_1_0_1 - 1.37667655053519e-08*G13_1_1_0 - 1.37667655053519e-08*G13_1_2_1;
      A[2] = 2000000*G6_1_0_0 + 2000000.00000001*G6_1_0_1 - 2000000*G6_1_1_0 - 1.77635683940025e-09*G6_1_1_1 - 2000000*G6_1_2_1 + 2000000*G7_1_3_0 + 2000000.00000001*G7_1_3_1 - 2000000*G7_1_4_0 - 1.77635683940025e-09*G7_1_4_1 - 2000000*G7_1_5_1 + 4000000*G8_1_0_0 + 4000000.00000001*G8_1_0_1 - 4000000*G8_1_1_0 - 3.55271367880051e-09*G8_1_1_1 - 4000000.00000001*G8_1_2_1 + 4000000*G9_1_0_0 + 4000000.00000001*G9_1_0_1 - 4000000*G9_1_1_0 - 3.55271367880051e-09*G9_1_1_1 - 4000000.00000001*G9_1_2_1 + 4000000*G10_1_3_0 + 4000000.00000001*G10_1_3_1 - 4000000*G10_1_4_0 - 3.55271367880051e-09*G10_1_4_1 - 4000000.00000001*G10_1_5_1 + 4000000*G11_1_3_0 + 4000000.00000001*G11_1_3_1 - 4000000*G11_1_4_0 - 3.55271367880051e-09*G11_1_4_1 - 4000000.00000001*G11_1_5_1 + 2000000*G12_1_0_0 + 2000000.00000001*G12_1_0_1 - 2000000*G12_1_1_0 - 1.77635683940025e-09*G12_1_1_1 - 2000000*G12_1_2_1 + 2000000*G13_1_0_0 + 2000000.00000001*G13_1_0_1 - 2000000*G13_1_1_0 - 1.77635683940025e-09*G13_1_1_1 - 2000000*G13_1_2_1;
      A[3] = 3999999.99999999*G6_0_0_0 + 3999999.99999999*G6_0_0_1 - 3999999.99999999*G6_0_1_0 - 3.55271367880049e-09*G6_0_1_1 - 3999999.99999999*G6_0_2_1 - 2.57571741713036e-08*G6_1_0_0 - 2.57571741713036e-08*G6_1_0_1 + 2.57571741713036e-08*G6_1_1_0 + 2.57571741713036e-08*G6_1_2_1 + 3999999.99999999*G7_0_3_0 + 3999999.99999999*G7_0_3_1 - 3999999.99999999*G7_0_4_0 - 3.55271367880049e-09*G7_0_4_1 - 3999999.99999999*G7_0_5_1 - 2.57571741713036e-08*G7_1_3_0 - 2.57571741713036e-08*G7_1_3_1 + 2.57571741713036e-08*G7_1_4_0 + 2.57571741713036e-08*G7_1_5_1 + 7999999.99999997*G8_0_0_0 + 7999999.99999999*G8_0_0_1 - 7999999.99999997*G8_0_1_0 - 7.10542735760099e-09*G8_0_1_1 - 7999999.99999998*G8_0_2_1 - 5.15143483426072e-08*G8_1_0_0 - 5.15143483426073e-08*G8_1_0_1 + 5.15143483426072e-08*G8_1_1_0 + 5.15143483426073e-08*G8_1_2_1 + 7999999.99999997*G9_0_0_0 + 7999999.99999999*G9_0_0_1 - 7999999.99999997*G9_0_1_0 - 7.10542735760099e-09*G9_0_1_1 - 7999999.99999998*G9_0_2_1 - 5.15143483426072e-08*G9_1_0_0 - 5.15143483426073e-08*G9_1_0_1 + 5.15143483426072e-08*G9_1_1_0 + 5.15143483426073e-08*G9_1_2_1 + 7999999.99999997*G10_0_3_0 + 7999999.99999999*G10_0_3_1 - 7999999.99999997*G10_0_4_0 - 7.10542735760099e-09*G10_0_4_1 - 7999999.99999998*G10_0_5_1 - 5.15143483426072e-08*G10_1_3_0 - 5.15143483426073e-08*G10_1_3_1 + 5.15143483426072e-08*G10_1_4_0 + 5.15143483426073e-08*G10_1_5_1 + 7999999.99999997*G11_0_3_0 + 7999999.99999999*G11_0_3_1 - 7999999.99999997*G11_0_4_0 - 7.10542735760099e-09*G11_0_4_1 - 7999999.99999998*G11_0_5_1 - 5.15143483426072e-08*G11_1_3_0 - 5.15143483426073e-08*G11_1_3_1 + 5.15143483426072e-08*G11_1_4_0 + 5.15143483426073e-08*G11_1_5_1 + 3999999.99999999*G12_0_0_0 + 3999999.99999999*G12_0_0_1 - 3999999.99999999*G12_0_1_0 - 3.55271367880049e-09*G12_0_1_1 - 3999999.99999999*G12_0_2_1 - 2.57571741713036e-08*G12_1_0_0 - 2.57571741713036e-08*G12_1_0_1 + 2.57571741713036e-08*G12_1_1_0 + 2.57571741713036e-08*G12_1_2_1 + 3999999.99999999*G13_0_0_0 + 3999999.99999999*G13_0_0_1 - 3999999.99999999*G13_0_1_0 - 3.55271367880049e-09*G13_0_1_1 - 3999999.99999999*G13_0_2_1 - 2.57571741713036e-08*G13_1_0_0 - 2.57571741713036e-08*G13_1_0_1 + 2.57571741713036e-08*G13_1_1_0 + 2.57571741713036e-08*G13_1_2_1;
      A[4] = -3999999.99999999*G6_0_0_0 - 3999999.99999999*G6_0_0_1 + 3999999.99999999*G6_0_1_0 + 3.55271367880049e-09*G6_0_1_1 + 3999999.99999999*G6_0_2_1 + 1.53210777398271e-08*G6_1_0_0 + 1.53210777398272e-08*G6_1_0_1 - 1.53210777398271e-08*G6_1_1_0 - 1.53210777398272e-08*G6_1_2_1 - 3999999.99999999*G7_0_3_0 - 3999999.99999999*G7_0_3_1 + 3999999.99999999*G7_0_4_0 + 3.55271367880049e-09*G7_0_4_1 + 3999999.99999999*G7_0_5_1 + 1.53210777398271e-08*G7_1_3_0 + 1.53210777398272e-08*G7_1_3_1 - 1.53210777398271e-08*G7_1_4_0 - 1.53210777398272e-08*G7_1_5_1 - 7999999.99999997*G8_0_0_0 - 7999999.99999999*G8_0_0_1 + 7999999.99999997*G8_0_1_0 + 7.10542735760099e-09*G8_0_1_1 + 7999999.99999998*G8_0_2_1 + 3.06421554796543e-08*G8_1_0_0 + 3.06421554796543e-08*G8_1_0_1 - 3.06421554796543e-08*G8_1_1_0 - 3.06421554796543e-08*G8_1_2_1 - 7999999.99999997*G9_0_0_0 - 7999999.99999999*G9_0_0_1 + 7999999.99999997*G9_0_1_0 + 7.10542735760099e-09*G9_0_1_1 + 7999999.99999998*G9_0_2_1 + 3.06421554796543e-08*G9_1_0_0 + 3.06421554796543e-08*G9_1_0_1 - 3.06421554796543e-08*G9_1_1_0 - 3.06421554796543e-08*G9_1_2_1 - 7999999.99999997*G10_0_3_0 - 7999999.99999999*G10_0_3_1 + 7999999.99999997*G10_0_4_0 + 7.10542735760099e-09*G10_0_4_1 + 7999999.99999998*G10_0_5_1 + 3.06421554796543e-08*G10_1_3_0 + 3.06421554796543e-08*G10_1_3_1 - 3.06421554796543e-08*G10_1_4_0 - 3.06421554796543e-08*G10_1_5_1 - 7999999.99999997*G11_0_3_0 - 7999999.99999999*G11_0_3_1 + 7999999.99999997*G11_0_4_0 + 7.10542735760099e-09*G11_0_4_1 + 7999999.99999998*G11_0_5_1 + 3.06421554796543e-08*G11_1_3_0 + 3.06421554796543e-08*G11_1_3_1 - 3.06421554796543e-08*G11_1_4_0 - 3.06421554796543e-08*G11_1_5_1 - 3999999.99999999*G12_0_0_0 - 3999999.99999999*G12_0_0_1 + 3999999.99999999*G12_0_1_0 + 3.55271367880049e-09*G12_0_1_1 + 3999999.99999999*G12_0_2_1 + 1.53210777398271e-08*G12_1_0_0 + 1.53210777398272e-08*G12_1_0_1 - 1.53210777398271e-08*G12_1_1_0 - 1.53210777398272e-08*G12_1_2_1 - 3999999.99999999*G13_0_0_0 - 3999999.99999999*G13_0_0_1 + 3999999.99999999*G13_0_1_0 + 3.55271367880049e-09*G13_0_1_1 + 3999999.99999999*G13_0_2_1 + 1.53210777398271e-08*G13_1_0_0 + 1.53210777398272e-08*G13_1_0_1 - 1.53210777398271e-08*G13_1_1_0 - 1.53210777398272e-08*G13_1_2_1;
      A[5] = 4000000*G6_0_0_0 + 4000000.00000001*G6_0_0_1 - 4000000*G6_0_1_0 - 3.5527136788005e-09*G6_0_1_1 - 4000000*G6_0_2_1 + 2.8865798640254e-09*G6_1_0_0 + 2.88657986402541e-09*G6_1_0_1 - 2.8865798640254e-09*G6_1_1_0 - 2.88657986402541e-09*G6_1_2_1 + 4000000*G7_0_3_0 + 4000000.00000001*G7_0_3_1 - 4000000*G7_0_4_0 - 3.5527136788005e-09*G7_0_4_1 - 4000000*G7_0_5_1 + 2.8865798640254e-09*G7_1_3_0 + 2.88657986402541e-09*G7_1_3_1 - 2.8865798640254e-09*G7_1_4_0 - 2.88657986402541e-09*G7_1_5_1 + 8000000*G8_0_0_0 + 8000000.00000001*G8_0_0_1 - 8000000*G8_0_1_0 - 7.10542735760101e-09*G8_0_1_1 - 8000000.00000001*G8_0_2_1 + 5.7731597280508e-09*G8_1_0_0 + 5.77315972805082e-09*G8_1_0_1 - 5.7731597280508e-09*G8_1_1_0 - 5.77315972805081e-09*G8_1_2_1 + 8000000*G9_0_0_0 + 8000000.00000001*G9_0_0_1 - 8000000*G9_0_1_0 - 7.10542735760101e-09*G9_0_1_1 - 8000000.00000001*G9_0_2_1 + 5.7731597280508e-09*G9_1_0_0 + 5.77315972805082e-09*G9_1_0_1 - 5.7731597280508e-09*G9_1_1_0 - 5.77315972805081e-09*G9_1_2_1 + 8000000*G10_0_3_0 + 8000000.00000001*G10_0_3_1 - 8000000*G10_0_4_0 - 7.10542735760101e-09*G10_0_4_1 - 8000000.00000001*G10_0_5_1 + 5.7731597280508e-09*G10_1_3_0 + 5.77315972805082e-09*G10_1_3_1 - 5.7731597280508e-09*G10_1_4_0 - 5.77315972805081e-09*G10_1_5_1 + 8000000*G11_0_3_0 + 8000000.00000001*G11_0_3_1 - 8000000*G11_0_4_0 - 7.10542735760101e-09*G11_0_4_1 - 8000000.00000001*G11_0_5_1 + 5.7731597280508e-09*G11_1_3_0 + 5.77315972805082e-09*G11_1_3_1 - 5.7731597280508e-09*G11_1_4_0 - 5.77315972805081e-09*G11_1_5_1 + 4000000*G12_0_0_0 + 4000000.00000001*G12_0_0_1 - 4000000*G12_0_1_0 - 3.5527136788005e-09*G12_0_1_1 - 4000000*G12_0_2_1 + 2.8865798640254e-09*G12_1_0_0 + 2.88657986402541e-09*G12_1_0_1 - 2.8865798640254e-09*G12_1_1_0 - 2.88657986402541e-09*G12_1_2_1 + 4000000*G13_0_0_0 + 4000000.00000001*G13_0_0_1 - 4000000*G13_0_1_0 - 3.5527136788005e-09*G13_0_1_1 - 4000000*G13_0_2_1 + 2.8865798640254e-09*G13_1_0_0 + 2.88657986402541e-09*G13_1_0_1 - 2.8865798640254e-09*G13_1_1_0 - 2.88657986402541e-09*G13_1_2_1;
      A[6] = -4000000*G0_0_0_0 - 4000000.00000001*G0_0_0_1 + 4000000*G0_0_1_0 + 3.5527136788005e-09*G0_0_1_1 + 4000000*G0_0_2_1 - 4000000.00000002*G0_1_0_0 - 4000000.00000002*G0_1_0_1 + 4000000.00000002*G0_1_1_0 + 3.55271367880052e-09*G0_1_1_1 + 4000000.00000002*G0_1_2_1 - 4000000*G1_0_0_0 - 4000000.00000001*G1_0_0_1 + 4000000*G1_0_1_0 + 3.5527136788005e-09*G1_0_1_1 + 4000000*G1_0_2_1 - 4000000.00000002*G1_1_0_0 - 4000000.00000002*G1_1_0_1 + 4000000.00000002*G1_1_1_0 + 3.55271367880052e-09*G1_1_1_1 + 4000000.00000002*G1_1_2_1 - 4000000*G2_0_3_0 - 4000000.00000001*G2_0_3_1 + 4000000*G2_0_4_0 + 3.5527136788005e-09*G2_0_4_1 + 4000000*G2_0_5_1 - 4000000.00000002*G2_1_3_0 - 4000000.00000002*G2_1_3_1 + 4000000.00000002*G2_1_4_0 + 3.55271367880052e-09*G2_1_4_1 + 4000000.00000002*G2_1_5_1 - 4000000*G3_0_3_0 - 4000000.00000001*G3_0_3_1 + 4000000*G3_0_4_0 + 3.5527136788005e-09*G3_0_4_1 + 4000000*G3_0_5_1 - 4000000.00000002*G3_1_3_0 - 4000000.00000002*G3_1_3_1 + 4000000.00000002*G3_1_4_0 + 3.55271367880052e-09*G3_1_4_1 + 4000000.00000002*G3_1_5_1 - 2000000*G4_0_3_0 - 2000000*G4_0_3_1 + 2000000*G4_0_4_0 + 1.77635683940025e-09*G4_0_4_1 + 2000000*G4_0_5_1 - 2000000.00000001*G4_1_3_0 - 2000000.00000001*G4_1_3_1 + 2000000.00000001*G4_1_4_0 + 1.77635683940026e-09*G4_1_4_1 + 2000000.00000001*G4_1_5_1 - 2000000*G5_0_3_0 - 2000000*G5_0_3_1 + 2000000*G5_0_4_0 + 1.77635683940025e-09*G5_0_4_1 + 2000000*G5_0_5_1 - 2000000.00000001*G5_1_3_0 - 2000000.00000001*G5_1_3_1 + 2000000.00000001*G5_1_4_0 + 1.77635683940026e-09*G5_1_4_1 + 2000000.00000001*G5_1_5_1 - 2000000*G14_0_0_0 - 2000000*G14_0_0_1 + 2000000*G14_0_1_0 + 1.77635683940025e-09*G14_0_1_1 + 2000000*G14_0_2_1 - 2000000.00000001*G14_1_0_0 - 2000000.00000001*G14_1_0_1 + 2000000.00000001*G14_1_1_0 + 1.77635683940026e-09*G14_1_1_1 + 2000000.00000001*G14_1_2_1 - 2000000*G15_0_3_0 - 2000000*G15_0_3_1 + 2000000*G15_0_4_0 + 1.77635683940025e-09*G15_0_4_1 + 2000000*G15_0_5_1 - 2000000.00000001*G15_1_3_0 - 2000000.00000001*G15_1_3_1 + 2000000.00000001*G15_1_4_0 + 1.77635683940026e-09*G15_1_4_1 + 2000000.00000001*G15_1_5_1;
      A[7] = -4000000*G0_0_0_0 - 4000000.00000001*G0_0_0_1 + 4000000*G0_0_1_0 + 3.55271367880051e-09*G0_0_1_1 + 4000000.00000001*G0_0_2_1 + 2.75335310107038e-08*G0_1_0_0 + 2.75335310107039e-08*G0_1_0_1 - 2.75335310107038e-08*G0_1_1_0 - 2.75335310107039e-08*G0_1_2_1 - 4000000*G1_0_0_0 - 4000000.00000001*G1_0_0_1 + 4000000*G1_0_1_0 + 3.55271367880051e-09*G1_0_1_1 + 4000000.00000001*G1_0_2_1 + 2.75335310107038e-08*G1_1_0_0 + 2.75335310107039e-08*G1_1_0_1 - 2.75335310107038e-08*G1_1_1_0 - 2.75335310107039e-08*G1_1_2_1 - 4000000*G2_0_3_0 - 4000000.00000001*G2_0_3_1 + 4000000*G2_0_4_0 + 3.55271367880051e-09*G2_0_4_1 + 4000000.00000001*G2_0_5_1 + 2.75335310107038e-08*G2_1_3_0 + 2.75335310107039e-08*G2_1_3_1 - 2.75335310107038e-08*G2_1_4_0 - 2.75335310107039e-08*G2_1_5_1 - 4000000*G3_0_3_0 - 4000000.00000001*G3_0_3_1 + 4000000*G3_0_4_0 + 3.55271367880051e-09*G3_0_4_1 + 4000000.00000001*G3_0_5_1 + 2.75335310107038e-08*G3_1_3_0 + 2.75335310107039e-08*G3_1_3_1 - 2.75335310107038e-08*G3_1_4_0 - 2.75335310107039e-08*G3_1_5_1 - 2000000*G4_0_3_0 - 2000000*G4_0_3_1 + 2000000*G4_0_4_0 + 1.77635683940025e-09*G4_0_4_1 + 2000000*G4_0_5_1 + 1.37667655053519e-08*G4_1_3_0 + 1.37667655053519e-08*G4_1_3_1 - 1.37667655053519e-08*G4_1_4_0 - 1.37667655053519e-08*G4_1_5_1 - 2000000*G5_0_3_0 - 2000000*G5_0_3_1 + 2000000*G5_0_4_0 + 1.77635683940025e-09*G5_0_4_1 + 2000000*G5_0_5_1 + 1.37667655053519e-08*G5_1_3_0 + 1.37667655053519e-08*G5_1_3_1 - 1.37667655053519e-08*G5_1_4_0 - 1.37667655053519e-08*G5_1_5_1 - 2000000*G14_0_0_0 - 2000000*G14_0_0_1 + 2000000*G14_0_1_0 + 1.77635683940025e-09*G14_0_1_1 + 2000000*G14_0_2_1 + 1.37667655053519e-08*G14_1_0_0 + 1.37667655053519e-08*G14_1_0_1 - 1.37667655053519e-08*G14_1_1_0 - 1.37667655053519e-08*G14_1_2_1 - 2000000*G15_0_3_0 - 2000000*G15_0_3_1 + 2000000*G15_0_4_0 + 1.77635683940025e-09*G15_0_4_1 + 2000000*G15_0_5_1 + 1.37667655053519e-08*G15_1_3_0 + 1.37667655053519e-08*G15_1_3_1 - 1.37667655053519e-08*G15_1_4_0 - 1.37667655053519e-08*G15_1_5_1;
      A[8] = 4000000*G0_1_0_0 + 4000000.00000001*G0_1_0_1 - 4000000*G0_1_1_0 - 3.55271367880051e-09*G0_1_1_1 - 4000000.00000001*G0_1_2_1 + 4000000*G1_1_0_0 + 4000000.00000001*G1_1_0_1 - 4000000*G1_1_1_0 - 3.55271367880051e-09*G1_1_1_1 - 4000000.00000001*G1_1_2_1 + 4000000*G2_1_3_0 + 4000000.00000001*G2_1_3_1 - 4000000*G2_1_4_0 - 3.55271367880051e-09*G2_1_4_1 - 4000000.00000001*G2_1_5_1 + 4000000*G3_1_3_0 + 4000000.00000001*G3_1_3_1 - 4000000*G3_1_4_0 - 3.55271367880051e-09*G3_1_4_1 - 4000000.00000001*G3_1_5_1 + 2000000*G4_1_3_0 + 2000000.00000001*G4_1_3_1 - 2000000*G4_1_4_0 - 1.77635683940025e-09*G4_1_4_1 - 2000000*G4_1_5_1 + 2000000*G5_1_3_0 + 2000000.00000001*G5_1_3_1 - 2000000*G5_1_4_0 - 1.77635683940025e-09*G5_1_4_1 - 2000000*G5_1_5_1 + 2000000*G14_1_0_0 + 2000000.00000001*G14_1_0_1 - 2000000*G14_1_1_0 - 1.77635683940025e-09*G14_1_1_1 - 2000000*G14_1_2_1 + 2000000*G15_1_3_0 + 2000000.00000001*G15_1_3_1 - 2000000*G15_1_4_0 - 1.77635683940025e-09*G15_1_4_1 - 2000000*G15_1_5_1;
      A[9] = 7999999.99999997*G0_0_0_0 + 7999999.99999999*G0_0_0_1 - 7999999.99999997*G0_0_1_0 - 7.10542735760099e-09*G0_0_1_1 - 7999999.99999998*G0_0_2_1 - 5.15143483426072e-08*G0_1_0_0 - 5.15143483426073e-08*G0_1_0_1 + 5.15143483426072e-08*G0_1_1_0 + 5.15143483426073e-08*G0_1_2_1 + 7999999.99999997*G1_0_0_0 + 7999999.99999999*G1_0_0_1 - 7999999.99999997*G1_0_1_0 - 7.10542735760099e-09*G1_0_1_1 - 7999999.99999998*G1_0_2_1 - 5.15143483426072e-08*G1_1_0_0 - 5.15143483426073e-08*G1_1_0_1 + 5.15143483426072e-08*G1_1_1_0 + 5.15143483426073e-08*G1_1_2_1 + 7999999.99999997*G2_0_3_0 + 7999999.99999999*G2_0_3_1 - 7999999.99999997*G2_0_4_0 - 7.10542735760099e-09*G2_0_4_1 - 7999999.99999998*G2_0_5_1 - 5.15143483426072e-08*G2_1_3_0 - 5.15143483426073e-08*G2_1_3_1 + 5.15143483426072e-08*G2_1_4_0 + 5.15143483426073e-08*G2_1_5_1 + 7999999.99999997*G3_0_3_0 + 7999999.99999999*G3_0_3_1 - 7999999.99999997*G3_0_4_0 - 7.10542735760099e-09*G3_0_4_1 - 7999999.99999998*G3_0_5_1 - 5.15143483426072e-08*G3_1_3_0 - 5.15143483426073e-08*G3_1_3_1 + 5.15143483426072e-08*G3_1_4_0 + 5.15143483426073e-08*G3_1_5_1 + 3999999.99999999*G4_0_3_0 + 3999999.99999999*G4_0_3_1 - 3999999.99999999*G4_0_4_0 - 3.55271367880049e-09*G4_0_4_1 - 3999999.99999999*G4_0_5_1 - 2.57571741713036e-08*G4_1_3_0 - 2.57571741713036e-08*G4_1_3_1 + 2.57571741713036e-08*G4_1_4_0 + 2.57571741713036e-08*G4_1_5_1 + 3999999.99999999*G5_0_3_0 + 3999999.99999999*G5_0_3_1 - 3999999.99999999*G5_0_4_0 - 3.55271367880049e-09*G5_0_4_1 - 3999999.99999999*G5_0_5_1 - 2.57571741713036e-08*G5_1_3_0 - 2.57571741713036e-08*G5_1_3_1 + 2.57571741713036e-08*G5_1_4_0 + 2.57571741713036e-08*G5_1_5_1 + 3999999.99999999*G14_0_0_0 + 3999999.99999999*G14_0_0_1 - 3999999.99999999*G14_0_1_0 - 3.55271367880049e-09*G14_0_1_1 - 3999999.99999999*G14_0_2_1 - 2.57571741713036e-08*G14_1_0_0 - 2.57571741713036e-08*G14_1_0_1 + 2.57571741713036e-08*G14_1_1_0 + 2.57571741713036e-08*G14_1_2_1 + 3999999.99999999*G15_0_3_0 + 3999999.99999999*G15_0_3_1 - 3999999.99999999*G15_0_4_0 - 3.55271367880049e-09*G15_0_4_1 - 3999999.99999999*G15_0_5_1 - 2.57571741713036e-08*G15_1_3_0 - 2.57571741713036e-08*G15_1_3_1 + 2.57571741713036e-08*G15_1_4_0 + 2.57571741713036e-08*G15_1_5_1;
      A[10] = -7999999.99999997*G0_0_0_0 - 7999999.99999999*G0_0_0_1 + 7999999.99999997*G0_0_1_0 + 7.10542735760099e-09*G0_0_1_1 + 7999999.99999998*G0_0_2_1 + 3.06421554796543e-08*G0_1_0_0 + 3.06421554796543e-08*G0_1_0_1 - 3.06421554796543e-08*G0_1_1_0 - 3.06421554796543e-08*G0_1_2_1 - 7999999.99999997*G1_0_0_0 - 7999999.99999999*G1_0_0_1 + 7999999.99999997*G1_0_1_0 + 7.10542735760099e-09*G1_0_1_1 + 7999999.99999998*G1_0_2_1 + 3.06421554796543e-08*G1_1_0_0 + 3.06421554796543e-08*G1_1_0_1 - 3.06421554796543e-08*G1_1_1_0 - 3.06421554796543e-08*G1_1_2_1 - 7999999.99999997*G2_0_3_0 - 7999999.99999999*G2_0_3_1 + 7999999.99999997*G2_0_4_0 + 7.10542735760099e-09*G2_0_4_1 + 7999999.99999998*G2_0_5_1 + 3.06421554796543e-08*G2_1_3_0 + 3.06421554796543e-08*G2_1_3_1 - 3.06421554796543e-08*G2_1_4_0 - 3.06421554796543e-08*G2_1_5_1 - 7999999.99999997*G3_0_3_0 - 7999999.99999999*G3_0_3_1 + 7999999.99999997*G3_0_4_0 + 7.10542735760099e-09*G3_0_4_1 + 7999999.99999998*G3_0_5_1 + 3.06421554796543e-08*G3_1_3_0 + 3.06421554796543e-08*G3_1_3_1 - 3.06421554796543e-08*G3_1_4_0 - 3.06421554796543e-08*G3_1_5_1 - 3999999.99999999*G4_0_3_0 - 3999999.99999999*G4_0_3_1 + 3999999.99999999*G4_0_4_0 + 3.55271367880049e-09*G4_0_4_1 + 3999999.99999999*G4_0_5_1 + 1.53210777398271e-08*G4_1_3_0 + 1.53210777398272e-08*G4_1_3_1 - 1.53210777398271e-08*G4_1_4_0 - 1.53210777398272e-08*G4_1_5_1 - 3999999.99999999*G5_0_3_0 - 3999999.99999999*G5_0_3_1 + 3999999.99999999*G5_0_4_0 + 3.55271367880049e-09*G5_0_4_1 + 3999999.99999999*G5_0_5_1 + 1.53210777398271e-08*G5_1_3_0 + 1.53210777398272e-08*G5_1_3_1 - 1.53210777398271e-08*G5_1_4_0 - 1.53210777398272e-08*G5_1_5_1 - 3999999.99999999*G14_0_0_0 - 3999999.99999999*G14_0_0_1 + 3999999.99999999*G14_0_1_0 + 3.55271367880049e-09*G14_0_1_1 + 3999999.99999999*G14_0_2_1 + 1.53210777398271e-08*G14_1_0_0 + 1.53210777398272e-08*G14_1_0_1 - 1.53210777398271e-08*G14_1_1_0 - 1.53210777398272e-08*G14_1_2_1 - 3999999.99999999*G15_0_3_0 - 3999999.99999999*G15_0_3_1 + 3999999.99999999*G15_0_4_0 + 3.55271367880049e-09*G15_0_4_1 + 3999999.99999999*G15_0_5_1 + 1.53210777398271e-08*G15_1_3_0 + 1.53210777398272e-08*G15_1_3_1 - 1.53210777398271e-08*G15_1_4_0 - 1.53210777398272e-08*G15_1_5_1;
      A[11] = 8000000*G0_0_0_0 + 8000000.00000001*G0_0_0_1 - 8000000*G0_0_1_0 - 7.10542735760101e-09*G0_0_1_1 - 8000000.00000001*G0_0_2_1 + 5.7731597280508e-09*G0_1_0_0 + 5.77315972805082e-09*G0_1_0_1 - 5.7731597280508e-09*G0_1_1_0 - 5.77315972805081e-09*G0_1_2_1 + 8000000*G1_0_0_0 + 8000000.00000001*G1_0_0_1 - 8000000*G1_0_1_0 - 7.10542735760101e-09*G1_0_1_1 - 8000000.00000001*G1_0_2_1 + 5.7731597280508e-09*G1_1_0_0 + 5.77315972805082e-09*G1_1_0_1 - 5.7731597280508e-09*G1_1_1_0 - 5.77315972805081e-09*G1_1_2_1 + 8000000*G2_0_3_0 + 8000000.00000001*G2_0_3_1 - 8000000*G2_0_4_0 - 7.10542735760101e-09*G2_0_4_1 - 8000000.00000001*G2_0_5_1 + 5.7731597280508e-09*G2_1_3_0 + 5.77315972805082e-09*G2_1_3_1 - 5.7731597280508e-09*G2_1_4_0 - 5.77315972805081e-09*G2_1_5_1 + 8000000*G3_0_3_0 + 8000000.00000001*G3_0_3_1 - 8000000*G3_0_4_0 - 7.10542735760101e-09*G3_0_4_1 - 8000000.00000001*G3_0_5_1 + 5.7731597280508e-09*G3_1_3_0 + 5.77315972805082e-09*G3_1_3_1 - 5.7731597280508e-09*G3_1_4_0 - 5.77315972805081e-09*G3_1_5_1 + 4000000*G4_0_3_0 + 4000000.00000001*G4_0_3_1 - 4000000*G4_0_4_0 - 3.5527136788005e-09*G4_0_4_1 - 4000000*G4_0_5_1 + 2.8865798640254e-09*G4_1_3_0 + 2.88657986402541e-09*G4_1_3_1 - 2.8865798640254e-09*G4_1_4_0 - 2.88657986402541e-09*G4_1_5_1 + 4000000*G5_0_3_0 + 4000000.00000001*G5_0_3_1 - 4000000*G5_0_4_0 - 3.5527136788005e-09*G5_0_4_1 - 4000000*G5_0_5_1 + 2.8865798640254e-09*G5_1_3_0 + 2.88657986402541e-09*G5_1_3_1 - 2.8865798640254e-09*G5_1_4_0 - 2.88657986402541e-09*G5_1_5_1 + 4000000*G14_0_0_0 + 4000000.00000001*G14_0_0_1 - 4000000*G14_0_1_0 - 3.5527136788005e-09*G14_0_1_1 - 4000000*G14_0_2_1 + 2.8865798640254e-09*G14_1_0_0 + 2.88657986402541e-09*G14_1_0_1 - 2.8865798640254e-09*G14_1_1_0 - 2.88657986402541e-09*G14_1_2_1 + 4000000*G15_0_3_0 + 4000000.00000001*G15_0_3_1 - 4000000*G15_0_4_0 - 3.5527136788005e-09*G15_0_4_1 - 4000000*G15_0_5_1 + 2.8865798640254e-09*G15_1_3_0 + 2.88657986402541e-09*G15_1_3_1 - 2.8865798640254e-09*G15_1_4_0 - 2.88657986402541e-09*G15_1_5_1;
      A[12] = 0.0;
      A[13] = 0.0;
      A[14] = 0.0;
      A[15] = 0.0;
      A[16] = 0.0;
      A[17] = 0.0;
      A[18] = 0.0;
      A[19] = 0.0;
      A[20] = 0.0;
        break;
      }
    case 2:
      {
        A[0] = -1999999.99999999*G6_0_0_0 - 2000000*G6_0_0_1 + 1999999.99999999*G6_0_1_0 + 1.77635683940025e-09*G6_0_1_1 + 2000000*G6_0_2_1 - 2000000*G6_1_0_0 - 2000000.00000001*G6_1_0_1 + 2000000*G6_1_1_0 + 1.77635683940026e-09*G6_1_1_1 + 2000000.00000001*G6_1_2_1 - 1999999.99999999*G7_0_3_0 - 2000000*G7_0_3_1 + 1999999.99999999*G7_0_4_0 + 1.77635683940025e-09*G7_0_4_1 + 2000000*G7_0_5_1 - 2000000*G7_1_3_0 - 2000000.00000001*G7_1_3_1 + 2000000*G7_1_4_0 + 1.77635683940026e-09*G7_1_4_1 + 2000000.00000001*G7_1_5_1 - 3999999.99999999*G8_0_0_0 - 4000000*G8_0_0_1 + 3999999.99999999*G8_0_1_0 + 3.5527136788005e-09*G8_0_1_1 + 3999999.99999999*G8_0_2_1 - 4000000.00000001*G8_1_0_0 - 4000000.00000002*G8_1_0_1 + 4000000.00000001*G8_1_1_0 + 3.55271367880051e-09*G8_1_1_1 + 4000000.00000001*G8_1_2_1 - 3999999.99999999*G9_0_0_0 - 4000000*G9_0_0_1 + 3999999.99999999*G9_0_1_0 + 3.5527136788005e-09*G9_0_1_1 + 3999999.99999999*G9_0_2_1 - 4000000.00000001*G9_1_0_0 - 4000000.00000002*G9_1_0_1 + 4000000.00000001*G9_1_1_0 + 3.55271367880051e-09*G9_1_1_1 + 4000000.00000001*G9_1_2_1 - 3999999.99999999*G10_0_3_0 - 4000000*G10_0_3_1 + 3999999.99999999*G10_0_4_0 + 3.5527136788005e-09*G10_0_4_1 + 3999999.99999999*G10_0_5_1 - 4000000.00000001*G10_1_3_0 - 4000000.00000002*G10_1_3_1 + 4000000.00000001*G10_1_4_0 + 3.55271367880051e-09*G10_1_4_1 + 4000000.00000001*G10_1_5_1 - 3999999.99999999*G11_0_3_0 - 4000000*G11_0_3_1 + 3999999.99999999*G11_0_4_0 + 3.5527136788005e-09*G11_0_4_1 + 3999999.99999999*G11_0_5_1 - 4000000.00000001*G11_1_3_0 - 4000000.00000002*G11_1_3_1 + 4000000.00000001*G11_1_4_0 + 3.55271367880051e-09*G11_1_4_1 + 4000000.00000001*G11_1_5_1 - 1999999.99999999*G12_0_0_0 - 2000000*G12_0_0_1 + 1999999.99999999*G12_0_1_0 + 1.77635683940025e-09*G12_0_1_1 + 2000000*G12_0_2_1 - 2000000*G12_1_0_0 - 2000000.00000001*G12_1_0_1 + 2000000*G12_1_1_0 + 1.77635683940026e-09*G12_1_1_1 + 2000000.00000001*G12_1_2_1 - 1999999.99999999*G13_0_0_0 - 2000000*G13_0_0_1 + 1999999.99999999*G13_0_1_0 + 1.77635683940025e-09*G13_0_1_1 + 2000000*G13_0_2_1 - 2000000*G13_1_0_0 - 2000000.00000001*G13_1_0_1 + 2000000*G13_1_1_0 + 1.77635683940026e-09*G13_1_1_1 + 2000000.00000001*G13_1_2_1;
      A[1] = 1999999.99999999*G6_0_0_0 + 2000000*G6_0_0_1 - 1999999.99999999*G6_0_1_0 - 1.77635683940025e-09*G6_0_1_1 - 2000000*G6_0_2_1 + 1.43773881688958e-08*G6_1_0_0 + 1.43773881688958e-08*G6_1_0_1 - 1.43773881688958e-08*G6_1_1_0 - 1.43773881688958e-08*G6_1_2_1 + 1999999.99999999*G7_0_3_0 + 2000000*G7_0_3_1 - 1999999.99999999*G7_0_4_0 - 1.77635683940025e-09*G7_0_4_1 - 2000000*G7_0_5_1 + 1.43773881688958e-08*G7_1_3_0 + 1.43773881688958e-08*G7_1_3_1 - 1.43773881688958e-08*G7_1_4_0 - 1.43773881688958e-08*G7_1_5_1 + 3999999.99999999*G8_0_0_0 + 3999999.99999999*G8_0_0_1 - 3999999.99999999*G8_0_1_0 - 3.55271367880049e-09*G8_0_1_1 - 3999999.99999999*G8_0_2_1 + 2.87547763377915e-08*G8_1_0_0 + 2.87547763377916e-08*G8_1_0_1 - 2.87547763377915e-08*G8_1_1_0 - 2.87547763377915e-08*G8_1_2_1 + 3999999.99999999*G9_0_0_0 + 3999999.99999999*G9_0_0_1 - 3999999.99999999*G9_0_1_0 - 3.55271367880049e-09*G9_0_1_1 - 3999999.99999999*G9_0_2_1 + 2.87547763377915e-08*G9_1_0_0 + 2.87547763377916e-08*G9_1_0_1 - 2.87547763377915e-08*G9_1_1_0 - 2.87547763377915e-08*G9_1_2_1 + 3999999.99999999*G10_0_3_0 + 3999999.99999999*G10_0_3_1 - 3999999.99999999*G10_0_4_0 - 3.55271367880049e-09*G10_0_4_1 - 3999999.99999999*G10_0_5_1 + 2.87547763377915e-08*G10_1_3_0 + 2.87547763377916e-08*G10_1_3_1 - 2.87547763377915e-08*G10_1_4_0 - 2.87547763377915e-08*G10_1_5_1 + 3999999.99999999*G11_0_3_0 + 3999999.99999999*G11_0_3_1 - 3999999.99999999*G11_0_4_0 - 3.55271367880049e-09*G11_0_4_1 - 3999999.99999999*G11_0_5_1 + 2.87547763377915e-08*G11_1_3_0 + 2.87547763377916e-08*G11_1_3_1 - 2.87547763377915e-08*G11_1_4_0 - 2.87547763377915e-08*G11_1_5_1 + 1999999.99999999*G12_0_0_0 + 2000000*G12_0_0_1 - 1999999.99999999*G12_0_1_0 - 1.77635683940025e-09*G12_0_1_1 - 2000000*G12_0_2_1 + 1.43773881688958e-08*G12_1_0_0 + 1.43773881688958e-08*G12_1_0_1 - 1.43773881688958e-08*G12_1_1_0 - 1.43773881688958e-08*G12_1_2_1 + 1999999.99999999*G13_0_0_0 + 2000000*G13_0_0_1 - 1999999.99999999*G13_0_1_0 - 1.77635683940025e-09*G13_0_1_1 - 2000000*G13_0_2_1 + 1.43773881688958e-08*G13_1_0_0 + 1.43773881688958e-08*G13_1_0_1 - 1.43773881688958e-08*G13_1_1_0 - 1.43773881688958e-08*G13_1_2_1;
      A[2] = -2000000*G6_1_0_0 - 2000000*G6_1_0_1 + 2000000*G6_1_1_0 + 1.77635683940025e-09*G6_1_1_1 + 2000000*G6_1_2_1 - 2000000*G7_1_3_0 - 2000000*G7_1_3_1 + 2000000*G7_1_4_0 + 1.77635683940025e-09*G7_1_4_1 + 2000000*G7_1_5_1 - 3999999.99999999*G8_1_0_0 - 4000000*G8_1_0_1 + 3999999.99999999*G8_1_1_0 + 3.5527136788005e-09*G8_1_1_1 + 4000000*G8_1_2_1 - 3999999.99999999*G9_1_0_0 - 4000000*G9_1_0_1 + 3999999.99999999*G9_1_1_0 + 3.5527136788005e-09*G9_1_1_1 + 4000000*G9_1_2_1 - 3999999.99999999*G10_1_3_0 - 4000000*G10_1_3_1 + 3999999.99999999*G10_1_4_0 + 3.5527136788005e-09*G10_1_4_1 + 4000000*G10_1_5_1 - 3999999.99999999*G11_1_3_0 - 4000000*G11_1_3_1 + 3999999.99999999*G11_1_4_0 + 3.5527136788005e-09*G11_1_4_1 + 4000000*G11_1_5_1 - 2000000*G12_1_0_0 - 2000000*G12_1_0_1 + 2000000*G12_1_1_0 + 1.77635683940025e-09*G12_1_1_1 + 2000000*G12_1_2_1 - 2000000*G13_1_0_0 - 2000000*G13_1_0_1 + 2000000*G13_1_1_0 + 1.77635683940025e-09*G13_1_1_1 + 2000000*G13_1_2_1;
      A[3] = -2.66453525910037e-09*G6_0_0_0 - 2.66453525910038e-09*G6_0_0_1 + 2.66453525910037e-09*G6_0_1_0 + 2.66453525910037e-09*G6_0_2_1 + 3999999.99999997*G6_1_0_0 + 3999999.99999998*G6_1_0_1 - 3999999.99999997*G6_1_1_0 - 3.55271367880048e-09*G6_1_1_1 - 3999999.99999997*G6_1_2_1 - 2.66453525910037e-09*G7_0_3_0 - 2.66453525910038e-09*G7_0_3_1 + 2.66453525910037e-09*G7_0_4_0 + 2.66453525910037e-09*G7_0_5_1 + 3999999.99999997*G7_1_3_0 + 3999999.99999998*G7_1_3_1 - 3999999.99999997*G7_1_4_0 - 3.55271367880048e-09*G7_1_4_1 - 3999999.99999997*G7_1_5_1 - 5.32907051820074e-09*G8_0_0_0 - 5.32907051820075e-09*G8_0_0_1 + 5.32907051820074e-09*G8_0_1_0 + 5.32907051820075e-09*G8_0_2_1 + 7999999.99999994*G8_1_0_0 + 7999999.99999996*G8_1_0_1 - 7999999.99999994*G8_1_1_0 - 7.10542735760096e-09*G8_1_1_1 - 7999999.99999995*G8_1_2_1 - 5.32907051820074e-09*G9_0_0_0 - 5.32907051820075e-09*G9_0_0_1 + 5.32907051820074e-09*G9_0_1_0 + 5.32907051820075e-09*G9_0_2_1 + 7999999.99999994*G9_1_0_0 + 7999999.99999996*G9_1_0_1 - 7999999.99999994*G9_1_1_0 - 7.10542735760096e-09*G9_1_1_1 - 7999999.99999995*G9_1_2_1 - 5.32907051820074e-09*G10_0_3_0 - 5.32907051820075e-09*G10_0_3_1 + 5.32907051820074e-09*G10_0_4_0 + 5.32907051820075e-09*G10_0_5_1 + 7999999.99999994*G10_1_3_0 + 7999999.99999996*G10_1_3_1 - 7999999.99999994*G10_1_4_0 - 7.10542735760096e-09*G10_1_4_1 - 7999999.99999995*G10_1_5_1 - 5.32907051820074e-09*G11_0_3_0 - 5.32907051820075e-09*G11_0_3_1 + 5.32907051820074e-09*G11_0_4_0 + 5.32907051820075e-09*G11_0_5_1 + 7999999.99999994*G11_1_3_0 + 7999999.99999996*G11_1_3_1 - 7999999.99999994*G11_1_4_0 - 7.10542735760096e-09*G11_1_4_1 - 7999999.99999995*G11_1_5_1 - 2.66453525910037e-09*G12_0_0_0 - 2.66453525910038e-09*G12_0_0_1 + 2.66453525910037e-09*G12_0_1_0 + 2.66453525910037e-09*G12_0_2_1 + 3999999.99999997*G12_1_0_0 + 3999999.99999998*G12_1_0_1 - 3999999.99999997*G12_1_1_0 - 3.55271367880048e-09*G12_1_1_1 - 3999999.99999997*G12_1_2_1 - 2.66453525910037e-09*G13_0_0_0 - 2.66453525910038e-09*G13_0_0_1 + 2.66453525910037e-09*G13_0_1_0 + 2.66453525910037e-09*G13_0_2_1 + 3999999.99999997*G13_1_0_0 + 3999999.99999998*G13_1_0_1 - 3999999.99999997*G13_1_1_0 - 3.55271367880048e-09*G13_1_1_1 - 3999999.99999997*G13_1_2_1;
      A[4] = 2.66453525910037e-09*G6_0_0_0 + 2.66453525910038e-09*G6_0_0_1 - 2.66453525910037e-09*G6_0_1_0 - 2.66453525910037e-09*G6_0_2_1 + 4000000.00000001*G6_1_0_0 + 4000000.00000002*G6_1_0_1 - 4000000.00000001*G6_1_1_0 - 3.55271367880052e-09*G6_1_1_1 - 4000000.00000002*G6_1_2_1 + 2.66453525910037e-09*G7_0_3_0 + 2.66453525910038e-09*G7_0_3_1 - 2.66453525910037e-09*G7_0_4_0 - 2.66453525910037e-09*G7_0_5_1 + 4000000.00000001*G7_1_3_0 + 4000000.00000002*G7_1_3_1 - 4000000.00000001*G7_1_4_0 - 3.55271367880052e-09*G7_1_4_1 - 4000000.00000002*G7_1_5_1 + 5.32907051820074e-09*G8_0_0_0 + 5.32907051820075e-09*G8_0_0_1 - 5.32907051820074e-09*G8_0_1_0 - 5.32907051820075e-09*G8_0_2_1 + 8000000.00000003*G8_1_0_0 + 8000000.00000004*G8_1_0_1 - 8000000.00000003*G8_1_1_0 - 7.10542735760103e-09*G8_1_1_1 - 8000000.00000004*G8_1_2_1 + 5.32907051820074e-09*G9_0_0_0 + 5.32907051820075e-09*G9_0_0_1 - 5.32907051820074e-09*G9_0_1_0 - 5.32907051820075e-09*G9_0_2_1 + 8000000.00000003*G9_1_0_0 + 8000000.00000004*G9_1_0_1 - 8000000.00000003*G9_1_1_0 - 7.10542735760103e-09*G9_1_1_1 - 8000000.00000004*G9_1_2_1 + 5.32907051820074e-09*G10_0_3_0 + 5.32907051820075e-09*G10_0_3_1 - 5.32907051820074e-09*G10_0_4_0 - 5.32907051820075e-09*G10_0_5_1 + 8000000.00000003*G10_1_3_0 + 8000000.00000004*G10_1_3_1 - 8000000.00000003*G10_1_4_0 - 7.10542735760103e-09*G10_1_4_1 - 8000000.00000004*G10_1_5_1 + 5.32907051820074e-09*G11_0_3_0 + 5.32907051820075e-09*G11_0_3_1 - 5.32907051820074e-09*G11_0_4_0 - 5.32907051820075e-09*G11_0_5_1 + 8000000.00000003*G11_1_3_0 + 8000000.00000004*G11_1_3_1 - 8000000.00000003*G11_1_4_0 - 7.10542735760103e-09*G11_1_4_1 - 8000000.00000004*G11_1_5_1 + 2.66453525910037e-09*G12_0_0_0 + 2.66453525910038e-09*G12_0_0_1 - 2.66453525910037e-09*G12_0_1_0 - 2.66453525910037e-09*G12_0_2_1 + 4000000.00000001*G12_1_0_0 + 4000000.00000002*G12_1_0_1 - 4000000.00000001*G12_1_1_0 - 3.55271367880052e-09*G12_1_1_1 - 4000000.00000002*G12_1_2_1 + 2.66453525910037e-09*G13_0_0_0 + 2.66453525910038e-09*G13_0_0_1 - 2.66453525910037e-09*G13_0_1_0 - 2.66453525910037e-09*G13_0_2_1 + 4000000.00000001*G13_1_0_0 + 4000000.00000002*G13_1_0_1 - 4000000.00000001*G13_1_1_0 - 3.55271367880052e-09*G13_1_1_1 - 4000000.00000002*G13_1_2_1;
      A[5] = 1.49585824125563e-09*G6_0_0_0 + 1.49585824125563e-09*G6_0_0_1 - 1.49585824125563e-09*G6_0_1_0 - 1.49585824125563e-09*G6_0_2_1 - 4000000*G6_1_0_0 - 4000000*G6_1_0_1 + 4000000*G6_1_1_0 + 3.5527136788005e-09*G6_1_1_1 + 4000000*G6_1_2_1 + 1.49585824125563e-09*G7_0_3_0 + 1.49585824125563e-09*G7_0_3_1 - 1.49585824125563e-09*G7_0_4_0 - 1.49585824125563e-09*G7_0_5_1 - 4000000*G7_1_3_0 - 4000000*G7_1_3_1 + 4000000*G7_1_4_0 + 3.5527136788005e-09*G7_1_4_1 + 4000000*G7_1_5_1 + 2.99171648251125e-09*G8_0_0_0 + 2.99171648251126e-09*G8_0_0_1 - 2.99171648251125e-09*G8_0_1_0 - 2.99171648251126e-09*G8_0_2_1 - 7999999.99999999*G8_1_0_0 - 8000000.00000001*G8_1_0_1 + 7999999.99999999*G8_1_1_0 + 7.10542735760101e-09*G8_1_1_1 + 8000000*G8_1_2_1 + 2.99171648251125e-09*G9_0_0_0 + 2.99171648251126e-09*G9_0_0_1 - 2.99171648251125e-09*G9_0_1_0 - 2.99171648251126e-09*G9_0_2_1 - 7999999.99999999*G9_1_0_0 - 8000000.00000001*G9_1_0_1 + 7999999.99999999*G9_1_1_0 + 7.10542735760101e-09*G9_1_1_1 + 8000000*G9_1_2_1 + 2.99171648251125e-09*G10_0_3_0 + 2.99171648251126e-09*G10_0_3_1 - 2.99171648251125e-09*G10_0_4_0 - 2.99171648251126e-09*G10_0_5_1 - 7999999.99999999*G10_1_3_0 - 8000000.00000001*G10_1_3_1 + 7999999.99999999*G10_1_4_0 + 7.10542735760101e-09*G10_1_4_1 + 8000000*G10_1_5_1 + 2.99171648251125e-09*G11_0_3_0 + 2.99171648251126e-09*G11_0_3_1 - 2.99171648251125e-09*G11_0_4_0 - 2.99171648251126e-09*G11_0_5_1 - 7999999.99999999*G11_1_3_0 - 8000000.00000001*G11_1_3_1 + 7999999.99999999*G11_1_4_0 + 7.10542735760101e-09*G11_1_4_1 + 8000000*G11_1_5_1 + 1.49585824125563e-09*G12_0_0_0 + 1.49585824125563e-09*G12_0_0_1 - 1.49585824125563e-09*G12_0_1_0 - 1.49585824125563e-09*G12_0_2_1 - 4000000*G12_1_0_0 - 4000000*G12_1_0_1 + 4000000*G12_1_1_0 + 3.5527136788005e-09*G12_1_1_1 + 4000000*G12_1_2_1 + 1.49585824125563e-09*G13_0_0_0 + 1.49585824125563e-09*G13_0_0_1 - 1.49585824125563e-09*G13_0_1_0 - 1.49585824125563e-09*G13_0_2_1 - 4000000*G13_1_0_0 - 4000000*G13_1_0_1 + 4000000*G13_1_1_0 + 3.5527136788005e-09*G13_1_1_1 + 4000000*G13_1_2_1;
      A[6] = -3999999.99999999*G0_0_0_0 - 4000000*G0_0_0_1 + 3999999.99999999*G0_0_1_0 + 3.5527136788005e-09*G0_0_1_1 + 3999999.99999999*G0_0_2_1 - 4000000.00000001*G0_1_0_0 - 4000000.00000002*G0_1_0_1 + 4000000.00000001*G0_1_1_0 + 3.55271367880051e-09*G0_1_1_1 + 4000000.00000001*G0_1_2_1 - 3999999.99999999*G1_0_0_0 - 4000000*G1_0_0_1 + 3999999.99999999*G1_0_1_0 + 3.5527136788005e-09*G1_0_1_1 + 3999999.99999999*G1_0_2_1 - 4000000.00000001*G1_1_0_0 - 4000000.00000002*G1_1_0_1 + 4000000.00000001*G1_1_1_0 + 3.55271367880051e-09*G1_1_1_1 + 4000000.00000001*G1_1_2_1 - 3999999.99999999*G2_0_3_0 - 4000000*G2_0_3_1 + 3999999.99999999*G2_0_4_0 + 3.5527136788005e-09*G2_0_4_1 + 3999999.99999999*G2_0_5_1 - 4000000.00000001*G2_1_3_0 - 4000000.00000002*G2_1_3_1 + 4000000.00000001*G2_1_4_0 + 3.55271367880051e-09*G2_1_4_1 + 4000000.00000001*G2_1_5_1 - 3999999.99999999*G3_0_3_0 - 4000000*G3_0_3_1 + 3999999.99999999*G3_0_4_0 + 3.5527136788005e-09*G3_0_4_1 + 3999999.99999999*G3_0_5_1 - 4000000.00000001*G3_1_3_0 - 4000000.00000002*G3_1_3_1 + 4000000.00000001*G3_1_4_0 + 3.55271367880051e-09*G3_1_4_1 + 4000000.00000001*G3_1_5_1 - 1999999.99999999*G4_0_3_0 - 2000000*G4_0_3_1 + 1999999.99999999*G4_0_4_0 + 1.77635683940025e-09*G4_0_4_1 + 2000000*G4_0_5_1 - 2000000*G4_1_3_0 - 2000000.00000001*G4_1_3_1 + 2000000*G4_1_4_0 + 1.77635683940026e-09*G4_1_4_1 + 2000000.00000001*G4_1_5_1 - 1999999.99999999*G5_0_3_0 - 2000000*G5_0_3_1 + 1999999.99999999*G5_0_4_0 + 1.77635683940025e-09*G5_0_4_1 + 2000000*G5_0_5_1 - 2000000*G5_1_3_0 - 2000000.00000001*G5_1_3_1 + 2000000*G5_1_4_0 + 1.77635683940026e-09*G5_1_4_1 + 2000000.00000001*G5_1_5_1 - 1999999.99999999*G14_0_0_0 - 2000000*G14_0_0_1 + 1999999.99999999*G14_0_1_0 + 1.77635683940025e-09*G14_0_1_1 + 2000000*G14_0_2_1 - 2000000*G14_1_0_0 - 2000000.00000001*G14_1_0_1 + 2000000*G14_1_1_0 + 1.77635683940026e-09*G14_1_1_1 + 2000000.00000001*G14_1_2_1 - 1999999.99999999*G15_0_3_0 - 2000000*G15_0_3_1 + 1999999.99999999*G15_0_4_0 + 1.77635683940025e-09*G15_0_4_1 + 2000000*G15_0_5_1 - 2000000*G15_1_3_0 - 2000000.00000001*G15_1_3_1 + 2000000*G15_1_4_0 + 1.77635683940026e-09*G15_1_4_1 + 2000000.00000001*G15_1_5_1;
      A[7] = 3999999.99999999*G0_0_0_0 + 3999999.99999999*G0_0_0_1 - 3999999.99999999*G0_0_1_0 - 3.55271367880049e-09*G0_0_1_1 - 3999999.99999999*G0_0_2_1 + 2.87547763377915e-08*G0_1_0_0 + 2.87547763377916e-08*G0_1_0_1 - 2.87547763377915e-08*G0_1_1_0 - 2.87547763377915e-08*G0_1_2_1 + 3999999.99999999*G1_0_0_0 + 3999999.99999999*G1_0_0_1 - 3999999.99999999*G1_0_1_0 - 3.55271367880049e-09*G1_0_1_1 - 3999999.99999999*G1_0_2_1 + 2.87547763377915e-08*G1_1_0_0 + 2.87547763377916e-08*G1_1_0_1 - 2.87547763377915e-08*G1_1_1_0 - 2.87547763377915e-08*G1_1_2_1 + 3999999.99999999*G2_0_3_0 + 3999999.99999999*G2_0_3_1 - 3999999.99999999*G2_0_4_0 - 3.55271367880049e-09*G2_0_4_1 - 3999999.99999999*G2_0_5_1 + 2.87547763377915e-08*G2_1_3_0 + 2.87547763377916e-08*G2_1_3_1 - 2.87547763377915e-08*G2_1_4_0 - 2.87547763377915e-08*G2_1_5_1 + 3999999.99999999*G3_0_3_0 + 3999999.99999999*G3_0_3_1 - 3999999.99999999*G3_0_4_0 - 3.55271367880049e-09*G3_0_4_1 - 3999999.99999999*G3_0_5_1 + 2.87547763377915e-08*G3_1_3_0 + 2.87547763377916e-08*G3_1_3_1 - 2.87547763377915e-08*G3_1_4_0 - 2.87547763377915e-08*G3_1_5_1 + 1999999.99999999*G4_0_3_0 + 2000000*G4_0_3_1 - 1999999.99999999*G4_0_4_0 - 1.77635683940025e-09*G4_0_4_1 - 2000000*G4_0_5_1 + 1.43773881688958e-08*G4_1_3_0 + 1.43773881688958e-08*G4_1_3_1 - 1.43773881688958e-08*G4_1_4_0 - 1.43773881688958e-08*G4_1_5_1 + 1999999.99999999*G5_0_3_0 + 2000000*G5_0_3_1 - 1999999.99999999*G5_0_4_0 - 1.77635683940025e-09*G5_0_4_1 - 2000000*G5_0_5_1 + 1.43773881688958e-08*G5_1_3_0 + 1.43773881688958e-08*G5_1_3_1 - 1.43773881688958e-08*G5_1_4_0 - 1.43773881688958e-08*G5_1_5_1 + 1999999.99999999*G14_0_0_0 + 2000000*G14_0_0_1 - 1999999.99999999*G14_0_1_0 - 1.77635683940025e-09*G14_0_1_1 - 2000000*G14_0_2_1 + 1.43773881688958e-08*G14_1_0_0 + 1.43773881688958e-08*G14_1_0_1 - 1.43773881688958e-08*G14_1_1_0 - 1.43773881688958e-08*G14_1_2_1 + 1999999.99999999*G15_0_3_0 + 2000000*G15_0_3_1 - 1999999.99999999*G15_0_4_0 - 1.77635683940025e-09*G15_0_4_1 - 2000000*G15_0_5_1 + 1.43773881688958e-08*G15_1_3_0 + 1.43773881688958e-08*G15_1_3_1 - 1.43773881688958e-08*G15_1_4_0 - 1.43773881688958e-08*G15_1_5_1;
      A[8] = -3999999.99999999*G0_1_0_0 - 4000000*G0_1_0_1 + 3999999.99999999*G0_1_1_0 + 3.5527136788005e-09*G0_1_1_1 + 4000000*G0_1_2_1 - 3999999.99999999*G1_1_0_0 - 4000000*G1_1_0_1 + 3999999.99999999*G1_1_1_0 + 3.5527136788005e-09*G1_1_1_1 + 4000000*G1_1_2_1 - 3999999.99999999*G2_1_3_0 - 4000000*G2_1_3_1 + 3999999.99999999*G2_1_4_0 + 3.5527136788005e-09*G2_1_4_1 + 4000000*G2_1_5_1 - 3999999.99999999*G3_1_3_0 - 4000000*G3_1_3_1 + 3999999.99999999*G3_1_4_0 + 3.5527136788005e-09*G3_1_4_1 + 4000000*G3_1_5_1 - 2000000*G4_1_3_0 - 2000000*G4_1_3_1 + 2000000*G4_1_4_0 + 1.77635683940025e-09*G4_1_4_1 + 2000000*G4_1_5_1 - 2000000*G5_1_3_0 - 2000000*G5_1_3_1 + 2000000*G5_1_4_0 + 1.77635683940025e-09*G5_1_4_1 + 2000000*G5_1_5_1 - 2000000*G14_1_0_0 - 2000000*G14_1_0_1 + 2000000*G14_1_1_0 + 1.77635683940025e-09*G14_1_1_1 + 2000000*G14_1_2_1 - 2000000*G15_1_3_0 - 2000000*G15_1_3_1 + 2000000*G15_1_4_0 + 1.77635683940025e-09*G15_1_4_1 + 2000000*G15_1_5_1;
      A[9] = -5.32907051820074e-09*G0_0_0_0 - 5.32907051820075e-09*G0_0_0_1 + 5.32907051820074e-09*G0_0_1_0 + 5.32907051820075e-09*G0_0_2_1 + 7999999.99999994*G0_1_0_0 + 7999999.99999996*G0_1_0_1 - 7999999.99999994*G0_1_1_0 - 7.10542735760096e-09*G0_1_1_1 - 7999999.99999995*G0_1_2_1 - 5.32907051820074e-09*G1_0_0_0 - 5.32907051820075e-09*G1_0_0_1 + 5.32907051820074e-09*G1_0_1_0 + 5.32907051820075e-09*G1_0_2_1 + 7999999.99999994*G1_1_0_0 + 7999999.99999996*G1_1_0_1 - 7999999.99999994*G1_1_1_0 - 7.10542735760096e-09*G1_1_1_1 - 7999999.99999995*G1_1_2_1 - 5.32907051820074e-09*G2_0_3_0 - 5.32907051820075e-09*G2_0_3_1 + 5.32907051820074e-09*G2_0_4_0 + 5.32907051820075e-09*G2_0_5_1 + 7999999.99999994*G2_1_3_0 + 7999999.99999996*G2_1_3_1 - 7999999.99999994*G2_1_4_0 - 7.10542735760096e-09*G2_1_4_1 - 7999999.99999995*G2_1_5_1 - 5.32907051820074e-09*G3_0_3_0 - 5.32907051820075e-09*G3_0_3_1 + 5.32907051820074e-09*G3_0_4_0 + 5.32907051820075e-09*G3_0_5_1 + 7999999.99999994*G3_1_3_0 + 7999999.99999996*G3_1_3_1 - 7999999.99999994*G3_1_4_0 - 7.10542735760096e-09*G3_1_4_1 - 7999999.99999995*G3_1_5_1 - 2.66453525910037e-09*G4_0_3_0 - 2.66453525910038e-09*G4_0_3_1 + 2.66453525910037e-09*G4_0_4_0 + 2.66453525910037e-09*G4_0_5_1 + 3999999.99999997*G4_1_3_0 + 3999999.99999998*G4_1_3_1 - 3999999.99999997*G4_1_4_0 - 3.55271367880048e-09*G4_1_4_1 - 3999999.99999997*G4_1_5_1 - 2.66453525910037e-09*G5_0_3_0 - 2.66453525910038e-09*G5_0_3_1 + 2.66453525910037e-09*G5_0_4_0 + 2.66453525910037e-09*G5_0_5_1 + 3999999.99999997*G5_1_3_0 + 3999999.99999998*G5_1_3_1 - 3999999.99999997*G5_1_4_0 - 3.55271367880048e-09*G5_1_4_1 - 3999999.99999997*G5_1_5_1 - 2.66453525910037e-09*G14_0_0_0 - 2.66453525910038e-09*G14_0_0_1 + 2.66453525910037e-09*G14_0_1_0 + 2.66453525910037e-09*G14_0_2_1 + 3999999.99999997*G14_1_0_0 + 3999999.99999998*G14_1_0_1 - 3999999.99999997*G14_1_1_0 - 3.55271367880048e-09*G14_1_1_1 - 3999999.99999997*G14_1_2_1 - 2.66453525910037e-09*G15_0_3_0 - 2.66453525910038e-09*G15_0_3_1 + 2.66453525910037e-09*G15_0_4_0 + 2.66453525910037e-09*G15_0_5_1 + 3999999.99999997*G15_1_3_0 + 3999999.99999998*G15_1_3_1 - 3999999.99999997*G15_1_4_0 - 3.55271367880048e-09*G15_1_4_1 - 3999999.99999997*G15_1_5_1;
      A[10] = 5.32907051820074e-09*G0_0_0_0 + 5.32907051820075e-09*G0_0_0_1 - 5.32907051820074e-09*G0_0_1_0 - 5.32907051820075e-09*G0_0_2_1 + 8000000.00000003*G0_1_0_0 + 8000000.00000004*G0_1_0_1 - 8000000.00000003*G0_1_1_0 - 7.10542735760103e-09*G0_1_1_1 - 8000000.00000004*G0_1_2_1 + 5.32907051820074e-09*G1_0_0_0 + 5.32907051820075e-09*G1_0_0_1 - 5.32907051820074e-09*G1_0_1_0 - 5.32907051820075e-09*G1_0_2_1 + 8000000.00000003*G1_1_0_0 + 8000000.00000004*G1_1_0_1 - 8000000.00000003*G1_1_1_0 - 7.10542735760103e-09*G1_1_1_1 - 8000000.00000004*G1_1_2_1 + 5.32907051820074e-09*G2_0_3_0 + 5.32907051820075e-09*G2_0_3_1 - 5.32907051820074e-09*G2_0_4_0 - 5.32907051820075e-09*G2_0_5_1 + 8000000.00000003*G2_1_3_0 + 8000000.00000004*G2_1_3_1 - 8000000.00000003*G2_1_4_0 - 7.10542735760103e-09*G2_1_4_1 - 8000000.00000004*G2_1_5_1 + 5.32907051820074e-09*G3_0_3_0 + 5.32907051820075e-09*G3_0_3_1 - 5.32907051820074e-09*G3_0_4_0 - 5.32907051820075e-09*G3_0_5_1 + 8000000.00000003*G3_1_3_0 + 8000000.00000004*G3_1_3_1 - 8000000.00000003*G3_1_4_0 - 7.10542735760103e-09*G3_1_4_1 - 8000000.00000004*G3_1_5_1 + 2.66453525910037e-09*G4_0_3_0 + 2.66453525910038e-09*G4_0_3_1 - 2.66453525910037e-09*G4_0_4_0 - 2.66453525910037e-09*G4_0_5_1 + 4000000.00000001*G4_1_3_0 + 4000000.00000002*G4_1_3_1 - 4000000.00000001*G4_1_4_0 - 3.55271367880052e-09*G4_1_4_1 - 4000000.00000002*G4_1_5_1 + 2.66453525910037e-09*G5_0_3_0 + 2.66453525910038e-09*G5_0_3_1 - 2.66453525910037e-09*G5_0_4_0 - 2.66453525910037e-09*G5_0_5_1 + 4000000.00000001*G5_1_3_0 + 4000000.00000002*G5_1_3_1 - 4000000.00000001*G5_1_4_0 - 3.55271367880052e-09*G5_1_4_1 - 4000000.00000002*G5_1_5_1 + 2.66453525910037e-09*G14_0_0_0 + 2.66453525910038e-09*G14_0_0_1 - 2.66453525910037e-09*G14_0_1_0 - 2.66453525910037e-09*G14_0_2_1 + 4000000.00000001*G14_1_0_0 + 4000000.00000002*G14_1_0_1 - 4000000.00000001*G14_1_1_0 - 3.55271367880052e-09*G14_1_1_1 - 4000000.00000002*G14_1_2_1 + 2.66453525910037e-09*G15_0_3_0 + 2.66453525910038e-09*G15_0_3_1 - 2.66453525910037e-09*G15_0_4_0 - 2.66453525910037e-09*G15_0_5_1 + 4000000.00000001*G15_1_3_0 + 4000000.00000002*G15_1_3_1 - 4000000.00000001*G15_1_4_0 - 3.55271367880052e-09*G15_1_4_1 - 4000000.00000002*G15_1_5_1;
      A[11] = 2.99171648251125e-09*G0_0_0_0 + 2.99171648251126e-09*G0_0_0_1 - 2.99171648251125e-09*G0_0_1_0 - 2.99171648251126e-09*G0_0_2_1 - 7999999.99999999*G0_1_0_0 - 8000000.00000001*G0_1_0_1 + 7999999.99999999*G0_1_1_0 + 7.10542735760101e-09*G0_1_1_1 + 8000000*G0_1_2_1 + 2.99171648251125e-09*G1_0_0_0 + 2.99171648251126e-09*G1_0_0_1 - 2.99171648251125e-09*G1_0_1_0 - 2.99171648251126e-09*G1_0_2_1 - 7999999.99999999*G1_1_0_0 - 8000000.00000001*G1_1_0_1 + 7999999.99999999*G1_1_1_0 + 7.10542735760101e-09*G1_1_1_1 + 8000000*G1_1_2_1 + 2.99171648251125e-09*G2_0_3_0 + 2.99171648251126e-09*G2_0_3_1 - 2.99171648251125e-09*G2_0_4_0 - 2.99171648251126e-09*G2_0_5_1 - 7999999.99999999*G2_1_3_0 - 8000000.00000001*G2_1_3_1 + 7999999.99999999*G2_1_4_0 + 7.10542735760101e-09*G2_1_4_1 + 8000000*G2_1_5_1 + 2.99171648251125e-09*G3_0_3_0 + 2.99171648251126e-09*G3_0_3_1 - 2.99171648251125e-09*G3_0_4_0 - 2.99171648251126e-09*G3_0_5_1 - 7999999.99999999*G3_1_3_0 - 8000000.00000001*G3_1_3_1 + 7999999.99999999*G3_1_4_0 + 7.10542735760101e-09*G3_1_4_1 + 8000000*G3_1_5_1 + 1.49585824125563e-09*G4_0_3_0 + 1.49585824125563e-09*G4_0_3_1 - 1.49585824125563e-09*G4_0_4_0 - 1.49585824125563e-09*G4_0_5_1 - 4000000*G4_1_3_0 - 4000000*G4_1_3_1 + 4000000*G4_1_4_0 + 3.5527136788005e-09*G4_1_4_1 + 4000000*G4_1_5_1 + 1.49585824125563e-09*G5_0_3_0 + 1.49585824125563e-09*G5_0_3_1 - 1.49585824125563e-09*G5_0_4_0 - 1.49585824125563e-09*G5_0_5_1 - 4000000*G5_1_3_0 - 4000000*G5_1_3_1 + 4000000*G5_1_4_0 + 3.5527136788005e-09*G5_1_4_1 + 4000000*G5_1_5_1 + 1.49585824125563e-09*G14_0_0_0 + 1.49585824125563e-09*G14_0_0_1 - 1.49585824125563e-09*G14_0_1_0 - 1.49585824125563e-09*G14_0_2_1 - 4000000*G14_1_0_0 - 4000000*G14_1_0_1 + 4000000*G14_1_1_0 + 3.5527136788005e-09*G14_1_1_1 + 4000000*G14_1_2_1 + 1.49585824125563e-09*G15_0_3_0 + 1.49585824125563e-09*G15_0_3_1 - 1.49585824125563e-09*G15_0_4_0 - 1.49585824125563e-09*G15_0_5_1 - 4000000*G15_1_3_0 - 4000000*G15_1_3_1 + 4000000*G15_1_4_0 + 3.5527136788005e-09*G15_1_4_1 + 4000000*G15_1_5_1;
      A[12] = 0.0;
      A[13] = 0.0;
      A[14] = 0.0;
      A[15] = 0.0;
      A[16] = 0.0;
      A[17] = 0.0;
      A[18] = 0.0;
      A[19] = 0.0;
      A[20] = 0.0;
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "e0c49bc52ec6cd6552061fa299888c75cca4e293b4c97d8c7e46693efb562f4056543faf7e5b4c7d5c32e71d088af25447acecf9cfcba4bb534c75481798c289";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 4;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_5();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_2();
        break;
      }
    case 2:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_4();
        break;
      }
    case 3:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_0();
        break;
      }
    case 4:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_5();
        break;
      }
    case 1:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_2();
        break;
      }
    case 2:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_4();
        break;
      }
    case 3:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_0();
        break;
      }
    case 4:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_dofmap_0();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 3;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    switch (subdomain_id)
    {
    case 2:
      {
        return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return new ffc_form_76e710c42de53b16a6f81ee406e47a24e84a5933_exterior_facet_integral_0_otherwise();
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
